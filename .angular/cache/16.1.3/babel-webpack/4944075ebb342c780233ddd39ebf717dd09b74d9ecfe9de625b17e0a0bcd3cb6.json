{"ast":null,"code":"import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { Form } from \"../../entity/Form\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/user.service\";\nimport * as i2 from \"../../service/form.service\";\nimport * as i3 from \"../../service/modal-create-window.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"../../little-components/text-field/text-field.component\";\nimport * as i7 from \"../../little-components/error-paragraph/error-paragraph.component\";\nimport * as i8 from \"../../little-components/middle-control/middle-control.component\";\nimport * as i9 from \"../../little-components/checkbox-single/checkbox-single.component\";\nimport * as i10 from \"../../little-components/combobox-topic/combobox-topic.component\";\nfunction CreateFormChooseTopicComponent_app_error_paragraph_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-error-paragraph\", 6);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"errorMessage\", ctx_r0.globalError);\n  }\n}\nexport class CreateFormChooseTopicComponent {\n  constructor(userService, formService, modalAddWindowService) {\n    this.showAllErrors = false;\n    this.globalError = '';\n    this.form = new FormGroup({\n      name: new FormControl('', [Validators.minLength(3), Validators.maxLength(100), Validators.required]),\n      topic: new FormControl(null),\n      shown: new FormControl(true)\n    });\n    this.formService = formService;\n    this.modalCreateWindowsService = modalAddWindowService;\n  }\n  ngOnInit() {\n    this.subscriptionUser = this.user;\n  }\n  ngOnDestroy() {\n    if (this.subscriptionUser) this.subscriptionUser.unsubscribe();\n    if (this.subscriptionSave) this.subscriptionSave.unsubscribe();\n  }\n  isGlobalErrorSet() {\n    return this.globalError != '';\n  }\n  submit() {\n    if (this.anyErrorExists()) return;\n    this.saveForm();\n  }\n  anyErrorExists() {\n    this.resetGlobalError();\n    if (this.isAnyErrorInFields()) {\n      this.showAllErrors = true;\n      return true;\n    }\n    return false;\n  }\n  saveForm() {\n    let form = this.createFormFromFields();\n    this.subscriptionSave = this.formService.saveForm(form).subscribe(result => {\n      console.log(result);\n      if (result.success) {\n        this.modalCreateWindowsService.close();\n      } else {\n        this.globalError = result.message;\n      }\n    });\n  }\n  resetGlobalError() {\n    this.globalError = '';\n  }\n  createFormFromFields() {\n    let name = this.getNameFromField();\n    let shown = this.getShownFromField();\n    let topic = this.getTopicFromField();\n    return new Form(null, name, shown, this.user, topic);\n  }\n  getNameFromField() {\n    return this.form.controls.name.getRawValue();\n  }\n  getShownFromField() {\n    return this.form.controls.shown.getRawValue();\n  }\n  getTopicFromField() {\n    return this.form.controls.topic.getRawValue();\n  }\n  isAnyErrorInFields() {\n    return this.doesControlHaveError(this.form.controls.name) || this.doesControlHaveError(this.form.controls.topic);\n  }\n  doesControlHaveError(formControl) {\n    return formControl.errors != null;\n  }\n}\nCreateFormChooseTopicComponent.ɵfac = function CreateFormChooseTopicComponent_Factory(t) {\n  return new (t || CreateFormChooseTopicComponent)(i0.ɵɵdirectiveInject(i1.UserService), i0.ɵɵdirectiveInject(i2.FormService), i0.ɵɵdirectiveInject(i3.ModalCreateWindowService));\n};\nCreateFormChooseTopicComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CreateFormChooseTopicComponent,\n  selectors: [[\"app-create-form-choose-topic\"]],\n  decls: 9,\n  vars: 7,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [3, \"errorMessage\", 4, \"ngIf\"], [\"fieldName\", \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435\", 3, \"formElement\", \"showError\"], [\"fieldName\", \"\\u0422\\u0435\\u043C\\u0430\", 3, \"formElement\", \"showError\"], [\"fieldName\", \"\\u041E\\u0442\\u043E\\u0431\\u0440\\u0430\\u0436\\u0430\\u0442\\u044C \\u0444\\u043E\\u0440\\u043C\\u0443 \\u0432 \\u043A\\u0430\\u0442\\u0430\\u043B\\u043E\\u0433\\u0435\", 3, \"formElement\"], [\"type\", \"submit\", 1, \"button-red-rounded\"], [3, \"errorMessage\"]],\n  template: function CreateFormChooseTopicComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function CreateFormChooseTopicComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.submit();\n      });\n      i0.ɵɵtemplate(1, CreateFormChooseTopicComponent_app_error_paragraph_1_Template, 1, 1, \"app-error-paragraph\", 1);\n      i0.ɵɵelement(2, \"app-text-field\", 2)(3, \"app-combobox-topic\", 3)(4, \"app-checkbox-single\", 4)(5, \"br\");\n      i0.ɵɵelementStart(6, \"app-middle-control\")(7, \"button\", 5);\n      i0.ɵɵtext(8, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C \\u0438\\u0437\\u043C\\u0435\\u043D\\u0435\\u043D\\u0438\\u044F\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isGlobalErrorSet());\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formElement\", ctx.form.controls.name)(\"showError\", ctx.showAllErrors);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formElement\", ctx.form.controls.topic)(\"showError\", ctx.showAllErrors);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formElement\", ctx.form.controls.shown);\n    }\n  },\n  dependencies: [i4.NgIf, i5.ɵNgNoValidate, i5.NgControlStatusGroup, i5.FormGroupDirective, i6.TextFieldComponent, i7.ErrorParagraphComponent, i8.MiddleControlComponent, i9.CheckboxSingleComponent, i10.ComboboxTopicComponent],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["FormControl","FormGroup","Validators","Form","i0","ɵɵelement","ɵɵproperty","ctx_r0","globalError","CreateFormChooseTopicComponent","constructor","userService","formService","modalAddWindowService","showAllErrors","form","name","minLength","maxLength","required","topic","shown","modalCreateWindowsService","ngOnInit","subscriptionUser","user","ngOnDestroy","unsubscribe","subscriptionSave","isGlobalErrorSet","submit","anyErrorExists","saveForm","resetGlobalError","isAnyErrorInFields","createFormFromFields","subscribe","result","console","log","success","close","message","getNameFromField","getShownFromField","getTopicFromField","controls","getRawValue","doesControlHaveError","formControl","errors","ɵɵdirectiveInject","i1","UserService","i2","FormService","i3","ModalCreateWindowService","selectors","decls","vars","consts","template","CreateFormChooseTopicComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","CreateFormChooseTopicComponent_Template_form_ngSubmit_0_listener","ɵɵtemplate","CreateFormChooseTopicComponent_app_error_paragraph_1_Template","ɵɵtext","ɵɵelementEnd","ɵɵadvance"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\components\\create-form-choose-topic\\create-form-choose-topic.component.ts","C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\components\\create-form-choose-topic\\create-form-choose-topic.component.html"],"sourcesContent":["import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {FormService} from \"../../service/form.service\";\nimport {Subscription} from \"rxjs\";\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {Topic} from \"../../entity/Topic\";\nimport {ModalCreateWindowService} from \"../../service/modal-create-window.service\";\nimport {Form} from \"../../entity/Form\";\nimport {User} from \"../../entity/User\";\nimport {UserService} from \"../../service/user.service\";\n\n@Component({\n  selector: 'app-create-form-choose-topic',\n  templateUrl: './create-form-choose-topic.component.html',\n  styleUrls: ['./create-form-choose-topic.component.css']\n})\nexport class CreateFormChooseTopicComponent implements OnInit, OnDestroy {\n  private formService: FormService;\n  private userService: UserService;\n  private modalCreateWindowsService: ModalCreateWindowService;\n\n  showAllErrors = false;\n  globalError: string = '';\n\n  private user: User;\n\n  private subscriptionSave: Subscription;\n  private subscriptionUser: Subscription;\n\n  form = new FormGroup({\n    name: new FormControl<string>('', [\n      Validators.minLength(3),\n      Validators.maxLength(100),\n      Validators.required\n    ]),\n    topic: new FormControl<Topic>(null),\n    shown: new FormControl<boolean>(true),\n  });\n\n  constructor(userService: UserService,\n              formService: FormService,\n              modalAddWindowService: ModalCreateWindowService) {\n    this.formService = formService;\n    this.modalCreateWindowsService = modalAddWindowService;\n  }\n\n  ngOnInit() {\n    this.subscriptionUser = this.user\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptionUser)\n      this.subscriptionUser.unsubscribe();\n    if (this.subscriptionSave)\n      this.subscriptionSave.unsubscribe();\n  }\n\n  isGlobalErrorSet(): boolean {\n    return this.globalError != '';\n  }\n\n  submit() {\n    if (this.anyErrorExists())\n      return;\n\n    this.saveForm();\n  }\n\n  private anyErrorExists(): boolean {\n    this.resetGlobalError();\n\n    if (this.isAnyErrorInFields()) {\n      this.showAllErrors = true;\n      return true;\n    }\n    return false;\n  }\n\n  private saveForm() {\n    let form = this.createFormFromFields();\n\n    this.subscriptionSave = this.formService.saveForm(form)\n      .subscribe(result => {\n        console.log(result);\n        if (result.success) {\n          this.modalCreateWindowsService.close();\n        }\n        else {\n          this.globalError = result.message;\n        }\n      });\n  }\n\n  private resetGlobalError() {\n    this.globalError = '';\n  }\n\n  private createFormFromFields(): Form {\n    let name = this.getNameFromField();\n    let shown = this.getShownFromField();\n    let topic = this.getTopicFromField();\n\n    return new Form(null, name, shown, this.user, topic);\n  }\n\n  private getNameFromField(): string {\n    return this.form.controls.name.getRawValue();\n  }\n\n  private getShownFromField(): boolean {\n    return this.form.controls.shown.getRawValue();\n  }\n\n  private getTopicFromField(): Topic {\n    return this.form.controls.topic.getRawValue();\n  }\n\n  private isAnyErrorInFields(): boolean {\n    return this.doesControlHaveError(this.form.controls.name) ||\n      this.doesControlHaveError(this.form.controls.topic);\n  }\n\n  private doesControlHaveError(formControl: FormControl): boolean {\n    return formControl.errors != null;\n  }\n}\n","<form [formGroup]=\"form\" (ngSubmit)=\"submit()\">\n  <app-error-paragraph\n    *ngIf=\"isGlobalErrorSet()\"\n    [errorMessage]=\"globalError\"\n  ></app-error-paragraph>\n\n  <app-text-field\n    fieldName=\"Название\"\n    [formElement]=\"form.controls.name\"\n    [showError]=\"showAllErrors\"\n  ></app-text-field>\n\n  <app-combobox-topic\n    fieldName=\"Тема\"\n    [formElement]=\"form.controls.topic\"\n    [showError]=\"showAllErrors\"\n  ></app-combobox-topic>\n\n  <app-checkbox-single\n    fieldName=\"Отображать форму в каталоге\"\n    [formElement]=\"form.controls.shown\"\n  ></app-checkbox-single>\n\n  <br/>\n\n  <app-middle-control>\n    <button\n      type=\"submit\"\n      class=\"button-red-rounded\"\n    >Сохранить изменения</button>\n  </app-middle-control>\n</form>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}