{"ast":null,"code":"import { Stomp } from '@stomp/stompjs';\nimport * as SockJS from 'sockjs-client';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class MessagingService {\n  constructor(router) {\n    this.router = router;\n    this.onError = err => {\n      console.log('Error: ' + err);\n    };\n  }\n  connect(formId) {\n    const _this = this;\n    const socket = new SockJS('/ws');\n    this.stompClient = Stomp.over(socket);\n    this.stompClient.connect({}, () => {\n      _this.stompClient.subscribe(this.getDestination(formId), data => {\n        return JSON.parse(data.body);\n      });\n    }, this.onError);\n  }\n  getDestination(formId) {\n    return '/user/answered_forms_queue/' + formId;\n  }\n}\nMessagingService.ɵfac = function MessagingService_Factory(t) {\n  return new (t || MessagingService)(i0.ɵɵinject(i1.Router));\n};\nMessagingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MessagingService,\n  factory: MessagingService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["Stomp","SockJS","MessagingService","constructor","router","onError","err","console","log","connect","formId","_this","socket","stompClient","over","subscribe","getDestination","data","JSON","parse","body","i0","ɵɵinject","i1","Router","factory","ɵfac","providedIn"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\service\\messaging-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CompatClient, Stomp } from '@stomp/stompjs';\nimport * as SockJS from 'sockjs-client';\nimport {AnsweredForm} from \"../entity/AnsweredForm\";\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MessagingService {\n\n\n  constructor(private router: Router) {\n  }\n\n  private stompClient!: CompatClient;\n\n  connect(formId: bigint) {\n    const _this = this;\n    const socket = new SockJS('/ws');\n    this.stompClient = Stomp.over(socket);\n    this.stompClient.connect(\n      {},\n      () => {\n        _this.stompClient.subscribe(this.getDestination(formId), (data: any) => {\n          return JSON.parse(data.body) as AnsweredForm[];\n        });\n      },\n      this.onError\n    );\n  }\n\n  private getDestination(formId: bigint): string {\n    return '/user/answered_forms_queue/' + formId;\n  }\n\n  private onError = (err: any) => {\n    console.log('Error: ' + err);\n  };\n}\n"],"mappings":"AAEA,SAAuBA,KAAK,QAAQ,gBAAgB;AACpD,OAAO,KAAKC,MAAM,MAAM,eAAe;;;AAMvC,OAAM,MAAOC,gBAAgB;EAG3BC,YAAoBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;IAwBlB,KAAAC,OAAO,GAAIC,GAAQ,IAAI;MAC7BC,OAAO,CAACC,GAAG,CAAC,SAAS,GAAGF,GAAG,CAAC;IAC9B,CAAC;EAzBD;EAIAG,OAAOA,CAACC,MAAc;IACpB,MAAMC,KAAK,GAAG,IAAI;IAClB,MAAMC,MAAM,GAAG,IAAIX,MAAM,CAAC,KAAK,CAAC;IAChC,IAAI,CAACY,WAAW,GAAGb,KAAK,CAACc,IAAI,CAACF,MAAM,CAAC;IACrC,IAAI,CAACC,WAAW,CAACJ,OAAO,CACtB,EAAE,EACF,MAAK;MACHE,KAAK,CAACE,WAAW,CAACE,SAAS,CAAC,IAAI,CAACC,cAAc,CAACN,MAAM,CAAC,EAAGO,IAAS,IAAI;QACrE,OAAOC,IAAI,CAACC,KAAK,CAACF,IAAI,CAACG,IAAI,CAAmB;MAChD,CAAC,CAAC;IACJ,CAAC,EACD,IAAI,CAACf,OAAO,CACb;EACH;EAEQW,cAAcA,CAACN,MAAc;IACnC,OAAO,6BAA6B,GAAGA,MAAM;EAC/C;;AAzBWR,gBAAgB,C;mBAAhBA,gBAAgB,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA;AAAA;AAAhBtB,gBAAgB,C;SAAhBA,gBAAgB;EAAAuB,OAAA,EAAhBvB,gBAAgB,CAAAwB,IAAA;EAAAC,UAAA,EAFf;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}