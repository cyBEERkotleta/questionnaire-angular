{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { FieldOption } from \"../../entity/FieldOption\";\nimport { FormArray, FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../../little-components/field-name/field-name.component\";\nfunction OptionListComponent_div_0_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 8)(1, \"div\", 9)(2, \"div\", 10)(3, \"input\", 11);\n    i0.ɵɵlistener(\"change\", function OptionListComponent_div_0_div_7_Template_input_change_3_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r4.updateTextInFieldOptions());\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 12)(5, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function OptionListComponent_div_0_div_7_Template_button_click_5_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const i_r3 = restoredCtx.index;\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r6.removeFieldOption(i_r3));\n    });\n    i0.ɵɵtext(6, \"\\u2715\");\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const i_r3 = ctx.index;\n    i0.ɵɵpropertyInterpolate(\"formGroupName\", i_r3);\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate1(\"placeholder\", \"\\u0412\\u0430\\u0440\\u0438\\u0430\\u043D\\u0442 \", i_r3 + 1, \"\");\n  }\n}\nfunction OptionListComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"br\");\n    i0.ɵɵelementStart(2, \"p\", 1);\n    i0.ɵɵelement(3, \"app-field-name\", 2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 3)(5, \"form\", 4)(6, \"div\", 5);\n    i0.ɵɵtemplate(7, OptionListComponent_div_0_div_7_Template, 7, 2, \"div\", 6);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(8, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function OptionListComponent_div_0_Template_button_click_8_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.addFieldOption());\n    });\n    i0.ɵɵtext(9, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"required\", true);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.fieldOptionsForm);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.fieldOptionsForm.get(\"options\")[\"controls\"]);\n  }\n}\nexport let OptionListComponent = /*#__PURE__*/(() => {\n  class OptionListComponent {\n    constructor() {\n      this.fieldOptions = [];\n      this.visible = false;\n      this.fieldOptionsChange = new EventEmitter();\n      this.fieldOptionsForm = new FormGroup({\n        options: new FormArray([new FormGroup({\n          text: new FormControl('', [Validators.required, Validators.maxLength(200)])\n        })])\n      });\n    }\n    ngOnInit() {\n      this.populateFieldOptionsForm();\n    }\n    getOptionsFormArray() {\n      return this.fieldOptionsForm.get('options');\n    }\n    populateFieldOptionsForm() {\n      const optionsArray = this.getOptionsFormArray();\n      optionsArray.clear();\n      for (let i = 0; i < this.fieldOptions.length; i++) {\n        let value = this.fieldOptions[i].text;\n        optionsArray.push(new FormGroup({\n          text: new FormControl(value, [Validators.required, Validators.maxLength(200)])\n        }));\n      }\n    }\n    addFieldOption() {\n      const optionsArray = this.getOptionsFormArray();\n      optionsArray.push(new FormGroup({\n        text: new FormControl('', [Validators.required, Validators.maxLength(200)])\n      }));\n      this.fieldOptions.push(new FieldOption(null, ''));\n      this.fieldOptionsChange.emit(this.fieldOptions);\n    }\n    removeFieldOption(indexToRemove) {\n      const optionsArray = this.getOptionsFormArray();\n      optionsArray.removeAt(indexToRemove);\n      this.fieldOptions = this.fieldOptions.filter((_, index) => index != indexToRemove);\n      this.fieldOptionsChange.emit(this.fieldOptions);\n    }\n    updateTextInFieldOptions() {\n      const optionsArray = this.getOptionsFormArray();\n      for (let i = 0; i < this.fieldOptions.length; i++) {\n        let text = optionsArray.controls[i].getRawValue().text;\n        this.fieldOptions[i].text = text;\n        this.fieldOptions[i].shownName = text;\n      }\n      this.fieldOptionsChange.emit(this.fieldOptions);\n    }\n  }\n  OptionListComponent.ɵfac = function OptionListComponent_Factory(t) {\n    return new (t || OptionListComponent)();\n  };\n  OptionListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: OptionListComponent,\n    selectors: [[\"app-option-list\"]],\n    inputs: {\n      fieldOptions: \"fieldOptions\",\n      visible: \"visible\"\n    },\n    outputs: {\n      fieldOptionsChange: \"fieldOptionsChange\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngIf\"], [1, \"mt-0\", \"mb-0\"], [\"fieldName\", \"\\u0412\\u0430\\u0440\\u0438\\u0430\\u043D\\u0442\\u044B \\u043E\\u0442\\u0432\\u0435\\u0442\\u0430\", 3, \"required\"], [1, \"options-container\"], [3, \"formGroup\"], [\"formArrayName\", \"options\"], [3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 1, \"btn\", \"btn-dark\", \"mt-2\", \"text-white\", \"text-xl\", \"fw-semibold\", 3, \"click\"], [3, \"formGroupName\"], [1, \"row\", \"mt-1\"], [1, \"col\"], [\"type\", \"text\", \"formControlName\", \"text\", 1, \"form-control\", 3, \"placeholder\", \"change\"], [1, \"col-auto\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", \"text-white\", \"text-xl\", \"fw-bolder\", 3, \"click\"]],\n    template: function OptionListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, OptionListComponent_div_0_Template, 10, 3, \"div\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.visible);\n      }\n    },\n    dependencies: [i1.NgForOf, i1.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName, i2.FormGroupName, i2.FormArrayName, i3.FieldNameComponent]\n  });\n  return OptionListComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}