{"ast":null,"code":"import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../service/user.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"../../little-components/error-paragraph/error-paragraph.component\";\nimport * as i6 from \"../../little-components/text-field-password/text-field-password.component\";\nfunction RestorePasswordComponent_app_error_paragraph_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-error-paragraph\", 6);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"errorMessage\", ctx_r0.globalError);\n  }\n}\nexport class RestorePasswordComponent {\n  constructor(activatedRoute, userService, router) {\n    this.showAllErrors = false;\n    this.globalError = '';\n    this.form = new FormGroup({\n      newPassword: new FormControl('', [Validators.required, Validators.minLength(8), Validators.maxLength(30)]),\n      confirmNewPassword: new FormControl('', [Validators.required, Validators.minLength(8), Validators.maxLength(30)])\n    });\n    this.activatedRoute = activatedRoute;\n    this.userService = userService;\n    this.router = router;\n  }\n  ngOnDestroy() {\n    if (this.subscriptionParams) this.subscriptionParams.unsubscribe();\n    if (this.subscriptionRestore) this.subscriptionRestore.unsubscribe();\n  }\n  isGlobalErrorSet() {\n    return this.globalError != '';\n  }\n  submit() {\n    if (this.anyErrorExists()) return;\n    this.changePassword();\n  }\n  anyErrorExists() {\n    this.resetGlobalError();\n    if (this.isAnyErrorInFields()) {\n      this.showAllErrors = true;\n      return true;\n    }\n    return false;\n  }\n  changePassword() {\n    let newPassword = this.getNewPasswordFromField();\n    this.subscriptionParams = this.activatedRoute.queryParams.subscribe(params => {\n      this.token = params['code'];\n      console.log(this.token);\n      console.log(location.pathname);\n      console.log(location.href);\n      console.log(location.search);\n      this.subscriptionRestore = this.userService.restorePassword(this.token, newPassword).subscribe(result => {\n        console.log(result);\n        if (result.success) {\n          this.doTransferToSuccessPage();\n        } else {\n          this.globalError = result.message;\n        }\n      });\n    });\n  }\n  resetGlobalError() {\n    this.globalError = '';\n  }\n  getNewPasswordFromField() {\n    return this.form.controls.newPassword.getRawValue();\n  }\n  getConfirmNewPasswordFromField() {\n    return this.form.controls.confirmNewPassword.getRawValue();\n  }\n  isAnyErrorInFields() {\n    let newPassword = this.getNewPasswordFromField();\n    let confirmNewPassword = this.getConfirmNewPasswordFromField();\n    if (newPassword != confirmNewPassword) {\n      this.globalError = 'Новый пароль и его подтверждение не совпадают';\n      return true;\n    }\n    return this.doesControlHaveError(this.form.controls.newPassword) || this.doesControlHaveError(this.form.controls.confirmNewPassword);\n  }\n  doesControlHaveError(formControl) {\n    return formControl.errors != null;\n  }\n  doTransferToSuccessPage() {\n    this.router.navigate(['/successful-restoration']);\n  }\n}\nRestorePasswordComponent.ɵfac = function RestorePasswordComponent_Factory(t) {\n  return new (t || RestorePasswordComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.UserService), i0.ɵɵdirectiveInject(i1.Router));\n};\nRestorePasswordComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RestorePasswordComponent,\n  selectors: [[\"app-restore-password\"]],\n  decls: 8,\n  vars: 6,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [3, \"errorMessage\", 4, \"ngIf\"], [\"fieldName\", \"\\u041D\\u043E\\u0432\\u044B\\u0439 \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C\", 3, \"formElement\", \"showError\"], [\"fieldName\", \"\\u041F\\u043E\\u0434\\u0442\\u0432\\u0435\\u0440\\u0434\\u0438\\u0442\\u0435 \\u043D\\u043E\\u0432\\u044B\\u0439 \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C\", 3, \"formElement\", \"showError\"], [1, \"flex\", \"flex-row\", \"items-center\"], [\"type\", \"submit\", 1, \"button-red-rounded\"], [3, \"errorMessage\"]],\n  template: function RestorePasswordComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function RestorePasswordComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.submit();\n      });\n      i0.ɵɵtemplate(1, RestorePasswordComponent_app_error_paragraph_1_Template, 1, 1, \"app-error-paragraph\", 1);\n      i0.ɵɵelement(2, \"app-text-field-password\", 2)(3, \"app-text-field-password\", 3)(4, \"br\");\n      i0.ɵɵelementStart(5, \"div\", 4)(6, \"button\", 5);\n      i0.ɵɵtext(7, \"\\u0418\\u0437\\u043C\\u0435\\u043D\\u0438\\u0442\\u044C\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isGlobalErrorSet());\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formElement\", ctx.form.controls.newPassword)(\"showError\", ctx.showAllErrors);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formElement\", ctx.form.controls.confirmNewPassword)(\"showError\", ctx.showAllErrors);\n    }\n  },\n  dependencies: [i3.NgIf, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i5.ErrorParagraphComponent, i6.TextFieldPasswordComponent],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["FormControl","FormGroup","Validators","i0","ɵɵelement","ɵɵproperty","ctx_r0","globalError","RestorePasswordComponent","constructor","activatedRoute","userService","router","showAllErrors","form","newPassword","required","minLength","maxLength","confirmNewPassword","ngOnDestroy","subscriptionParams","unsubscribe","subscriptionRestore","isGlobalErrorSet","submit","anyErrorExists","changePassword","resetGlobalError","isAnyErrorInFields","getNewPasswordFromField","queryParams","subscribe","params","token","console","log","location","pathname","href","search","restorePassword","result","success","doTransferToSuccessPage","message","controls","getRawValue","getConfirmNewPasswordFromField","doesControlHaveError","formControl","errors","navigate","ɵɵdirectiveInject","i1","ActivatedRoute","i2","UserService","Router","selectors","decls","vars","consts","template","RestorePasswordComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","RestorePasswordComponent_Template_form_ngSubmit_0_listener","ɵɵtemplate","RestorePasswordComponent_app_error_paragraph_1_Template","ɵɵtext","ɵɵelementEnd","ɵɵadvance"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\components\\restore-password\\restore-password.component.ts","C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\components\\restore-password\\restore-password.component.html"],"sourcesContent":["import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {UserService} from \"../../service/user.service\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {Subscription} from \"rxjs\";\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\n\n@Component({\n  selector: 'app-restore-password',\n  templateUrl: './restore-password.component.html',\n  styleUrls: ['./restore-password.component.css']\n})\nexport class RestorePasswordComponent implements OnDestroy {\n  private activatedRoute: ActivatedRoute;\n  private userService: UserService;\n  private router: Router;\n\n  showAllErrors = false;\n  globalError: string = '';\n\n  private token: string;\n\n  private subscriptionParams: Subscription;\n  private subscriptionRestore: Subscription;\n\n  form = new FormGroup({\n    newPassword: new FormControl<string>('', [\n      Validators.required,\n      Validators.minLength(8),\n      Validators.maxLength(30)\n    ]),\n    confirmNewPassword: new FormControl<string>('', [\n      Validators.required,\n      Validators.minLength(8),\n      Validators.maxLength(30)\n    ])\n  })\n\n  constructor(activatedRoute: ActivatedRoute,\n              userService: UserService,\n              router: Router) {\n    this.activatedRoute = activatedRoute;\n    this.userService = userService;\n    this.router = router;\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptionParams)\n      this.subscriptionParams.unsubscribe();\n    if (this.subscriptionRestore)\n      this.subscriptionRestore.unsubscribe();\n  }\n\n  isGlobalErrorSet(): boolean {\n    return this.globalError != '';\n  }\n\n  submit() {\n    if (this.anyErrorExists())\n      return;\n\n    this.changePassword();\n  }\n\n  private anyErrorExists(): boolean {\n    this.resetGlobalError();\n\n    if (this.isAnyErrorInFields()) {\n      this.showAllErrors = true;\n      return true;\n    }\n    return false;\n  }\n\n  private changePassword() {\n    let newPassword = this.getNewPasswordFromField();\n\n    this.subscriptionParams = this.activatedRoute.queryParams\n      .subscribe(params => {\n        this.token = params['code'];\n        console.log(this.token);\n        console.log(location.pathname);\n        console.log(location.href);\n        console.log(location.search);\n\n        this.subscriptionRestore = this.userService.restorePassword(this.token, newPassword)\n          .subscribe(result => {\n            console.log(result);\n            if (result.success) {\n              this.doTransferToSuccessPage();\n            }\n            else {\n              this.globalError = result.message;\n            }\n          });\n      });\n  }\n\n  resetGlobalError() {\n    this.globalError = '';\n  }\n\n  getNewPasswordFromField(): string {\n    return this.form.controls.newPassword.getRawValue();\n  }\n\n  getConfirmNewPasswordFromField(): string {\n    return this.form.controls.confirmNewPassword.getRawValue();\n  }\n\n  isAnyErrorInFields(): boolean {\n    let newPassword = this.getNewPasswordFromField();\n    let confirmNewPassword = this.getConfirmNewPasswordFromField();\n    if (newPassword != confirmNewPassword) {\n      this.globalError = 'Новый пароль и его подтверждение не совпадают';\n      return true;\n    }\n\n    return this.doesControlHaveError(this.form.controls.newPassword) ||\n      this.doesControlHaveError(this.form.controls.confirmNewPassword);\n  }\n\n  doesControlHaveError(formControl: FormControl): boolean {\n    return formControl.errors != null;\n  }\n\n  doTransferToSuccessPage() {\n    this.router.navigate(['/successful-restoration']);\n  }\n}\n","<form [formGroup]=\"form\" (ngSubmit)=\"submit()\">\n  <app-error-paragraph\n    *ngIf=\"isGlobalErrorSet()\"\n    [errorMessage]=\"globalError\"\n  ></app-error-paragraph>\n\n  <app-text-field-password\n    fieldName=\"Новый пароль\"\n    [formElement]=\"form.controls.newPassword\"\n    [showError]=\"showAllErrors\"\n  ></app-text-field-password>\n\n  <app-text-field-password\n    fieldName=\"Подтвердите новый пароль\"\n    [formElement]=\"form.controls.confirmNewPassword\"\n    [showError]=\"showAllErrors\"\n  ></app-text-field-password>\n\n  <br/>\n\n  <div\n    class=\"flex flex-row items-center\"\n  >\n    <button\n      type=\"submit\"\n      class=\"button-red-rounded\"\n    >Изменить</button>\n  </div>\n\n</form>\n"],"mappings":"AAIA,SAAQA,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAO,gBAAgB;;;;;;;;;;ICH/DC,EAAA,CAAAC,SAAA,6BAGuB;;;;IADrBD,EAAA,CAAAE,UAAA,iBAAAC,MAAA,CAAAC,WAAA,CAA4B;;;ADQhC,OAAM,MAAOC,wBAAwB;EA0BnCC,YAAYC,cAA8B,EAC9BC,WAAwB,EACxBC,MAAc;IAvB1B,KAAAC,aAAa,GAAG,KAAK;IACrB,KAAAN,WAAW,GAAW,EAAE;IAOxB,KAAAO,IAAI,GAAG,IAAIb,SAAS,CAAC;MACnBc,WAAW,EAAE,IAAIf,WAAW,CAAS,EAAE,EAAE,CACvCE,UAAU,CAACc,QAAQ,EACnBd,UAAU,CAACe,SAAS,CAAC,CAAC,CAAC,EACvBf,UAAU,CAACgB,SAAS,CAAC,EAAE,CAAC,CACzB,CAAC;MACFC,kBAAkB,EAAE,IAAInB,WAAW,CAAS,EAAE,EAAE,CAC9CE,UAAU,CAACc,QAAQ,EACnBd,UAAU,CAACe,SAAS,CAAC,CAAC,CAAC,EACvBf,UAAU,CAACgB,SAAS,CAAC,EAAE,CAAC,CACzB;KACF,CAAC;IAKA,IAAI,CAACR,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,MAAM,GAAGA,MAAM;EACtB;EAEAQ,WAAWA,CAAA;IACT,IAAI,IAAI,CAACC,kBAAkB,EACzB,IAAI,CAACA,kBAAkB,CAACC,WAAW,EAAE;IACvC,IAAI,IAAI,CAACC,mBAAmB,EAC1B,IAAI,CAACA,mBAAmB,CAACD,WAAW,EAAE;EAC1C;EAEAE,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACjB,WAAW,IAAI,EAAE;EAC/B;EAEAkB,MAAMA,CAAA;IACJ,IAAI,IAAI,CAACC,cAAc,EAAE,EACvB;IAEF,IAAI,CAACC,cAAc,EAAE;EACvB;EAEQD,cAAcA,CAAA;IACpB,IAAI,CAACE,gBAAgB,EAAE;IAEvB,IAAI,IAAI,CAACC,kBAAkB,EAAE,EAAE;MAC7B,IAAI,CAAChB,aAAa,GAAG,IAAI;MACzB,OAAO,IAAI;;IAEb,OAAO,KAAK;EACd;EAEQc,cAAcA,CAAA;IACpB,IAAIZ,WAAW,GAAG,IAAI,CAACe,uBAAuB,EAAE;IAEhD,IAAI,CAACT,kBAAkB,GAAG,IAAI,CAACX,cAAc,CAACqB,WAAW,CACtDC,SAAS,CAACC,MAAM,IAAG;MAClB,IAAI,CAACC,KAAK,GAAGD,MAAM,CAAC,MAAM,CAAC;MAC3BE,OAAO,CAACC,GAAG,CAAC,IAAI,CAACF,KAAK,CAAC;MACvBC,OAAO,CAACC,GAAG,CAACC,QAAQ,CAACC,QAAQ,CAAC;MAC9BH,OAAO,CAACC,GAAG,CAACC,QAAQ,CAACE,IAAI,CAAC;MAC1BJ,OAAO,CAACC,GAAG,CAACC,QAAQ,CAACG,MAAM,CAAC;MAE5B,IAAI,CAACjB,mBAAmB,GAAG,IAAI,CAACZ,WAAW,CAAC8B,eAAe,CAAC,IAAI,CAACP,KAAK,EAAEnB,WAAW,CAAC,CACjFiB,SAAS,CAACU,MAAM,IAAG;QAClBP,OAAO,CAACC,GAAG,CAACM,MAAM,CAAC;QACnB,IAAIA,MAAM,CAACC,OAAO,EAAE;UAClB,IAAI,CAACC,uBAAuB,EAAE;SAC/B,MACI;UACH,IAAI,CAACrC,WAAW,GAAGmC,MAAM,CAACG,OAAO;;MAErC,CAAC,CAAC;IACN,CAAC,CAAC;EACN;EAEAjB,gBAAgBA,CAAA;IACd,IAAI,CAACrB,WAAW,GAAG,EAAE;EACvB;EAEAuB,uBAAuBA,CAAA;IACrB,OAAO,IAAI,CAAChB,IAAI,CAACgC,QAAQ,CAAC/B,WAAW,CAACgC,WAAW,EAAE;EACrD;EAEAC,8BAA8BA,CAAA;IAC5B,OAAO,IAAI,CAAClC,IAAI,CAACgC,QAAQ,CAAC3B,kBAAkB,CAAC4B,WAAW,EAAE;EAC5D;EAEAlB,kBAAkBA,CAAA;IAChB,IAAId,WAAW,GAAG,IAAI,CAACe,uBAAuB,EAAE;IAChD,IAAIX,kBAAkB,GAAG,IAAI,CAAC6B,8BAA8B,EAAE;IAC9D,IAAIjC,WAAW,IAAII,kBAAkB,EAAE;MACrC,IAAI,CAACZ,WAAW,GAAG,+CAA+C;MAClE,OAAO,IAAI;;IAGb,OAAO,IAAI,CAAC0C,oBAAoB,CAAC,IAAI,CAACnC,IAAI,CAACgC,QAAQ,CAAC/B,WAAW,CAAC,IAC9D,IAAI,CAACkC,oBAAoB,CAAC,IAAI,CAACnC,IAAI,CAACgC,QAAQ,CAAC3B,kBAAkB,CAAC;EACpE;EAEA8B,oBAAoBA,CAACC,WAAwB;IAC3C,OAAOA,WAAW,CAACC,MAAM,IAAI,IAAI;EACnC;EAEAP,uBAAuBA,CAAA;IACrB,IAAI,CAAChC,MAAM,CAACwC,QAAQ,CAAC,CAAC,yBAAyB,CAAC,CAAC;EACnD;;AApHW5C,wBAAwB,C;mBAAxBA,wBAAwB,EAAAL,EAAA,CAAAkD,iBAAA,CAAAC,EAAA,CAAAC,cAAA,GAAApD,EAAA,CAAAkD,iBAAA,CAAAG,EAAA,CAAAC,WAAA,GAAAtD,EAAA,CAAAkD,iBAAA,CAAAC,EAAA,CAAAI,MAAA;AAAA;AAAxBlD,wBAAwB,C;QAAxBA,wBAAwB;EAAAmD,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,kCAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCXrC9D,EAAA,CAAAgE,cAAA,cAA+C;MAAtBhE,EAAA,CAAAiE,UAAA,sBAAAC,2DAAA;QAAA,OAAYH,GAAA,CAAAzC,MAAA,EAAQ;MAAA,EAAC;MAC5CtB,EAAA,CAAAmE,UAAA,IAAAC,uDAAA,iCAGuB;MAEvBpE,EAAA,CAAAC,SAAA,iCAI2B;MAU3BD,EAAA,CAAAgE,cAAA,aAEC;MAIEhE,EAAA,CAAAqE,MAAA,uDAAQ;MAAArE,EAAA,CAAAsE,YAAA,EAAS;;;MA1BhBtE,EAAA,CAAAE,UAAA,cAAA6D,GAAA,CAAApD,IAAA,CAAkB;MAEnBX,EAAA,CAAAuE,SAAA,GAAwB;MAAxBvE,EAAA,CAAAE,UAAA,SAAA6D,GAAA,CAAA1C,gBAAA,GAAwB;MAMzBrB,EAAA,CAAAuE,SAAA,GAAyC;MAAzCvE,EAAA,CAAAE,UAAA,gBAAA6D,GAAA,CAAApD,IAAA,CAAAgC,QAAA,CAAA/B,WAAA,CAAyC,cAAAmD,GAAA,CAAArD,aAAA;MAMzCV,EAAA,CAAAuE,SAAA,GAAgD;MAAhDvE,EAAA,CAAAE,UAAA,gBAAA6D,GAAA,CAAApD,IAAA,CAAAgC,QAAA,CAAA3B,kBAAA,CAAgD,cAAA+C,GAAA,CAAArD,aAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}