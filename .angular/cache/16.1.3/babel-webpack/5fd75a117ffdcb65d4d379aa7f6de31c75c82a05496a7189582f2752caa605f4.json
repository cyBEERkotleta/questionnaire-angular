{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class UrlService {\n  constructor(router) {\n    this.router = router;\n  }\n  saveCurrentPage() {\n    let currentPage = this.getCurrentUrl();\n    let prevPage = this.getCurrentPage();\n    if (prevPage != currentPage) {\n      sessionStorage.setItem(this.LAST_PAGE_KEY, prevPage);\n      sessionStorage.setItem(this.CURRENT_PAGE_KEY, currentPage);\n    }\n    console.log('prev page: ' + prevPage);\n    console.log('current page: ' + currentPage);\n    console.log('last page: ' + this.getLastPage());\n  }\n  getCurrentPage() {\n    return sessionStorage.getItem(this.CURRENT_PAGE_KEY);\n  }\n  getLastPage() {\n    return sessionStorage.getItem(this.LAST_PAGE_KEY);\n  }\n  getCurrentUrl() {\n    const urlTree = this.router.createUrlTree([], {\n      queryParamsHandling: 'merge',\n      preserveFragment: true\n    });\n    return this.router.serializeUrl(urlTree);\n  }\n}\nUrlService.ɵfac = function UrlService_Factory(t) {\n  return new (t || UrlService)(i0.ɵɵinject(i1.Router));\n};\nUrlService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UrlService,\n  factory: UrlService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["UrlService","constructor","router","saveCurrentPage","currentPage","getCurrentUrl","prevPage","getCurrentPage","sessionStorage","setItem","LAST_PAGE_KEY","CURRENT_PAGE_KEY","console","log","getLastPage","getItem","urlTree","createUrlTree","queryParamsHandling","preserveFragment","serializeUrl","i0","ɵɵinject","i1","Router","factory","ɵfac","providedIn"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\service\\url.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {Router} from \"@angular/router\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UrlService {\n  private router: Router;\n\n  constructor(router: Router) {\n    this.router = router;\n  }\n\n  saveCurrentPage() {\n    let currentPage = this.getCurrentUrl();\n\n    let prevPage = this.getCurrentPage();\n    if (prevPage != currentPage) {\n      sessionStorage.setItem(this.LAST_PAGE_KEY, prevPage);\n      sessionStorage.setItem(this.CURRENT_PAGE_KEY, currentPage);\n    }\n\n    console.log('prev page: ' + prevPage);\n    console.log('current page: ' + currentPage);\n    console.log('last page: ' + this.getLastPage());\n  }\n\n  getCurrentPage() {\n    return sessionStorage.getItem(this.CURRENT_PAGE_KEY);\n  }\n\n  getLastPage() {\n    return sessionStorage.getItem(this.LAST_PAGE_KEY);\n  }\n\n  private getCurrentUrl(): string {\n    const urlTree = this.router.createUrlTree([], {\n      queryParamsHandling: 'merge',\n      preserveFragment: true\n    });\n\n    return this.router.serializeUrl(urlTree);\n  }\n}\n"],"mappings":";;AAMA,OAAM,MAAOA,UAAU;EAGrBC,YAAYC,MAAc;IACxB,IAAI,CAACA,MAAM,GAAGA,MAAM;EACtB;EAEAC,eAAeA,CAAA;IACb,IAAIC,WAAW,GAAG,IAAI,CAACC,aAAa,EAAE;IAEtC,IAAIC,QAAQ,GAAG,IAAI,CAACC,cAAc,EAAE;IACpC,IAAID,QAAQ,IAAIF,WAAW,EAAE;MAC3BI,cAAc,CAACC,OAAO,CAAC,IAAI,CAACC,aAAa,EAAEJ,QAAQ,CAAC;MACpDE,cAAc,CAACC,OAAO,CAAC,IAAI,CAACE,gBAAgB,EAAEP,WAAW,CAAC;;IAG5DQ,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGP,QAAQ,CAAC;IACrCM,OAAO,CAACC,GAAG,CAAC,gBAAgB,GAAGT,WAAW,CAAC;IAC3CQ,OAAO,CAACC,GAAG,CAAC,aAAa,GAAG,IAAI,CAACC,WAAW,EAAE,CAAC;EACjD;EAEAP,cAAcA,CAAA;IACZ,OAAOC,cAAc,CAACO,OAAO,CAAC,IAAI,CAACJ,gBAAgB,CAAC;EACtD;EAEAG,WAAWA,CAAA;IACT,OAAON,cAAc,CAACO,OAAO,CAAC,IAAI,CAACL,aAAa,CAAC;EACnD;EAEQL,aAAaA,CAAA;IACnB,MAAMW,OAAO,GAAG,IAAI,CAACd,MAAM,CAACe,aAAa,CAAC,EAAE,EAAE;MAC5CC,mBAAmB,EAAE,OAAO;MAC5BC,gBAAgB,EAAE;KACnB,CAAC;IAEF,OAAO,IAAI,CAACjB,MAAM,CAACkB,YAAY,CAACJ,OAAO,CAAC;EAC1C;;AApCWhB,UAAU,C;mBAAVA,UAAU,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA;AAAA;AAAVxB,UAAU,C;SAAVA,UAAU;EAAAyB,OAAA,EAAVzB,UAAU,CAAA0B,IAAA;EAAAC,UAAA,EAFT;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}