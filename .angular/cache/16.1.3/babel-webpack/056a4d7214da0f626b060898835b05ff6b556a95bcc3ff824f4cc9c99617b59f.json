{"ast":null,"code":"import { MessagingService } from \"./messaging-service.service\";\nimport { map } from \"rxjs\";\nimport StompJS from \"@stomp/stompjs\";\nimport * as i0 from \"@angular/core\";\nexport class WebSocketService {\n  constructor() {\n    /*private path = 'ws://localhost:8080/ws';\n           stompClient = new Client({\n      brokerURL: this.path,\n      debug: (str) => {\n        console.log(str);\n      },\n    });\n           subscribe(formId: bigint, callback: any): StompSubscription {\n        this.stompClient.activate();\n      return this.subscribeToForm(formId, callback);\n    }\n           private subscribeToForm(formId: bigint, callback: any): StompSubscription {\n      return this.stompClient.subscribe(this.getDestination(formId), (message) => {\n        console.log('Received message:', JSON.stringify(message.body));\n      });\n    }*/\n    this.path = 'ws://localhost:8080/ws';\n    this.stompClient = new StompJS.Client({\n      brokerURL: 'ws://localhost:8080/ws'\n    });\n    this.stompClient.activate();\n  }\n  subscribeToFormUpdates(formId) {\n    this.messagingService = new MessagingService(this.path, this.getDestination(formId));\n    return this.messagingService.stream().pipe(map(message => {\n      return JSON.parse(message.toString());\n    }));\n  }\n  getDestination(formId) {\n    return '/user/answered_forms_queue/' + formId;\n  }\n  setEvents() {\n    this.stompClient.onConnect = frame => {\n      console.log('Connected: ' + frame);\n      this.stompClient.subscribe('/topic/greetings', greeting => {\n        console.log(JSON.parse(greeting.body).content);\n      });\n    };\n    this.stompClient.onWebSocketError = error => {\n      console.error('Error with websocket', error);\n    };\n    this.stompClient.onStompError = frame => {\n      console.error('Broker reported error: ' + frame.headers['message']);\n      console.error('Additional details: ' + frame.body);\n    };\n  }\n}\nWebSocketService.ɵfac = function WebSocketService_Factory(t) {\n  return new (t || WebSocketService)();\n};\nWebSocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WebSocketService,\n  factory: WebSocketService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["MessagingService","map","StompJS","WebSocketService","constructor","path","stompClient","Client","brokerURL","activate","subscribeToFormUpdates","formId","messagingService","getDestination","stream","pipe","message","JSON","parse","toString","setEvents","onConnect","frame","console","log","subscribe","greeting","body","content","onWebSocketError","error","onStompError","headers","factory","ɵfac","providedIn"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\service\\web-socket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {MessagingService} from \"./messaging-service.service\";\nimport {map, Observable} from \"rxjs\";\nimport {AnsweredForm} from \"../entity/AnsweredForm\";\nimport { StompService, StompConfig, StompState } from \"@stomp/ng2-stompjs\";\nimport StompJS, {Client} from \"@stomp/stompjs\"\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WebSocketService {\n  /*private path = 'ws://localhost:8080/ws';\n\n  stompClient = new Client({\n    brokerURL: this.path,\n    debug: (str) => {\n      console.log(str);\n    },\n  });\n\n  subscribe(formId: bigint, callback: any): StompSubscription {\n      this.stompClient.activate();\n    return this.subscribeToForm(formId, callback);\n  }\n\n  private subscribeToForm(formId: bigint, callback: any): StompSubscription {\n    return this.stompClient.subscribe(this.getDestination(formId), (message) => {\n      console.log('Received message:', JSON.stringify(message.body));\n    });\n  }*/\n\n  private path = 'ws://localhost:8080/ws';\n\n  private messagingService;\n\n  constructor() {\n\n    this.stompClient.activate();\n  }\n\n  subscribeToFormUpdates(formId: bigint): Observable<AnsweredForm[]> {\n    this.messagingService = new MessagingService(this.path, this.getDestination(formId));\n    return this.messagingService.stream()\n      .pipe(\n      map(\n        message => {\n          return JSON.parse(message.toString()) as AnsweredForm[];\n        }\n      )\n    );\n  }\n\n  private getDestination(formId: bigint): string {\n    return '/user/answered_forms_queue/' + formId;\n  }\n\n  private stompClient = new StompJS.Client({\n    brokerURL: 'ws://localhost:8080/ws'\n  });\n\n  private setEvents() {\n    this.stompClient.onConnect = (frame) => {\n      console.log('Connected: ' + frame);\n      this.stompClient.subscribe('/topic/greetings', (greeting) => {\n        console.log(JSON.parse(greeting.body).content);\n      });\n    };\n\n    this.stompClient.onWebSocketError = (error) => {\n      console.error('Error with websocket', error);\n    };\n\n    this.stompClient.onStompError = (frame) => {\n      console.error('Broker reported error: ' + frame.headers['message']);\n      console.error('Additional details: ' + frame.body);\n    };\n\n  }\n}\n"],"mappings":"AACA,SAAQA,gBAAgB,QAAO,6BAA6B;AAC5D,SAAQC,GAAG,QAAmB,MAAM;AAGpC,OAAOC,OAAiB,MAAM,gBAAgB;;AAK9C,OAAM,MAAOC,gBAAgB;EAyB3BC,YAAA;IAxBA;;;;;;;;;;;;;;;;IAoBQ,KAAAC,IAAI,GAAG,wBAAwB;IAyB/B,KAAAC,WAAW,GAAG,IAAIJ,OAAO,CAACK,MAAM,CAAC;MACvCC,SAAS,EAAE;KACZ,CAAC;IArBA,IAAI,CAACF,WAAW,CAACG,QAAQ,EAAE;EAC7B;EAEAC,sBAAsBA,CAACC,MAAc;IACnC,IAAI,CAACC,gBAAgB,GAAG,IAAIZ,gBAAgB,CAAC,IAAI,CAACK,IAAI,EAAE,IAAI,CAACQ,cAAc,CAACF,MAAM,CAAC,CAAC;IACpF,OAAO,IAAI,CAACC,gBAAgB,CAACE,MAAM,EAAE,CAClCC,IAAI,CACLd,GAAG,CACDe,OAAO,IAAG;MACR,OAAOC,IAAI,CAACC,KAAK,CAACF,OAAO,CAACG,QAAQ,EAAE,CAAmB;IACzD,CAAC,CACF,CACF;EACH;EAEQN,cAAcA,CAACF,MAAc;IACnC,OAAO,6BAA6B,GAAGA,MAAM;EAC/C;EAMQS,SAASA,CAAA;IACf,IAAI,CAACd,WAAW,CAACe,SAAS,GAAIC,KAAK,IAAI;MACrCC,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGF,KAAK,CAAC;MAClC,IAAI,CAAChB,WAAW,CAACmB,SAAS,CAAC,kBAAkB,EAAGC,QAAQ,IAAI;QAC1DH,OAAO,CAACC,GAAG,CAACP,IAAI,CAACC,KAAK,CAACQ,QAAQ,CAACC,IAAI,CAAC,CAACC,OAAO,CAAC;MAChD,CAAC,CAAC;IACJ,CAAC;IAED,IAAI,CAACtB,WAAW,CAACuB,gBAAgB,GAAIC,KAAK,IAAI;MAC5CP,OAAO,CAACO,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C,CAAC;IAED,IAAI,CAACxB,WAAW,CAACyB,YAAY,GAAIT,KAAK,IAAI;MACxCC,OAAO,CAACO,KAAK,CAAC,yBAAyB,GAAGR,KAAK,CAACU,OAAO,CAAC,SAAS,CAAC,CAAC;MACnET,OAAO,CAACO,KAAK,CAAC,sBAAsB,GAAGR,KAAK,CAACK,IAAI,CAAC;IACpD,CAAC;EAEH;;AAnEWxB,gBAAgB,C;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB,C;SAAhBA,gBAAgB;EAAA8B,OAAA,EAAhB9B,gBAAgB,CAAA+B,IAAA;EAAAC,UAAA,EAFf;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}