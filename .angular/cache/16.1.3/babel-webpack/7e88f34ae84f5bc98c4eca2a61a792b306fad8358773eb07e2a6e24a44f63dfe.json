{"ast":null,"code":"import { catchError, map, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./error.service\";\nimport * as i3 from \"./session.service\";\nexport class FieldService {\n  constructor(http, errorService, sessionService) {\n    this.http = http;\n    this.errorService = errorService;\n    this.sessionService = sessionService;\n  }\n  isFieldPresent(field) {\n    return !!field && !!field.id && !!field.type && !!field.active && !!field.required && !!field.label && !!field.form;\n  }\n  getFieldById(id) {\n    let token = this.sessionService.getToken();\n    let path = 'http://localhost:8080/fields/' + id;\n    return this.http.post(path, token).pipe(catchError(this.errorHandler.bind(this)), map(field => {\n      field.type.shownName = field.type.name;\n      field.options = field.options.map(option => {\n        option.shownName = option.text;\n        return option;\n      });\n      return field;\n    }));\n  }\n  getFieldsByFormId(formId) {\n    let token = this.sessionService.getToken();\n    let path = 'http://localhost:8080/fields/form_' + formId;\n    return this.http.post(path, token).pipe(catchError(this.errorHandler.bind(this)), map(fields => {\n      return fields.map(field => {\n        field.type.shownName = field.type.name;\n        field.options = field.options.map(option => {\n          option.shownName = option.text;\n          return option;\n        });\n        return field;\n      });\n    }));\n  }\n  getActiveFieldsByFormId(formId) {\n    let token = this.sessionService.getToken();\n    let path = 'http://localhost:8080/fields_active/form_' + formId;\n    return this.http.post(path, token).pipe(catchError(this.errorHandler.bind(this)), map(fields => {\n      return fields.map(field => {\n        field.type.shownName = field.type.name;\n        field.options = field.options.map(option => {\n          option.shownName = option.text;\n          return option;\n        });\n        return field;\n      });\n    }));\n  }\n  getFieldCountsOfUserForms(userId) {\n    let path = 'http://localhost:8080/field_counts/user_' + userId;\n    return this.http.get(path).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  getFieldCountsOfTopicForms(topicId) {\n    let path = 'http://localhost:8080/field_counts/topic_' + topicId;\n    return this.http.get(path).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  saveField(field) {\n    let token = this.sessionService.getToken();\n    let tokenWithField = {\n      token: token,\n      field: field\n    };\n    return this.http.post('http://localhost:8080/save_field', tokenWithField).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  deleteField(field) {\n    let token = this.sessionService.getToken();\n    let tokenWithField = {\n      token: token,\n      field: field\n    };\n    return this.http.post('http://localhost:8080/delete_field', tokenWithField).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  errorHandler(error) {\n    this.errorService.handle(error.message);\n    return throwError(() => error.message);\n  }\n}\nFieldService.ɵfac = function FieldService_Factory(t) {\n  return new (t || FieldService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ErrorService), i0.ɵɵinject(i3.SessionService));\n};\nFieldService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FieldService,\n  factory: FieldService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","map","throwError","FieldService","constructor","http","errorService","sessionService","isFieldPresent","field","id","type","active","required","label","form","getFieldById","token","getToken","path","post","pipe","errorHandler","bind","shownName","name","options","option","text","getFieldsByFormId","formId","fields","getActiveFieldsByFormId","getFieldCountsOfUserForms","userId","get","getFieldCountsOfTopicForms","topicId","saveField","tokenWithField","deleteField","error","handle","message","i0","ɵɵinject","i1","HttpClient","i2","ErrorService","i3","SessionService","factory","ɵfac","providedIn"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\service\\field.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {HttpClient, HttpErrorResponse} from \"@angular/common/http\";\r\nimport {ErrorService} from \"./error.service\";\r\nimport {SessionService} from \"./session.service\";\r\nimport {catchError, map, Observable, throwError} from \"rxjs\";\r\nimport {RequestResult} from \"../additional/RequestResult\";\r\nimport {Field} from \"../entity/Field\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FieldService {\r\n  private http: HttpClient;\r\n  private errorService: ErrorService;\r\n  private sessionService: SessionService;\r\n\r\n  constructor(http: HttpClient,\r\n              errorService: ErrorService,\r\n              sessionService: SessionService) {\r\n    this.http = http;\r\n    this.errorService = errorService;\r\n    this.sessionService = sessionService;\r\n  }\r\n\r\n  isFieldPresent(field: Field): boolean {\r\n    return !!field && !!field.id && !!field.type && !!field.active &&\r\n      !!field.required && !!field.label && !!field.form;\r\n  }\r\n\r\n  getFieldById(id: bigint): Observable<Field> {\r\n    let token = this.sessionService.getToken();\r\n    let path = 'http://localhost:8080/fields/' + id;\r\n    return this.http.post<Field>(path, token)\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this)),\r\n        map(field => {\r\n          field.type.shownName = field.type.name;\r\n          field.options = field.options.map(option => {\r\n            option.shownName = option.text;\r\n            return option;\r\n          });\r\n          return field;\r\n        })\r\n      );\r\n  }\r\n\r\n  getFieldsByFormId(formId: bigint) : Observable<Field[]> {\r\n    let token = this.sessionService.getToken();\r\n    let path = 'http://localhost:8080/fields/form_' + formId;\r\n    return this.http.post<Field[]>(path, token)\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this)),\r\n        map(fields => {\r\n          return fields.map(field => {\r\n            field.type.shownName = field.type.name;\r\n            field.options = field.options.map(option => {\r\n              option.shownName = option.text;\r\n              return option;\r\n            });\r\n            return field;\r\n          });\r\n        })\r\n      );\r\n  }\r\n\r\n  getActiveFieldsByFormId(formId: bigint) : Observable<Field[]> {\r\n    let token = this.sessionService.getToken();\r\n    let path = 'http://localhost:8080/fields_active/form_' + formId;\r\n    return this.http.post<Field[]>(path, token)\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this)),\r\n        map(fields => {\r\n          return fields.map(field => {\r\n            field.type.shownName = field.type.name;\r\n            field.options = field.options.map(option => {\r\n              option.shownName = option.text;\r\n              return option;\r\n            });\r\n            return field;\r\n          });\r\n        })\r\n      );\r\n  }\r\n\r\n  getFieldCountsOfUserForms(userId: bigint): Observable<number[]> {\r\n    let path = 'http://localhost:8080/field_counts/user_' + userId;\r\n    return this.http.get<number[]>(path)\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this))\r\n      );\r\n  }\r\n\r\n  getFieldCountsOfTopicForms(topicId: bigint): Observable<number[]> {\r\n    let path = 'http://localhost:8080/field_counts/topic_' + topicId;\r\n    return this.http.get<number[]>(path)\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this))\r\n      );\r\n  }\r\n\r\n  saveField(field: Field): Observable<RequestResult> {\r\n    let token = this.sessionService.getToken();\r\n    let tokenWithField = {token: token, field: field};\r\n    return this.http.post<RequestResult>('http://localhost:8080/save_field', tokenWithField)\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this))\r\n      );\r\n  }\r\n\r\n  deleteField(field: Field): Observable<RequestResult> {\r\n    let token = this.sessionService.getToken();\r\n    let tokenWithField = {token: token, field: field};\r\n    return this.http.post<RequestResult>('http://localhost:8080/delete_field', tokenWithField)\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this))\r\n      );\r\n  }\r\n\r\n  private errorHandler(error: HttpErrorResponse) {\r\n    this.errorService.handle(error.message);\r\n    return throwError(() => error.message);\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}