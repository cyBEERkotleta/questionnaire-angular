{"ast":null,"code":"import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { Form } from \"../../entity/Form\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/form.service\";\nimport * as i2 from \"../../service/user.service\";\nimport * as i3 from \"../../service/modal-create-window.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"../../little-components/text-field/text-field.component\";\nimport * as i8 from \"../../little-components/error-paragraph/error-paragraph.component\";\nimport * as i9 from \"../../little-components/middle-control/middle-control.component\";\nimport * as i10 from \"../../little-components/checkbox-single/checkbox-single.component\";\nfunction CreateFormComponent_app_error_paragraph_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-error-paragraph\", 6);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"errorMessage\", ctx_r0.globalError);\n  }\n}\nexport let CreateFormComponent = /*#__PURE__*/(() => {\n  class CreateFormComponent {\n    constructor(formService, userService, modalService, router) {\n      this.showAllErrors = false;\n      this.globalError = '';\n      this.form = new FormGroup({\n        name: new FormControl('', [Validators.minLength(2), Validators.maxLength(150), Validators.required]),\n        shown: new FormControl(true)\n      });\n      this.formService = formService;\n      this.userService = userService;\n      this.modalService = modalService;\n      this.router = router;\n    }\n    ngOnInit() {\n      this.subscriptionUser = this.userService.updateCurrentUser().subscribe(result => {\n        this.user = result;\n      });\n    }\n    ngOnDestroy() {\n      if (this.subscriptionUser) this.subscriptionUser.unsubscribe();\n      if (this.subscriptionSave) this.subscriptionSave.unsubscribe();\n    }\n    getTopicName() {\n      if (!this.topic) return '';\n      return this.topic.name;\n    }\n    isGlobalErrorSet() {\n      return this.globalError != '';\n    }\n    submit() {\n      if (this.anyErrorExists()) return;\n      this.addForm();\n    }\n    anyErrorExists() {\n      this.resetGlobalError();\n      if (this.isAnyErrorInFields()) {\n        this.showAllErrors = true;\n        return true;\n      }\n      return false;\n    }\n    addForm() {\n      let form = this.createFormFromFields();\n      this.subscriptionSave = this.formService.saveForm(form).subscribe(result => {\n        console.log(result);\n        if (result.success) {\n          this.modalService.close();\n          location.reload();\n        } else {\n          this.globalError = result.message;\n        }\n      });\n    }\n    resetGlobalError() {\n      this.globalError = '';\n    }\n    createFormFromFields() {\n      let name = this.getNameFromField();\n      let shown = this.getShownFromField();\n      return new Form(null, name, shown, this.user, this.topic);\n    }\n    getNameFromField() {\n      return this.form.controls.name.getRawValue();\n    }\n    getShownFromField() {\n      return this.form.controls.shown.getRawValue();\n    }\n    isAnyErrorInFields() {\n      return this.doesControlHaveError(this.form.controls.name);\n    }\n    doesControlHaveError(formControl) {\n      return formControl.errors != null;\n    }\n  }\n  CreateFormComponent.ɵfac = function CreateFormComponent_Factory(t) {\n    return new (t || CreateFormComponent)(i0.ɵɵdirectiveInject(i1.FormService), i0.ɵɵdirectiveInject(i2.UserService), i0.ɵɵdirectiveInject(i3.ModalCreateWindowService), i0.ɵɵdirectiveInject(i4.Router));\n  };\n  CreateFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateFormComponent,\n    selectors: [[\"app-create-form\"]],\n    inputs: {\n      topic: \"topic\"\n    },\n    decls: 10,\n    vars: 6,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [3, \"errorMessage\", 4, \"ngIf\"], [1, \"fw-semibold\", \"text-gray-600\", \"text-xl\"], [\"fieldName\", \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435\", 3, \"formElement\", \"showError\"], [\"fieldName\", \"\\u041E\\u0442\\u043E\\u0431\\u0440\\u0430\\u0436\\u0430\\u0442\\u044C \\u0444\\u043E\\u0440\\u043C\\u0443 \\u0432 \\u043A\\u0430\\u0442\\u0430\\u043B\\u043E\\u0433\\u0435\", 3, \"formElement\"], [\"type\", \"submit\", 1, \"button-red-rounded\"], [3, \"errorMessage\"]],\n    template: function CreateFormComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function CreateFormComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.submit();\n        });\n        i0.ɵɵtemplate(1, CreateFormComponent_app_error_paragraph_1_Template, 1, 1, \"app-error-paragraph\", 1);\n        i0.ɵɵelementStart(2, \"span\", 2);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(4, \"app-text-field\", 3)(5, \"app-checkbox-single\", 4)(6, \"br\");\n        i0.ɵɵelementStart(7, \"app-middle-control\")(8, \"button\", 5);\n        i0.ɵɵtext(9, \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u0444\\u043E\\u0440\\u043C\\u0443\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isGlobalErrorSet());\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \\u0422\\u0435\\u043C\\u0430: \", ctx.getTopicName(), \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formElement\", ctx.form.controls.name)(\"showError\", ctx.showAllErrors);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formElement\", ctx.form.controls.shown);\n      }\n    },\n    dependencies: [i5.NgIf, i6.ɵNgNoValidate, i6.NgControlStatusGroup, i6.FormGroupDirective, i7.TextFieldComponent, i8.ErrorParagraphComponent, i9.MiddleControlComponent, i10.CheckboxSingleComponent]\n  });\n  return CreateFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}