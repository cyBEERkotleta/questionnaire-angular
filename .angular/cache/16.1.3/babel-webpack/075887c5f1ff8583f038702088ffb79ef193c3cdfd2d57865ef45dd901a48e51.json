{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { FieldOption } from \"../../entity/FieldOption\";\nimport { FormArray, FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nfunction OptionListComponent_div_0_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵelement(1, \"input\", 6);\n    i0.ɵɵelementStart(2, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function OptionListComponent_div_0_div_3_Template_button_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const i_r3 = restoredCtx.index;\n      const ctx_r4 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r4.removeFieldOption(i_r3));\n    });\n    i0.ɵɵtext(3, \"Remove\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const i_r3 = ctx.index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"placeholder\", \"\\u0412\\u0430\\u0440\\u0438\\u0430\\u043D\\u0442 \", i_r3 + 1, \"\");\n  }\n}\nfunction OptionListComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 1)(2, \"form\", 2);\n    i0.ɵɵtemplate(3, OptionListComponent_div_0_div_3_Template, 4, 1, \"div\", 3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function OptionListComponent_div_0_Template_button_click_4_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.addFieldOption());\n    });\n    i0.ɵɵtext(5, \"Add Option\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.fieldOptionsForm);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.getOptionsFormArray().controls);\n  }\n}\nexport class OptionListComponent {\n  constructor(formBuilder) {\n    this.fieldOptions = [];\n    this.visible = false;\n    this.fieldOptionsChange = new EventEmitter();\n    /*this.fieldOptionsForm = new FormGroup({\n      options: new FormArray([])\n    });*/\n    this.formBuilder = formBuilder;\n    this.fieldOptionsForm = new FormGroup({\n      options: new FormArray([new FormGroup({\n        text: new FormControl('', [Validators.required, Validators.maxLength(200)])\n      })])\n    });\n    /*this.fieldOptionsForm = this.formBuilder.group({\n      options: this.formBuilder.array([])\n    });*/\n  }\n\n  ngOnInit() {\n    this.populateFieldOptionsForm();\n  }\n  getOptionsFormArray() {\n    return this.fieldOptionsForm.get('options');\n  }\n  populateFieldOptionsForm() {\n    const optionsArray = this.getOptionsFormArray();\n    optionsArray.clear();\n    if (!this.fieldOptions) return;\n    /*this.fieldOptions.forEach(option => {\n      optionsArray.push(new FormControl(option.text));\n    });*/\n    /*this.fieldOptions.forEach(option => {\n      optionsArray.push(\n        this.formBuilder.group({\n          text: option.text\n        })\n      );\n    });*/\n    this.fieldOptions.forEach(option => {\n      const optionFormGroup = new FormGroup({\n        text: new FormControl(option.text)\n      });\n      optionsArray.push(optionFormGroup);\n    });\n  }\n  addFieldOption() {\n    const optionsArray = this.getOptionsFormArray();\n    optionsArray.push(new FormGroup({\n      text: new FormControl('', [Validators.required, Validators.maxLength(200)])\n    }));\n    this.fieldOptions.push(new FieldOption(null, ''));\n    this.updateTextInFieldOptions();\n  }\n  removeFieldOption(indexToRemove) {\n    const optionsArray = this.getOptionsFormArray();\n    optionsArray.removeAt(indexToRemove);\n    this.fieldOptions = this.fieldOptions.filter((_, index) => index != indexToRemove);\n    this.updateTextInFieldOptions();\n  }\n  updateTextInFieldOptions() {\n    const optionsArray = this.getOptionsFormArray();\n    for (let i = 0; i < this.fieldOptions.length; i++) {\n      let text = optionsArray[i].getFormGroup().values.text;\n      this.fieldOptions[i].text = text;\n      this.fieldOptions[i].shownName = text;\n    }\n    this.fieldOptionsChange.emit(this.fieldOptions);\n    console.log('fieldOptions:');\n    this.fieldOptions.forEach(option => console.log(option.text + ', ' + option.id));\n  }\n}\nOptionListComponent.ɵfac = function OptionListComponent_Factory(t) {\n  return new (t || OptionListComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nOptionListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: OptionListComponent,\n  selectors: [[\"app-option-list\"]],\n  inputs: {\n    fieldOptions: \"fieldOptions\",\n    visible: \"visible\"\n  },\n  outputs: {\n    fieldOptionsChange: \"fieldOptionsChange\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[4, \"ngIf\"], [1, \"options-container\"], [3, \"formGroup\"], [\"class\", \"option-row\", \"formGroupName\", \"options\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [\"formGroupName\", \"options\", 1, \"option-row\"], [\"type\", \"text\", \"formControlName\", \"text\", 1, \"form-control\", 3, \"placeholder\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", 3, \"click\"]],\n  template: function OptionListComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, OptionListComponent_div_0_Template, 6, 2, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.visible);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["EventEmitter","FieldOption","FormArray","FormControl","FormGroup","Validators","i0","ɵɵelementStart","ɵɵelement","ɵɵlistener","OptionListComponent_div_0_div_3_Template_button_click_2_listener","restoredCtx","ɵɵrestoreView","_r5","i_r3","index","ctx_r4","ɵɵnextContext","ɵɵresetView","removeFieldOption","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵpropertyInterpolate1","ɵɵtemplate","OptionListComponent_div_0_div_3_Template","OptionListComponent_div_0_Template_button_click_4_listener","_r7","ctx_r6","addFieldOption","ɵɵproperty","ctx_r0","fieldOptionsForm","getOptionsFormArray","controls","OptionListComponent","constructor","formBuilder","fieldOptions","visible","fieldOptionsChange","options","text","required","maxLength","ngOnInit","populateFieldOptionsForm","get","optionsArray","clear","forEach","option","optionFormGroup","push","updateTextInFieldOptions","indexToRemove","removeAt","filter","_","i","length","getFormGroup","values","shownName","emit","console","log","id","ɵɵdirectiveInject","i1","FormBuilder","selectors","inputs","outputs","decls","vars","consts","template","OptionListComponent_Template","rf","ctx","OptionListComponent_div_0_Template"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\components\\option-list\\option-list.component.ts","C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\components\\option-list\\option-list.component.html"],"sourcesContent":["import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {FieldOption} from \"../../entity/FieldOption\";\nimport {FormArray, FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {Form} from \"../../entity/Form\";\n\n@Component({\n  selector: 'app-option-list',\n  templateUrl: './option-list.component.html',\n  styleUrls: ['./option-list.component.css']\n})\nexport class OptionListComponent implements OnInit {\n  @Input() fieldOptions: FieldOption[] = [];\n  @Input() visible: boolean = false;\n\n  @Output() fieldOptionsChange = new EventEmitter<FieldOption[]>();\n\n  fieldOptionsForm: FormGroup;\n\n  private formBuilder: FormBuilder;\n\n  constructor(formBuilder: FormBuilder) {\n    /*this.fieldOptionsForm = new FormGroup({\n      options: new FormArray([])\n    });*/\n    this.formBuilder = formBuilder;\n\n    this.fieldOptionsForm = new FormGroup({\n      options: new FormArray([\n        new FormGroup({\n          text: new FormControl<string>('', [\n            Validators.required,\n            Validators.maxLength(200)\n          ])\n        })\n      ])\n    });\n\n    /*this.fieldOptionsForm = this.formBuilder.group({\n      options: this.formBuilder.array([])\n    });*/\n  }\n\n  ngOnInit() {\n    this.populateFieldOptionsForm();\n  }\n\n  getOptionsFormArray(): FormArray {\n    return this.fieldOptionsForm.get('options') as FormArray;\n  }\n\n  private populateFieldOptionsForm() {\n    const optionsArray = this.getOptionsFormArray();\n    optionsArray.clear();\n\n    if (!this.fieldOptions)\n      return;\n\n    /*this.fieldOptions.forEach(option => {\n      optionsArray.push(new FormControl(option.text));\n    });*/\n    /*this.fieldOptions.forEach(option => {\n      optionsArray.push(\n        this.formBuilder.group({\n          text: option.text\n        })\n      );\n    });*/\n\n    this.fieldOptions.forEach(option => {\n      const optionFormGroup = new FormGroup({\n        text: new FormControl(option.text)\n      });\n      optionsArray.push(optionFormGroup);\n    });\n  }\n\n  addFieldOption() {\n    const optionsArray = this.getOptionsFormArray();\n    optionsArray.push(\n      new FormGroup({\n        text: new FormControl<string>('', [\n          Validators.required,\n          Validators.maxLength(200)\n        ])\n      })\n    );\n\n    this.fieldOptions.push(new FieldOption(null, ''));\n    this.updateTextInFieldOptions();\n  }\n\n  removeFieldOption(indexToRemove: number) {\n    const optionsArray = this.getOptionsFormArray();\n    optionsArray.removeAt(indexToRemove);\n\n    this.fieldOptions = this.fieldOptions.filter((_, index) => index != indexToRemove);\n    this.updateTextInFieldOptions();\n  }\n\n  updateTextInFieldOptions() {\n    const optionsArray = this.getOptionsFormArray();\n\n    for (let i = 0; i < this.fieldOptions.length; i++) {\n      let text = optionsArray[i].getFormGroup().values.text;\n      this.fieldOptions[i].text = text;\n      this.fieldOptions[i].shownName = text;\n    }\n\n    this.fieldOptionsChange.emit(this.fieldOptions);\n\n    console.log('fieldOptions:');\n    this.fieldOptions.forEach(option => console.log(option.text + ', ' + option.id));\n  }\n}\n","<div *ngIf=\"visible\">\n  <div class=\"options-container\">\n    <form [formGroup]=\"fieldOptionsForm\">\n      <div *ngFor=\"let optionCtrl of getOptionsFormArray().controls; let i = index\" class=\"option-row\" formGroupName=\"options\">\n        <input type=\"text\" formControlName=\"text\" class=\"form-control\" placeholder=\"Вариант {{i + 1}}\">\n        <button type=\"button\" class=\"btn btn-danger\" (click)=\"removeFieldOption(i)\">Remove</button>\n      </div>\n    </form>\n  </div>\n  <button type=\"button\" class=\"btn btn-primary\" (click)=\"addFieldOption()\">Add Option</button>\n</div>\n"],"mappings":"AAAA,SAAmBA,YAAY,QAA8B,eAAe;AAC5E,SAAQC,WAAW,QAAO,0BAA0B;AACpD,SAAQC,SAAS,EAAeC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAO,gBAAgB;;;;;;;ICCnFC,EAAA,CAAAC,cAAA,aAAyH;IACvHD,EAAA,CAAAE,SAAA,eAA+F;IAC/FF,EAAA,CAAAC,cAAA,gBAA4E;IAA/BD,EAAA,CAAAG,UAAA,mBAAAC,iEAAA;MAAA,MAAAC,WAAA,GAAAL,EAAA,CAAAM,aAAA,CAAAC,GAAA;MAAA,MAAAC,IAAA,GAAAH,WAAA,CAAAI,KAAA;MAAA,MAAAC,MAAA,GAAAV,EAAA,CAAAW,aAAA;MAAA,OAASX,EAAA,CAAAY,WAAA,CAAAF,MAAA,CAAAG,iBAAA,CAAAL,IAAA,CAAoB;IAAA,EAAC;IAACR,EAAA,CAAAc,MAAA,aAAM;IAAAd,EAAA,CAAAe,YAAA,EAAS;;;;IAD5Bf,EAAA,CAAAgB,SAAA,GAA+B;IAA/BhB,EAAA,CAAAiB,sBAAA,+DAAAT,IAAA,SAA+B;;;;;;IAJtGR,EAAA,CAAAC,cAAA,UAAqB;IAGfD,EAAA,CAAAkB,UAAA,IAAAC,wCAAA,iBAGM;IACRnB,EAAA,CAAAe,YAAA,EAAO;IAETf,EAAA,CAAAC,cAAA,gBAAyE;IAA3BD,EAAA,CAAAG,UAAA,mBAAAiB,2DAAA;MAAApB,EAAA,CAAAM,aAAA,CAAAe,GAAA;MAAA,MAAAC,MAAA,GAAAtB,EAAA,CAAAW,aAAA;MAAA,OAASX,EAAA,CAAAY,WAAA,CAAAU,MAAA,CAAAC,cAAA,EAAgB;IAAA,EAAC;IAACvB,EAAA,CAAAc,MAAA,iBAAU;IAAAd,EAAA,CAAAe,YAAA,EAAS;;;;IAPpFf,EAAA,CAAAgB,SAAA,GAA8B;IAA9BhB,EAAA,CAAAwB,UAAA,cAAAC,MAAA,CAAAC,gBAAA,CAA8B;IACN1B,EAAA,CAAAgB,SAAA,GAAmC;IAAnChB,EAAA,CAAAwB,UAAA,YAAAC,MAAA,CAAAE,mBAAA,GAAAC,QAAA,CAAmC;;;ADOrE,OAAM,MAAOC,mBAAmB;EAU9BC,YAAYC,WAAwB;IAT3B,KAAAC,YAAY,GAAkB,EAAE;IAChC,KAAAC,OAAO,GAAY,KAAK;IAEvB,KAAAC,kBAAkB,GAAG,IAAIxC,YAAY,EAAiB;IAO9D;;;IAGA,IAAI,CAACqC,WAAW,GAAGA,WAAW;IAE9B,IAAI,CAACL,gBAAgB,GAAG,IAAI5B,SAAS,CAAC;MACpCqC,OAAO,EAAE,IAAIvC,SAAS,CAAC,CACrB,IAAIE,SAAS,CAAC;QACZsC,IAAI,EAAE,IAAIvC,WAAW,CAAS,EAAE,EAAE,CAChCE,UAAU,CAACsC,QAAQ,EACnBtC,UAAU,CAACuC,SAAS,CAAC,GAAG,CAAC,CAC1B;OACF,CAAC,CACH;KACF,CAAC;IAEF;;;EAGF;;EAEAC,QAAQA,CAAA;IACN,IAAI,CAACC,wBAAwB,EAAE;EACjC;EAEAb,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAACD,gBAAgB,CAACe,GAAG,CAAC,SAAS,CAAc;EAC1D;EAEQD,wBAAwBA,CAAA;IAC9B,MAAME,YAAY,GAAG,IAAI,CAACf,mBAAmB,EAAE;IAC/Ce,YAAY,CAACC,KAAK,EAAE;IAEpB,IAAI,CAAC,IAAI,CAACX,YAAY,EACpB;IAEF;;;IAGA;;;;;;;IAQA,IAAI,CAACA,YAAY,CAACY,OAAO,CAACC,MAAM,IAAG;MACjC,MAAMC,eAAe,GAAG,IAAIhD,SAAS,CAAC;QACpCsC,IAAI,EAAE,IAAIvC,WAAW,CAACgD,MAAM,CAACT,IAAI;OAClC,CAAC;MACFM,YAAY,CAACK,IAAI,CAACD,eAAe,CAAC;IACpC,CAAC,CAAC;EACJ;EAEAvB,cAAcA,CAAA;IACZ,MAAMmB,YAAY,GAAG,IAAI,CAACf,mBAAmB,EAAE;IAC/Ce,YAAY,CAACK,IAAI,CACf,IAAIjD,SAAS,CAAC;MACZsC,IAAI,EAAE,IAAIvC,WAAW,CAAS,EAAE,EAAE,CAChCE,UAAU,CAACsC,QAAQ,EACnBtC,UAAU,CAACuC,SAAS,CAAC,GAAG,CAAC,CAC1B;KACF,CAAC,CACH;IAED,IAAI,CAACN,YAAY,CAACe,IAAI,CAAC,IAAIpD,WAAW,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IACjD,IAAI,CAACqD,wBAAwB,EAAE;EACjC;EAEAnC,iBAAiBA,CAACoC,aAAqB;IACrC,MAAMP,YAAY,GAAG,IAAI,CAACf,mBAAmB,EAAE;IAC/Ce,YAAY,CAACQ,QAAQ,CAACD,aAAa,CAAC;IAEpC,IAAI,CAACjB,YAAY,GAAG,IAAI,CAACA,YAAY,CAACmB,MAAM,CAAC,CAACC,CAAC,EAAE3C,KAAK,KAAKA,KAAK,IAAIwC,aAAa,CAAC;IAClF,IAAI,CAACD,wBAAwB,EAAE;EACjC;EAEAA,wBAAwBA,CAAA;IACtB,MAAMN,YAAY,GAAG,IAAI,CAACf,mBAAmB,EAAE;IAE/C,KAAK,IAAI0B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACrB,YAAY,CAACsB,MAAM,EAAED,CAAC,EAAE,EAAE;MACjD,IAAIjB,IAAI,GAAGM,YAAY,CAACW,CAAC,CAAC,CAACE,YAAY,EAAE,CAACC,MAAM,CAACpB,IAAI;MACrD,IAAI,CAACJ,YAAY,CAACqB,CAAC,CAAC,CAACjB,IAAI,GAAGA,IAAI;MAChC,IAAI,CAACJ,YAAY,CAACqB,CAAC,CAAC,CAACI,SAAS,GAAGrB,IAAI;;IAGvC,IAAI,CAACF,kBAAkB,CAACwB,IAAI,CAAC,IAAI,CAAC1B,YAAY,CAAC;IAE/C2B,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;IAC5B,IAAI,CAAC5B,YAAY,CAACY,OAAO,CAACC,MAAM,IAAIc,OAAO,CAACC,GAAG,CAACf,MAAM,CAACT,IAAI,GAAG,IAAI,GAAGS,MAAM,CAACgB,EAAE,CAAC,CAAC;EAClF;;AAtGWhC,mBAAmB,C;mBAAnBA,mBAAmB,EAAA7B,EAAA,CAAA8D,iBAAA,CAAAC,EAAA,CAAAC,WAAA;AAAA;AAAnBnC,mBAAmB,C;QAAnBA,mBAAmB;EAAAoC,SAAA;EAAAC,MAAA;IAAAlC,YAAA;IAAAC,OAAA;EAAA;EAAAkC,OAAA;IAAAjC,kBAAA;EAAA;EAAAkC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,6BAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCVhCzE,EAAA,CAAAkB,UAAA,IAAAyD,kCAAA,iBAUM;;;MAVA3E,EAAA,CAAAwB,UAAA,SAAAkD,GAAA,CAAAzC,OAAA,CAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}