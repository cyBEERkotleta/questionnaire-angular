{"ast":null,"code":"import { catchError, map, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./error.service\";\nimport * as i3 from \"./session.service\";\nexport class TopicService {\n  constructor(http, errorService, sessionService) {\n    this.http = http;\n    this.errorService = errorService;\n    this.sessionService = sessionService;\n  }\n  isTopicPresent(topic) {\n    return !!topic && !!topic.id && !!topic.name && !!topic.description && !!topic.forms;\n  }\n  getAll() {\n    return this.http.get('http://localhost:8080/topics').pipe(catchError(this.errorHandler.bind(this)), map(topic => {\n      topic.shownName = topic.name;\n      return topic;\n    }));\n  }\n  getTopicById(id) {\n    let path = 'http://localhost:8080/topics/' + id;\n    return this.http.get(path).pipe(catchError(this.errorHandler.bind(this)), map(topic => {\n      topic.shownName = topic.name;\n      return topic;\n    }));\n  }\n  getTopicsByForms(forms) {\n    return this.http.post('http://localhost:8080/topics_of_forms', forms).pipe(catchError(this.errorHandler.bind(this)), map(topic => {\n      topic.shownName = topic.name;\n      return topic;\n    }));\n  }\n  saveTopic(topic) {\n    let token = this.sessionService.getToken();\n    let tokenWithTopic = {\n      token: token,\n      topic: topic\n    };\n    return this.http.post('http://localhost:8080/save_topic', tokenWithTopic).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  deleteTopic(topic) {\n    let token = this.sessionService.getToken();\n    let tokenWithTopic = {\n      token: token,\n      topic: topic\n    };\n    return this.http.post('http://localhost:8080/delete_topic', tokenWithTopic).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  errorHandler(error) {\n    this.errorService.handle(error.message);\n    return throwError(() => error.message);\n  }\n}\nTopicService.ɵfac = function TopicService_Factory(t) {\n  return new (t || TopicService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ErrorService), i0.ɵɵinject(i3.SessionService));\n};\nTopicService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TopicService,\n  factory: TopicService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","map","throwError","TopicService","constructor","http","errorService","sessionService","isTopicPresent","topic","id","name","description","forms","getAll","get","pipe","errorHandler","bind","shownName","getTopicById","path","getTopicsByForms","post","saveTopic","token","getToken","tokenWithTopic","deleteTopic","error","handle","message","i0","ɵɵinject","i1","HttpClient","i2","ErrorService","i3","SessionService","factory","ɵfac","providedIn"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\service\\topic.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient, HttpErrorResponse} from \"@angular/common/http\";\nimport {ErrorService} from \"./error.service\";\nimport {Topic} from \"../entity/Topic\";\nimport {catchError, map, Observable, throwError} from \"rxjs\";\nimport {RequestResult} from \"../additional/RequestResult\";\nimport {SessionService} from \"./session.service\";\nimport {UserRole} from \"../entity/UserRole\";\nimport {Form} from \"../entity/Form\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TopicService {\n  private http: HttpClient;\n  private errorService: ErrorService;\n  private sessionService: SessionService;\n\n  constructor(http: HttpClient,\n              errorService: ErrorService,\n              sessionService: SessionService) {\n    this.http = http;\n    this.errorService = errorService;\n    this.sessionService = sessionService;\n  }\n\n  isTopicPresent(topic: Topic): boolean {\n    return !!topic && !!topic.id && !!topic.name && !!topic.description && !!topic.forms;\n  }\n\n  getAll() : Observable<Topic[]> {\n    return this.http.get<Topic[]>('http://localhost:8080/topics')\n      .pipe(\n        catchError(this.errorHandler.bind(this)),\n        map(topic => {\n          topic.shownName = topic.name;\n          return topic;\n        })\n      );\n  }\n\n  getTopicById(id: bigint): Observable<Topic> {\n    let path = 'http://localhost:8080/topics/' + id;\n    return this.http.get<Topic>(path)\n      .pipe(\n        catchError(this.errorHandler.bind(this)),\n        map(topic => {\n          topic.shownName = topic.name;\n          return topic;\n        })\n      );\n  }\n\n  getTopicsByForms(forms: Form[]): Observable<Topic[]> {\n    return this.http.post<Topic[]>('http://localhost:8080/topics_of_forms', forms)\n      .pipe(\n        catchError(this.errorHandler.bind(this)),\n        map(topic => {\n          topic.shownName = topic.name;\n          return topic;\n        })\n      );\n  }\n\n  saveTopic(topic: Topic): Observable<RequestResult> {\n    let token = this.sessionService.getToken();\n    let tokenWithTopic = {token: token, topic: topic};\n    return this.http.post<RequestResult>('http://localhost:8080/save_topic', tokenWithTopic)\n      .pipe(\n        catchError(this.errorHandler.bind(this))\n      );\n  }\n\n  deleteTopic(topic: Topic): Observable<RequestResult> {\n    let token = this.sessionService.getToken();\n    let tokenWithTopic = {token: token, topic: topic};\n    return this.http.post<RequestResult>('http://localhost:8080/delete_topic', tokenWithTopic)\n      .pipe(\n        catchError(this.errorHandler.bind(this))\n      );\n  }\n\n  private errorHandler(error: HttpErrorResponse) {\n    this.errorService.handle(error.message);\n    return throwError(() => error.message);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}