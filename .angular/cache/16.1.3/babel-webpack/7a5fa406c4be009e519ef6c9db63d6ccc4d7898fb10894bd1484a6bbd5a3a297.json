{"ast":null,"code":"import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/users.service\";\nimport * as i2 from \"@angular/router\";\nexport class ChangePasswordComponent {\n  constructor(userService, router) {\n    this.showAllErrors = false;\n    this.globalError = '';\n    this.successfulLogin = false;\n    this.form = new FormGroup({\n      email: new FormControl('', [Validators.email, Validators.required]),\n      password: new FormControl('', [Validators.required])\n    });\n    this.userService = userService;\n    this.router = router;\n  }\n  ngOnInit() {}\n  isGlobalErrorSet() {\n    return this.globalError != '';\n  }\n  submit() {\n    if (this.anyErrorExists()) return;\n    this.loginUser();\n  }\n  anyErrorExists() {\n    this.resetGlobalError();\n    if (this.isAnyErrorInFields()) {\n      this.showAllErrors = true;\n      return true;\n    }\n    return false;\n  }\n  loginUser() {\n    let email = this.getEmailFromField();\n    let password = this.getPasswordFromField();\n    this.userService.login(email, password).subscribe(result => {\n      console.log(result);\n      if (result.success) {\n        this.successfulLogin = true;\n        this.navigateToMainPage();\n      } else {\n        this.globalError = result.message;\n        this.successfulLogin = false;\n      }\n    });\n  }\n  navigateToMainPage() {\n    this.router.navigate(['/']);\n  }\n  resetGlobalError() {\n    this.globalError = '';\n  }\n  getEmailFromField() {\n    return this.form.controls.email.getRawValue();\n  }\n  getPasswordFromField() {\n    return this.form.controls.password.getRawValue();\n  }\n  isAnyErrorInFields() {\n    return this.doesControlHaveError(this.form.controls.email) || this.doesControlHaveError(this.form.controls.password);\n  }\n  doesControlHaveError(formControl) {\n    return formControl.errors != null;\n  }\n}\nChangePasswordComponent.ɵfac = function ChangePasswordComponent_Factory(t) {\n  return new (t || ChangePasswordComponent)(i0.ɵɵdirectiveInject(i1.UserService), i0.ɵɵdirectiveInject(i2.Router));\n};\nChangePasswordComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ChangePasswordComponent,\n  selectors: [[\"app-change-password\"]],\n  decls: 2,\n  vars: 0,\n  template: function ChangePasswordComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"change-password works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["FormControl","FormGroup","Validators","ChangePasswordComponent","constructor","userService","router","showAllErrors","globalError","successfulLogin","form","email","required","password","ngOnInit","isGlobalErrorSet","submit","anyErrorExists","loginUser","resetGlobalError","isAnyErrorInFields","getEmailFromField","getPasswordFromField","login","subscribe","result","console","log","success","navigateToMainPage","message","navigate","controls","getRawValue","doesControlHaveError","formControl","errors","i0","ɵɵdirectiveInject","i1","UserService","i2","Router","selectors","decls","vars","template","ChangePasswordComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\components\\change-password\\change-password.component.ts","C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\components\\change-password\\change-password.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport {UserService} from \"../../service/users.service\";\nimport {Router} from \"@angular/router\";\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\n\n@Component({\n  selector: 'app-change-password',\n  templateUrl: './change-password.component.html',\n  styleUrls: ['./change-password.component.css']\n})\nexport class ChangePasswordComponent {\n  private userService: UserService;\n  private router: Router;\n\n  showAllErrors = false;\n  globalError: string = '';\n  private successfulLogin = false;\n\n  form = new FormGroup({\n    email: new FormControl<string>('', [\n      Validators.email,\n      Validators.required\n    ]),\n    password: new FormControl<string>('', [\n      Validators.required\n    ])\n  })\n\n  constructor(userService: UserService,\n              router: Router) {\n    this.userService = userService;\n    this.router = router;\n  }\n\n  ngOnInit() {\n  }\n\n  isGlobalErrorSet(): boolean {\n    return this.globalError != '';\n  }\n\n  submit() {\n    if (this.anyErrorExists())\n      return;\n\n    this.loginUser();\n  }\n\n  private anyErrorExists(): boolean {\n    this.resetGlobalError();\n\n    if (this.isAnyErrorInFields()) {\n      this.showAllErrors = true;\n      return true;\n    }\n    return false;\n  }\n\n  private loginUser() {\n    let email = this.getEmailFromField();\n    let password = this.getPasswordFromField();\n\n    this.userService.login(email, password)\n      .subscribe(result => {\n        console.log(result);\n        if (result.success) {\n          this.successfulLogin = true;\n          this.navigateToMainPage();\n        }\n        else {\n          this.globalError = result.message;\n          this.successfulLogin = false;\n        }\n      });\n  }\n\n  private navigateToMainPage() {\n    this.router.navigate(['/']);\n  }\n\n  resetGlobalError() {\n    this.globalError = '';\n  }\n\n  getEmailFromField(): string {\n    return this.form.controls.email.getRawValue();\n  }\n\n  getPasswordFromField(): string {\n    return this.form.controls.password.getRawValue();\n  }\n\n  isAnyErrorInFields(): boolean {\n    return this.doesControlHaveError(this.form.controls.email) ||\n      this.doesControlHaveError(this.form.controls.password);\n  }\n\n  doesControlHaveError(formControl: FormControl): boolean {\n    return formControl.errors != null;\n  }\n}\n","<p>change-password works!</p>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}