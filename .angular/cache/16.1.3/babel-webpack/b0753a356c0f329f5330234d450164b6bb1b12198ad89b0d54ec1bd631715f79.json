{"ast":null,"code":"import { catchError, tap, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./error.service\";\nexport class TopicService {\n  constructor(http, errorService) {\n    this.http = http;\n    this.errorService = errorService;\n  }\n  getAll() {\n    return this.http.get('http://localhost:8080/topics').pipe(catchError(this.errorHandler.bind(this)), tap(topics => this.topics = topics));\n  }\n  addTopic(topic) {\n    const userWithPassword = {\n      user: user,\n      password: password\n    };\n    return this.http.post('http://localhost:8080/register', userWithPassword).pipe(catchError(this.errorHandler.bind(this)), tap(result => this.getAll().subscribe()));\n  }\n  errorHandler(error) {\n    this.errorService.handle(error.message);\n    return throwError(() => error.message);\n  }\n}\nTopicService.ɵfac = function TopicService_Factory(t) {\n  return new (t || TopicService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ErrorService));\n};\nTopicService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TopicService,\n  factory: TopicService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","tap","throwError","TopicService","constructor","http","errorService","getAll","get","pipe","errorHandler","bind","topics","addTopic","topic","userWithPassword","user","password","post","result","subscribe","error","handle","message","i0","ɵɵinject","i1","HttpClient","i2","ErrorService","factory","ɵfac","providedIn"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\service\\topic.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient, HttpErrorResponse} from \"@angular/common/http\";\nimport {ErrorService} from \"./error.service\";\nimport {Topic} from \"../entity/Topic\";\nimport {catchError, Observable, tap, throwError} from \"rxjs\";\nimport {User} from \"../entity/User\";\nimport {RequestResult} from \"../additional/RequestResult\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TopicService {\n  private http: HttpClient;\n  private errorService: ErrorService;\n\n  topics: Topic[];\n\n  constructor(http: HttpClient, errorService: ErrorService) {\n    this.http = http;\n    this.errorService = errorService;\n  }\n\n  getAll() : Observable<Topic[]> {\n    return this.http.get<Topic[]>('http://localhost:8080/topics')\n      .pipe(\n        catchError(this.errorHandler.bind(this)),\n        tap(topics => this.topics = topics)\n      )\n  }\n\n  addTopic(topic: Topic): Observable<RequestResult> {\n    const userWithPassword = {user: user, password: password};\n\n    return this.http.post<RequestResult>('http://localhost:8080/register', userWithPassword)\n      .pipe(\n        catchError(this.errorHandler.bind(this)),\n        tap(result => this.getAll().subscribe())\n      );\n  }\n\n  private errorHandler(error: HttpErrorResponse) {\n    this.errorService.handle(error.message);\n    return throwError(() => error.message);\n  }\n}\n"],"mappings":"AAIA,SAAQA,UAAU,EAAcC,GAAG,EAAEC,UAAU,QAAO,MAAM;;;;AAO5D,OAAM,MAAOC,YAAY;EAMvBC,YAAYC,IAAgB,EAAEC,YAA0B;IACtD,IAAI,CAACD,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,YAAY,GAAGA,YAAY;EAClC;EAEAC,MAAMA,CAAA;IACJ,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAU,8BAA8B,CAAC,CAC1DC,IAAI,CACHT,UAAU,CAAC,IAAI,CAACU,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,EACxCV,GAAG,CAACW,MAAM,IAAI,IAAI,CAACA,MAAM,GAAGA,MAAM,CAAC,CACpC;EACL;EAEAC,QAAQA,CAACC,KAAY;IACnB,MAAMC,gBAAgB,GAAG;MAACC,IAAI,EAAEA,IAAI;MAAEC,QAAQ,EAAEA;IAAQ,CAAC;IAEzD,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAgB,gCAAgC,EAAEH,gBAAgB,CAAC,CACrFN,IAAI,CACHT,UAAU,CAAC,IAAI,CAACU,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,EACxCV,GAAG,CAACkB,MAAM,IAAI,IAAI,CAACZ,MAAM,EAAE,CAACa,SAAS,EAAE,CAAC,CACzC;EACL;EAEQV,YAAYA,CAACW,KAAwB;IAC3C,IAAI,CAACf,YAAY,CAACgB,MAAM,CAACD,KAAK,CAACE,OAAO,CAAC;IACvC,OAAOrB,UAAU,CAAC,MAAMmB,KAAK,CAACE,OAAO,CAAC;EACxC;;AAhCWpB,YAAY,C;mBAAZA,YAAY,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,YAAA;AAAA;AAAZ1B,YAAY,C;SAAZA,YAAY;EAAA2B,OAAA,EAAZ3B,YAAY,CAAA4B,IAAA;EAAAC,UAAA,EAFX;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}