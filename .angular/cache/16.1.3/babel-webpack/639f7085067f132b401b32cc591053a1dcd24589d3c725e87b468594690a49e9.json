{"ast":null,"code":"import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/user.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"../../little-components/text-field-placeholder/text-field-placeholder.component\";\nimport * as i6 from \"../../little-components/error-paragraph/error-paragraph.component\";\nimport * as i7 from \"../../little-components/middle-control/middle-control.component\";\nimport * as i8 from \"../../little-components/checkbox-single/checkbox-single.component\";\nimport * as i9 from \"../../little-components/text-field-password-placeholder/text-field-password-placeholder.component\";\nfunction LoginUserComponent_app_error_paragraph_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-error-paragraph\", 11);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"errorMessage\", ctx_r0.globalError);\n  }\n}\nexport class LoginUserComponent {\n  constructor(userService, router) {\n    this.showAllErrors = false;\n    this.globalError = '';\n    this.form = new FormGroup({\n      email: new FormControl('', [Validators.email, Validators.required]),\n      password: new FormControl('', [Validators.required]),\n      rememberMe: new FormControl(false)\n    });\n    this.userService = userService;\n    this.router = router;\n  }\n  ngOnDestroy() {\n    if (this.subscription) this.subscription.unsubscribe();\n  }\n  isGlobalErrorSet() {\n    return this.globalError != '';\n  }\n  submit() {\n    if (this.anyErrorExists()) return;\n    this.loginUser();\n  }\n  anyErrorExists() {\n    this.resetGlobalError();\n    if (this.isAnyErrorInFields()) {\n      this.showAllErrors = true;\n      return true;\n    }\n    return false;\n  }\n  loginUser() {\n    let email = this.getEmailFromField();\n    let password = this.getPasswordFromField();\n    let rememberMe = this.getRememberMeOptionFromField();\n    this.subscription = this.userService.login(email, password, rememberMe).subscribe(result => {\n      console.log(result);\n      if (result.success) {\n        this.navigateToMainPage();\n      } else {\n        this.globalError = result.message;\n      }\n    });\n  }\n  navigateToMainPage() {\n    this.router.navigate(['/']);\n  }\n  resetGlobalError() {\n    this.globalError = '';\n  }\n  getEmailFromField() {\n    return this.form.controls.email.getRawValue();\n  }\n  getPasswordFromField() {\n    return this.form.controls.password.getRawValue();\n  }\n  getRememberMeOptionFromField() {\n    return this.form.controls.rememberMe.getRawValue();\n  }\n  isAnyErrorInFields() {\n    return this.doesControlHaveError(this.form.controls.email) || this.doesControlHaveError(this.form.controls.password);\n  }\n  doesControlHaveError(formControl) {\n    return formControl.errors != null;\n  }\n}\nLoginUserComponent.ɵfac = function LoginUserComponent_Factory(t) {\n  return new (t || LoginUserComponent)(i0.ɵɵdirectiveInject(i1.UserService), i0.ɵɵdirectiveInject(i2.Router));\n};\nLoginUserComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginUserComponent,\n  selectors: [[\"app-login-user\"]],\n  decls: 16,\n  vars: 9,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [3, \"errorMessage\", 4, \"ngIf\"], [\"placeholder\", \"Email\", 3, \"formElement\", \"showError\"], [\"placeholder\", \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C\", 3, \"formElement\", \"showError\"], [3, \"paddingTop\"], [\"fieldName\", \"\\u0417\\u0430\\u043F\\u043E\\u043C\\u043D\\u0438\\u0442\\u044C \\u043C\\u0435\\u043D\\u044F\", 3, \"formElement\"], [\"routerLink\", \"/email-to-restore-password\", 1, \"blue-bold-link-text\"], [\"type\", \"submit\", 1, \"button-red-rounded\"], [1, \"text-center\", \"fs-6\", \"pt-3\"], [1, \"text-black\"], [\"routerLink\", \"/register\", 1, \"blue-bold-link-text\"], [3, \"errorMessage\"]],\n  template: function LoginUserComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginUserComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.submit();\n      });\n      i0.ɵɵtemplate(1, LoginUserComponent_app_error_paragraph_1_Template, 1, 1, \"app-error-paragraph\", 1);\n      i0.ɵɵelement(2, \"app-text-field-placeholder\", 2)(3, \"app-text-field-password-placeholder\", 3);\n      i0.ɵɵelementStart(4, \"app-middle-control\", 4);\n      i0.ɵɵelement(5, \"app-checkbox-single\", 5);\n      i0.ɵɵelementStart(6, \"a\", 6);\n      i0.ɵɵtext(7, \"\\u0417\\u0430\\u0431\\u044B\\u043B\\u0438 \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C?\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(8, \"app-middle-control\", 4)(9, \"button\", 7);\n      i0.ɵɵtext(10, \"\\u0412\\u043E\\u0439\\u0442\\u0438\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(11, \"p\", 8)(12, \"span\", 9);\n      i0.ɵɵtext(13, \"\\u041D\\u0435\\u0442 \\u0430\\u043A\\u043A\\u0430\\u0443\\u043D\\u0442\\u0430? \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"a\", 10);\n      i0.ɵɵtext(15, \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isGlobalErrorSet());\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formElement\", ctx.form.controls.email)(\"showError\", ctx.showAllErrors);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formElement\", ctx.form.controls.password)(\"showError\", ctx.showAllErrors);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"paddingTop\", 2);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formElement\", ctx.form.controls.rememberMe);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"paddingTop\", 2);\n    }\n  },\n  dependencies: [i3.NgIf, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i2.RouterLink, i5.TextFieldPlaceholderComponent, i6.ErrorParagraphComponent, i7.MiddleControlComponent, i8.CheckboxSingleComponent, i9.TextFieldPasswordPlaceholderComponent],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["FormControl","FormGroup","Validators","i0","ɵɵelement","ɵɵproperty","ctx_r0","globalError","LoginUserComponent","constructor","userService","router","showAllErrors","form","email","required","password","rememberMe","ngOnDestroy","subscription","unsubscribe","isGlobalErrorSet","submit","anyErrorExists","loginUser","resetGlobalError","isAnyErrorInFields","getEmailFromField","getPasswordFromField","getRememberMeOptionFromField","login","subscribe","result","console","log","success","navigateToMainPage","message","navigate","controls","getRawValue","doesControlHaveError","formControl","errors","ɵɵdirectiveInject","i1","UserService","i2","Router","selectors","decls","vars","consts","template","LoginUserComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","LoginUserComponent_Template_form_ngSubmit_0_listener","ɵɵtemplate","LoginUserComponent_app_error_paragraph_1_Template","ɵɵtext","ɵɵelementEnd","ɵɵadvance"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\components\\login-user\\login-user.component.ts","C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\components\\login-user\\login-user.component.html"],"sourcesContent":["import {Component, OnDestroy} from '@angular/core';\r\nimport {UserService} from \"../../service/user.service\";\r\nimport {Router} from \"@angular/router\";\r\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\r\nimport {Subscription} from \"rxjs\";\r\n\r\n@Component({\r\n  selector: 'app-login-user',\r\n  templateUrl: './login-user.component.html',\r\n  styleUrls: ['./login-user.component.css']\r\n})\r\nexport class LoginUserComponent implements OnDestroy {\r\n  private userService: UserService;\r\n  private router: Router;\r\n\r\n  showAllErrors = false;\r\n  globalError: string = '';\r\n\r\n  private subscription: Subscription;\r\n\r\n  form = new FormGroup({\r\n    email: new FormControl<string>('', [\r\n      Validators.email,\r\n      Validators.required\r\n    ]),\r\n    password: new FormControl<string>('', [\r\n      Validators.required\r\n    ]),\r\n    rememberMe: new FormControl<boolean>(false)\r\n  })\r\n\r\n  constructor(userService: UserService,\r\n              router: Router) {\r\n    this.userService = userService;\r\n    this.router = router;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.subscription)\r\n      this.subscription.unsubscribe();\r\n  }\r\n\r\n  isGlobalErrorSet(): boolean {\r\n    return this.globalError != '';\r\n  }\r\n\r\n  submit() {\r\n    if (this.anyErrorExists())\r\n      return;\r\n\r\n    this.loginUser();\r\n  }\r\n\r\n  private anyErrorExists(): boolean {\r\n    this.resetGlobalError();\r\n\r\n    if (this.isAnyErrorInFields()) {\r\n      this.showAllErrors = true;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private loginUser() {\r\n    let email = this.getEmailFromField();\r\n    let password = this.getPasswordFromField();\r\n    let rememberMe = this.getRememberMeOptionFromField();\r\n\r\n    this.subscription = this.userService.login(email, password, rememberMe)\r\n      .subscribe(result => {\r\n        console.log(result);\r\n        if (result.success) {\r\n          this.navigateToMainPage();\r\n        }\r\n        else {\r\n          this.globalError = result.message;\r\n        }\r\n      });\r\n  }\r\n\r\n  private navigateToMainPage() {\r\n    this.router.navigate(['/']);\r\n  }\r\n\r\n  private resetGlobalError() {\r\n    this.globalError = '';\r\n  }\r\n\r\n  private getEmailFromField(): string {\r\n    return this.form.controls.email.getRawValue();\r\n  }\r\n\r\n  private getPasswordFromField(): string {\r\n    return this.form.controls.password.getRawValue();\r\n  }\r\n\r\n  private getRememberMeOptionFromField(): boolean {\r\n    return this.form.controls.rememberMe.getRawValue();\r\n  }\r\n\r\n  private isAnyErrorInFields(): boolean {\r\n    return this.doesControlHaveError(this.form.controls.email) ||\r\n      this.doesControlHaveError(this.form.controls.password);\r\n  }\r\n\r\n  private doesControlHaveError(formControl: FormControl): boolean {\r\n    return formControl.errors != null;\r\n  }\r\n}\r\n","<form [formGroup]=\"form\" (ngSubmit)=\"submit()\">\r\n  <app-error-paragraph\r\n    *ngIf=\"isGlobalErrorSet()\"\r\n    [errorMessage]=\"globalError\"\r\n  ></app-error-paragraph>\r\n\r\n  <app-text-field-placeholder\r\n    placeholder=\"Email\"\r\n    [formElement]=\"form.controls.email\"\r\n    [showError]=\"showAllErrors\"\r\n  ></app-text-field-placeholder>\r\n\r\n  <app-text-field-password-placeholder\r\n    placeholder=\"Пароль\"\r\n    [formElement]=\"form.controls.password\"\r\n    [showError]=\"showAllErrors\"\r\n  ></app-text-field-password-placeholder>\r\n\r\n  <app-middle-control\r\n    [paddingTop]=\"2\">\r\n    <app-checkbox-single\r\n      fieldName=\"Запомнить меня\"\r\n      [formElement]=\"form.controls.rememberMe\"\r\n    ></app-checkbox-single>\r\n    <a routerLink=\"/email-to-restore-password\" class=\"blue-bold-link-text\">Забыли пароль?</a>\r\n  </app-middle-control>\r\n\r\n  <app-middle-control\r\n    [paddingTop]=\"2\">\r\n    <button\r\n      type=\"submit\"\r\n      class=\"button-red-rounded\"\r\n    >Войти</button>\r\n  </app-middle-control>\r\n\r\n  <p class=\"text-center fs-6 pt-3\">\r\n    <span class=\"text-black\">Нет аккаунта? </span>\r\n    <a routerLink=\"/register\" class=\"blue-bold-link-text\">Создать</a>\r\n  </p>\r\n\r\n</form>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}