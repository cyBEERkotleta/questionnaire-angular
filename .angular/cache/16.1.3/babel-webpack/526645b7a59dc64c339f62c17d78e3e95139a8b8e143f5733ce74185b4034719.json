{"ast":null,"code":"import { MessagingService } from \"./messaging-service.service\";\nimport { map } from \"rxjs\";\nimport * as StompJS from '@stomp/stompjs';\nimport * as i0 from \"@angular/core\";\nconst {\n  Client\n} = StompJS;\nexport class WebSocketService {\n  constructor() {\n    /*private path = 'ws://localhost:8080/ws';\n           subscribe(formId: bigint, callback: any): StompSubscription {\n        this.stompClient.activate();\n      return this.subscribeToForm(formId, callback);\n    }\n           private subscribeToForm(formId: bigint, callback: any): StompSubscription {\n      return this.stompClient.subscribe(this.getDestination(formId), (message) => {\n        console.log('Received message:', JSON.stringify(message.body));\n      });\n    }*/\n    this.path = 'ws://localhost:8080/ws';\n    this.stompClient = new StompJS.Client({\n      brokerURL: 'ws://localhost:8080/ws'\n    });\n    this.stompClient.activate();\n  }\n  subscribeToFormUpdates(formId) {\n    this.messagingService = new MessagingService(this.path, this.getDestination(formId));\n    return this.messagingService.stream().pipe(map(message => {\n      return JSON.parse(message.toString());\n    }));\n  }\n  getDestination(formId) {\n    return '/user/answered_forms_queue/' + formId;\n  }\n  setEvents() {\n    this.stompClient.onConnect = frame => {\n      console.log('Connected: ' + frame);\n      this.stompClient.subscribe('/topic/greetings', greeting => {\n        console.log(JSON.parse(greeting.body).content);\n      });\n    };\n    this.stompClient.onWebSocketError = error => {\n      console.error('Error with websocket', error);\n    };\n    this.stompClient.onStompError = frame => {\n      console.error('Broker reported error: ' + frame.headers['message']);\n      console.error('Additional details: ' + frame.body);\n    };\n  }\n}\nWebSocketService.ɵfac = function WebSocketService_Factory(t) {\n  return new (t || WebSocketService)();\n};\nWebSocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WebSocketService,\n  factory: WebSocketService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["MessagingService","map","StompJS","Client","WebSocketService","constructor","path","stompClient","brokerURL","activate","subscribeToFormUpdates","formId","messagingService","getDestination","stream","pipe","message","JSON","parse","toString","setEvents","onConnect","frame","console","log","subscribe","greeting","body","content","onWebSocketError","error","onStompError","headers","factory","ɵfac","providedIn"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\service\\web-socket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {MessagingService} from \"./messaging-service.service\";\r\nimport {map, Observable} from \"rxjs\";\r\nimport {AnsweredForm} from \"../entity/AnsweredForm\";\r\nimport * as StompJS from '@stomp/stompjs';\r\n\r\nconst { Client } = StompJS;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WebSocketService {\r\n  /*private path = 'ws://localhost:8080/ws';\r\n\r\n  subscribe(formId: bigint, callback: any): StompSubscription {\r\n      this.stompClient.activate();\r\n    return this.subscribeToForm(formId, callback);\r\n  }\r\n\r\n  private subscribeToForm(formId: bigint, callback: any): StompSubscription {\r\n    return this.stompClient.subscribe(this.getDestination(formId), (message) => {\r\n      console.log('Received message:', JSON.stringify(message.body));\r\n    });\r\n  }*/\r\n\r\n  private path = 'ws://localhost:8080/ws';\r\n\r\n  private messagingService;\r\n\r\n  constructor() {\r\n\r\n    this.stompClient.activate();\r\n  }\r\n\r\n  subscribeToFormUpdates(formId: bigint): Observable<AnsweredForm[]> {\r\n    this.messagingService = new MessagingService(this.path, this.getDestination(formId));\r\n    return this.messagingService.stream()\r\n      .pipe(\r\n      map(\r\n        message => {\r\n          return JSON.parse(message.toString()) as AnsweredForm[];\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  private getDestination(formId: bigint): string {\r\n    return '/user/answered_forms_queue/' + formId;\r\n  }\r\n\r\n  private stompClient = new StompJS.Client({\r\n    brokerURL: 'ws://localhost:8080/ws'\r\n  });\r\n\r\n  private setEvents() {\r\n    this.stompClient.onConnect = (frame) => {\r\n      console.log('Connected: ' + frame);\r\n      this.stompClient.subscribe('/topic/greetings', (greeting) => {\r\n        console.log(JSON.parse(greeting.body).content);\r\n      });\r\n    };\r\n\r\n    this.stompClient.onWebSocketError = (error) => {\r\n      console.error('Error with websocket', error);\r\n    };\r\n\r\n    this.stompClient.onStompError = (frame) => {\r\n      console.error('Broker reported error: ' + frame.headers['message']);\r\n      console.error('Additional details: ' + frame.body);\r\n    };\r\n\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAQA,gBAAgB,QAAO,6BAA6B;AAC5D,SAAQC,GAAG,QAAmB,MAAM;AAEpC,OAAO,KAAKC,OAAO,MAAM,gBAAgB;;AAEzC,MAAM;EAAEC;AAAM,CAAE,GAAGD,OAAO;AAK1B,OAAM,MAAOE,gBAAgB;EAkB3BC,YAAA;IAjBA;;;;;;;;;;IAaQ,KAAAC,IAAI,GAAG,wBAAwB;IAyB/B,KAAAC,WAAW,GAAG,IAAIL,OAAO,CAACC,MAAM,CAAC;MACvCK,SAAS,EAAE;KACZ,CAAC;IArBA,IAAI,CAACD,WAAW,CAACE,QAAQ,EAAE;EAC7B;EAEAC,sBAAsBA,CAACC,MAAc;IACnC,IAAI,CAACC,gBAAgB,GAAG,IAAIZ,gBAAgB,CAAC,IAAI,CAACM,IAAI,EAAE,IAAI,CAACO,cAAc,CAACF,MAAM,CAAC,CAAC;IACpF,OAAO,IAAI,CAACC,gBAAgB,CAACE,MAAM,EAAE,CAClCC,IAAI,CACLd,GAAG,CACDe,OAAO,IAAG;MACR,OAAOC,IAAI,CAACC,KAAK,CAACF,OAAO,CAACG,QAAQ,EAAE,CAAmB;IACzD,CAAC,CACF,CACF;EACH;EAEQN,cAAcA,CAACF,MAAc;IACnC,OAAO,6BAA6B,GAAGA,MAAM;EAC/C;EAMQS,SAASA,CAAA;IACf,IAAI,CAACb,WAAW,CAACc,SAAS,GAAIC,KAAK,IAAI;MACrCC,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGF,KAAK,CAAC;MAClC,IAAI,CAACf,WAAW,CAACkB,SAAS,CAAC,kBAAkB,EAAGC,QAAQ,IAAI;QAC1DH,OAAO,CAACC,GAAG,CAACP,IAAI,CAACC,KAAK,CAACQ,QAAQ,CAACC,IAAI,CAAC,CAACC,OAAO,CAAC;MAChD,CAAC,CAAC;IACJ,CAAC;IAED,IAAI,CAACrB,WAAW,CAACsB,gBAAgB,GAAIC,KAAK,IAAI;MAC5CP,OAAO,CAACO,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C,CAAC;IAED,IAAI,CAACvB,WAAW,CAACwB,YAAY,GAAIT,KAAK,IAAI;MACxCC,OAAO,CAACO,KAAK,CAAC,yBAAyB,GAAGR,KAAK,CAACU,OAAO,CAAC,SAAS,CAAC,CAAC;MACnET,OAAO,CAACO,KAAK,CAAC,sBAAsB,GAAGR,KAAK,CAACK,IAAI,CAAC;IACpD,CAAC;EAEH;;AA5DWvB,gBAAgB,C;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB,C;SAAhBA,gBAAgB;EAAA6B,OAAA,EAAhB7B,gBAAgB,CAAA8B,IAAA;EAAAC,UAAA,EAFf;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}