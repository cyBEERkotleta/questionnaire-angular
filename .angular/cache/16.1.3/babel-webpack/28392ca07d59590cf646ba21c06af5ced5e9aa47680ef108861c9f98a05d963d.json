{"ast":null,"code":"import { FormControl, FormGroup } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../checkbox-group/checkbox-group.component\";\nexport class CheckboxOptionsComponent {\n  constructor() {\n    this.showError = false;\n    this.form = new FormGroup({\n      checkboxStates: new FormControl([])\n    });\n  }\n  generateOptionNames() {\n    return this.field.options.map(option => option.shownName);\n  }\n  ngOnInit() {\n    this.form.controls.checkboxStates.valueChanges.subscribe(value => {\n      this.formElement.setValue(this.convertToOptions(value));\n    });\n  }\n  ngOnDestroy() {\n    if (this.subscription) this.subscription.unsubscribe();\n  }\n  convertToOptions(states) {\n    let options = [];\n    for (let i = 0; i < states.length; i++) {\n      let option = this.field.options.find(option => option.text == states[i].text);\n      options.push(option);\n    }\n    return options;\n  }\n}\nCheckboxOptionsComponent.ɵfac = function CheckboxOptionsComponent_Factory(t) {\n  return new (t || CheckboxOptionsComponent)();\n};\nCheckboxOptionsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CheckboxOptionsComponent,\n  selectors: [[\"app-checkbox-options\"]],\n  inputs: {\n    field: \"field\",\n    showError: \"showError\",\n    formElement: \"formElement\"\n  },\n  decls: 1,\n  vars: 4,\n  consts: [[3, \"fieldName\", \"showError\", \"optionNames\", \"formElement\"]],\n  template: function CheckboxOptionsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"app-checkbox-group\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"fieldName\", ctx.field.label)(\"showError\", ctx.showError)(\"optionNames\", ctx.generateOptionNames())(\"formElement\", ctx.form.controls.checkboxStates);\n    }\n  },\n  dependencies: [i1.CheckboxGroupComponent],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["FormControl","FormGroup","CheckboxOptionsComponent","constructor","showError","form","checkboxStates","generateOptionNames","field","options","map","option","shownName","ngOnInit","controls","valueChanges","subscribe","value","formElement","setValue","convertToOptions","ngOnDestroy","subscription","unsubscribe","states","i","length","find","text","push","selectors","inputs","decls","vars","consts","template","CheckboxOptionsComponent_Template","rf","ctx","i0","ɵɵelement","ɵɵproperty","label"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\little-components\\checkbox-options\\checkbox-options.component.ts","C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\little-components\\checkbox-options\\checkbox-options.component.html"],"sourcesContent":["import {Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {FormControl, FormGroup} from \"@angular/forms\";\nimport {CheckBoxState} from \"../../additional/CheckBoxState\";\nimport {Field} from \"../../entity/Field\";\nimport {FieldOption} from \"../../entity/FieldOption\";\nimport {Subscription} from \"rxjs\";\n\n@Component({\n  selector: 'app-checkbox-options',\n  templateUrl: './checkbox-options.component.html',\n  styleUrls: ['./checkbox-options.component.css']\n})\nexport class CheckboxOptionsComponent implements OnInit, OnDestroy {\n  @Input() field: Field;\n  @Input() showError: boolean = false;\n  @Input() formElement: FormControl<FieldOption[]>;\n\n  form = new FormGroup({\n    checkboxStates: new FormControl<CheckBoxState[]>([])\n  });\n\n  private subscription: Subscription;\n\n  generateOptionNames(): string[] {\n    return this.field.options.map(option => option.shownName);\n  }\n\n  ngOnInit() {\n    this.form.controls.checkboxStates.valueChanges\n      .subscribe(value => {\n        this.formElement.setValue(this.convertToOptions(value));\n      });\n  }\n\n  ngOnDestroy() {\n    if (this.subscription)\n      this.subscription.unsubscribe();\n  }\n\n  private convertToOptions(states: CheckBoxState[]): FieldOption[] {\n    let options: FieldOption[] = [];\n    for (let i = 0; i < states.length; i++) {\n      let option: FieldOption = this.field.options.find(option => option.text == states[i].text);\n      options.push(option);\n    }\n    return options;\n  }\n}\n","<app-checkbox-group\n  [fieldName]=\"field.label\"\n  [showError]=\"showError\"\n  [optionNames]=\"generateOptionNames()\"\n  [formElement]=\"form.controls.checkboxStates\"\n></app-checkbox-group>\n"],"mappings":"AACA,SAAQA,WAAW,EAAEC,SAAS,QAAO,gBAAgB;;;AAWrD,OAAM,MAAOC,wBAAwB;EALrCC,YAAA;IAOW,KAAAC,SAAS,GAAY,KAAK;IAGnC,KAAAC,IAAI,GAAG,IAAIJ,SAAS,CAAC;MACnBK,cAAc,EAAE,IAAIN,WAAW,CAAkB,EAAE;KACpD,CAAC;;EAIFO,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAACC,KAAK,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAIA,MAAM,CAACC,SAAS,CAAC;EAC3D;EAEAC,QAAQA,CAAA;IACN,IAAI,CAACR,IAAI,CAACS,QAAQ,CAACR,cAAc,CAACS,YAAY,CAC3CC,SAAS,CAACC,KAAK,IAAG;MACjB,IAAI,CAACC,WAAW,CAACC,QAAQ,CAAC,IAAI,CAACC,gBAAgB,CAACH,KAAK,CAAC,CAAC;IACzD,CAAC,CAAC;EACN;EAEAI,WAAWA,CAAA;IACT,IAAI,IAAI,CAACC,YAAY,EACnB,IAAI,CAACA,YAAY,CAACC,WAAW,EAAE;EACnC;EAEQH,gBAAgBA,CAACI,MAAuB;IAC9C,IAAIf,OAAO,GAAkB,EAAE;IAC/B,KAAK,IAAIgB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;MACtC,IAAId,MAAM,GAAgB,IAAI,CAACH,KAAK,CAACC,OAAO,CAACkB,IAAI,CAAChB,MAAM,IAAIA,MAAM,CAACiB,IAAI,IAAIJ,MAAM,CAACC,CAAC,CAAC,CAACG,IAAI,CAAC;MAC1FnB,OAAO,CAACoB,IAAI,CAAClB,MAAM,CAAC;;IAEtB,OAAOF,OAAO;EAChB;;AAlCWP,wBAAwB,C;mBAAxBA,wBAAwB;AAAA;AAAxBA,wBAAwB,C;QAAxBA,wBAAwB;EAAA4B,SAAA;EAAAC,MAAA;IAAAvB,KAAA;IAAAJ,SAAA;IAAAc,WAAA;EAAA;EAAAc,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,kCAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCZrCE,EAAA,CAAAC,SAAA,4BAKsB;;;MAJpBD,EAAA,CAAAE,UAAA,cAAAH,GAAA,CAAA9B,KAAA,CAAAkC,KAAA,CAAyB,cAAAJ,GAAA,CAAAlC,SAAA,iBAAAkC,GAAA,CAAA/B,mBAAA,mBAAA+B,GAAA,CAAAjC,IAAA,CAAAS,QAAA,CAAAR,cAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}