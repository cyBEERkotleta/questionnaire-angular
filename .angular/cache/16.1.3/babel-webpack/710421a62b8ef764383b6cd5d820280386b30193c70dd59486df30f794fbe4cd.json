{"ast":null,"code":"import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/form.service\";\nimport * as i2 from \"../../service/modal-edit-window.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"../../little-components/text-field/text-field.component\";\nimport * as i6 from \"../../little-components/error-paragraph/error-paragraph.component\";\nimport * as i7 from \"../../little-components/middle-control/middle-control.component\";\nimport * as i8 from \"../../little-components/checkbox-single/checkbox-single.component\";\nimport * as i9 from \"../../little-components/combobox-topic/combobox-topic.component\";\nfunction EditFormComponent_app_error_paragraph_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-error-paragraph\", 6);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"errorMessage\", ctx_r0.globalError);\n  }\n}\nexport class EditFormComponent {\n  constructor(formService, modalEditWindowService) {\n    this.showAllErrors = false;\n    this.globalError = '';\n    this.listenerTopicReady = false;\n    this.form = new FormGroup({\n      name: new FormControl('', [Validators.minLength(3), Validators.maxLength(100), Validators.required]),\n      topic: new FormControl(null),\n      shown: new FormControl(true)\n    });\n    this.formService = formService;\n    this.modalEditWindowsService = modalEditWindowService;\n    this.editedForm = this.modalEditWindowsService.getEditableObject();\n  }\n  ngOnInit() {\n    this.updateFormFields();\n  }\n  ngOnDestroy() {\n    if (this.subscription) this.subscription.unsubscribe();\n  }\n  isGlobalErrorSet() {\n    return this.globalError != '';\n  }\n  submit() {\n    if (this.anyErrorExists()) return;\n    this.saveForm();\n  }\n  anyErrorExists() {\n    this.resetGlobalError();\n    if (this.isAnyErrorInFields()) {\n      this.showAllErrors = true;\n      return true;\n    }\n    return false;\n  }\n  saveForm() {\n    this.updateEditedFormWithFields();\n    this.subscription = this.formService.saveForm(this.editedForm).subscribe(result => {\n      console.log(result);\n      if (result.success) {\n        this.modalEditWindowsService.close();\n      } else {\n        this.globalError = result.message;\n      }\n    });\n  }\n  updateFormFields() {\n    this.form.controls.name.setValue(this.editedForm.name);\n    this.form.controls.shown.setValue(this.editedForm.shown);\n  }\n  onTopicChoiceReadyToGetValue() {\n    this.listenerTopicReady = true;\n    this.form.controls.topic.setValue(this.editedForm.topic);\n  }\n  resetGlobalError() {\n    this.globalError = '';\n  }\n  updateEditedFormWithFields() {\n    let name = this.getNameFromField();\n    let shown = this.getShownFromField();\n    let topic = this.getTopicFromField();\n    this.editedForm.name = name;\n    this.editedForm.shown = shown;\n    this.editedForm.topic = topic;\n  }\n  getNameFromField() {\n    return this.form.controls.name.getRawValue();\n  }\n  getShownFromField() {\n    return this.form.controls.shown.getRawValue();\n  }\n  getTopicFromField() {\n    return this.form.controls.topic.getRawValue();\n  }\n  isAnyErrorInFields() {\n    return this.doesControlHaveError(this.form.controls.name) || this.doesControlHaveError(this.form.controls.topic);\n  }\n  doesControlHaveError(formControl) {\n    return formControl.errors != null;\n  }\n}\nEditFormComponent.ɵfac = function EditFormComponent_Factory(t) {\n  return new (t || EditFormComponent)(i0.ɵɵdirectiveInject(i1.FormService), i0.ɵɵdirectiveInject(i2.ModalEditWindowService));\n};\nEditFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: EditFormComponent,\n  selectors: [[\"app-edit-form\"]],\n  decls: 9,\n  vars: 7,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [3, \"errorMessage\", 4, \"ngIf\"], [\"fieldName\", \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435\", 3, \"formElement\", \"showError\"], [\"fieldName\", \"\\u0422\\u0435\\u043C\\u0430\", 3, \"formElement\", \"showError\", \"listenerToValueChangeReady\"], [\"fieldName\", \"\\u041E\\u0442\\u043E\\u0431\\u0440\\u0430\\u0436\\u0430\\u0442\\u044C \\u0444\\u043E\\u0440\\u043C\\u0443 \\u0432 \\u043A\\u0430\\u0442\\u0430\\u043B\\u043E\\u0433\\u0435\", 3, \"formElement\"], [\"type\", \"submit\", 1, \"button-red-rounded\"], [3, \"errorMessage\"]],\n  template: function EditFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function EditFormComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.submit();\n      });\n      i0.ɵɵtemplate(1, EditFormComponent_app_error_paragraph_1_Template, 1, 1, \"app-error-paragraph\", 1);\n      i0.ɵɵelement(2, \"app-text-field\", 2);\n      i0.ɵɵelementStart(3, \"app-combobox-topic\", 3);\n      i0.ɵɵlistener(\"listenerToValueChangeReady\", function EditFormComponent_Template_app_combobox_topic_listenerToValueChangeReady_3_listener() {\n        return ctx.onTopicChoiceReadyToGetValue();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"app-checkbox-single\", 4)(5, \"br\");\n      i0.ɵɵelementStart(6, \"app-middle-control\")(7, \"button\", 5);\n      i0.ɵɵtext(8, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C \\u0438\\u0437\\u043C\\u0435\\u043D\\u0435\\u043D\\u0438\\u044F\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isGlobalErrorSet());\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formElement\", ctx.form.controls.name)(\"showError\", ctx.showAllErrors);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formElement\", ctx.form.controls.topic)(\"showError\", ctx.showAllErrors);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formElement\", ctx.form.controls.shown);\n    }\n  },\n  dependencies: [i3.NgIf, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i5.TextFieldComponent, i6.ErrorParagraphComponent, i7.MiddleControlComponent, i8.CheckboxSingleComponent, i9.ComboboxTopicComponent],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["FormControl","FormGroup","Validators","i0","ɵɵelement","ɵɵproperty","ctx_r0","globalError","EditFormComponent","constructor","formService","modalEditWindowService","showAllErrors","listenerTopicReady","form","name","minLength","maxLength","required","topic","shown","modalEditWindowsService","editedForm","getEditableObject","ngOnInit","updateFormFields","ngOnDestroy","subscription","unsubscribe","isGlobalErrorSet","submit","anyErrorExists","saveForm","resetGlobalError","isAnyErrorInFields","updateEditedFormWithFields","subscribe","result","console","log","success","close","message","controls","setValue","onTopicChoiceReadyToGetValue","getNameFromField","getShownFromField","getTopicFromField","getRawValue","doesControlHaveError","formControl","errors","ɵɵdirectiveInject","i1","FormService","i2","ModalEditWindowService","selectors","decls","vars","consts","template","EditFormComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","EditFormComponent_Template_form_ngSubmit_0_listener","ɵɵtemplate","EditFormComponent_app_error_paragraph_1_Template","EditFormComponent_Template_app_combobox_topic_listenerToValueChangeReady_3_listener","ɵɵelementEnd","ɵɵtext","ɵɵadvance"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\components\\edit-form\\edit-form.component.ts","C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\components\\edit-form\\edit-form.component.html"],"sourcesContent":["import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {Topic} from \"../../entity/Topic\";\nimport {FormService} from \"../../service/form.service\";\nimport {Subscription} from \"rxjs\";\nimport {Form} from \"../../entity/Form\";\nimport {ModalEditWindowService} from \"../../service/modal-edit-window.service\";\n\n@Component({\n  selector: 'app-edit-form',\n  templateUrl: './edit-form.component.html',\n  styleUrls: ['./edit-form.component.css']\n})\nexport class EditFormComponent implements OnInit, OnDestroy {\n  editedForm: Form;\n\n  private formService: FormService;\n  private modalEditWindowsService: ModalEditWindowService;\n\n  showAllErrors = false;\n  globalError: string = '';\n\n  private listenerTopicReady = false;\n\n  private subscription: Subscription;\n\n  form = new FormGroup({\n    name: new FormControl<string>('', [\n      Validators.minLength(3),\n      Validators.maxLength(100),\n      Validators.required\n    ]),\n    topic: new FormControl<Topic>(null),\n    shown: new FormControl<boolean>(true),\n  });\n\n  constructor(formService: FormService,\n              modalEditWindowService: ModalEditWindowService) {\n    this.formService = formService;\n    this.modalEditWindowsService = modalEditWindowService;\n\n    this.editedForm = this.modalEditWindowsService.getEditableObject() as Form;\n  }\n\n  ngOnInit() {\n    this.updateFormFields();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription)\n      this.subscription.unsubscribe();\n  }\n\n  isGlobalErrorSet(): boolean {\n    return this.globalError != '';\n  }\n\n  submit() {\n    if (this.anyErrorExists())\n      return;\n\n    this.saveForm();\n  }\n\n  private anyErrorExists(): boolean {\n    this.resetGlobalError();\n\n    if (this.isAnyErrorInFields()) {\n      this.showAllErrors = true;\n      return true;\n    }\n    return false;\n  }\n\n  private saveForm() {\n    this.updateEditedFormWithFields();\n\n    this.subscription = this.formService.saveForm(this.editedForm)\n      .subscribe(result => {\n        console.log(result);\n        if (result.success) {\n          this.modalEditWindowsService.close();\n        }\n        else {\n          this.globalError = result.message;\n        }\n      });\n  }\n\n  private updateFormFields() {\n    this.form.controls.name.setValue(this.editedForm.name);\n    this.form.controls.shown.setValue(this.editedForm.shown);\n  }\n\n  onTopicChoiceReadyToGetValue() {\n    this.listenerTopicReady = true;\n\n    this.form.controls.topic.setValue(this.editedForm.topic);\n  }\n\n  private resetGlobalError() {\n    this.globalError = '';\n  }\n\n  private updateEditedFormWithFields() {\n    let name = this.getNameFromField();\n    let shown = this.getShownFromField();\n    let topic = this.getTopicFromField();\n\n    this.editedForm.name = name;\n    this.editedForm.shown = shown;\n    this.editedForm.topic = topic;\n  }\n\n  private getNameFromField(): string {\n    return this.form.controls.name.getRawValue();\n  }\n\n  private getShownFromField(): boolean {\n    return this.form.controls.shown.getRawValue();\n  }\n\n  private getTopicFromField(): Topic {\n    return this.form.controls.topic.getRawValue();\n  }\n\n  private isAnyErrorInFields(): boolean {\n    return this.doesControlHaveError(this.form.controls.name) ||\n      this.doesControlHaveError(this.form.controls.topic);\n  }\n\n  private doesControlHaveError(formControl: FormControl): boolean {\n    return formControl.errors != null;\n  }\n}\n","<form [formGroup]=\"form\" (ngSubmit)=\"submit()\">\n  <app-error-paragraph\n    *ngIf=\"isGlobalErrorSet()\"\n    [errorMessage]=\"globalError\"\n  ></app-error-paragraph>\n\n  <app-text-field\n    fieldName=\"Название\"\n    [formElement]=\"form.controls.name\"\n    [showError]=\"showAllErrors\"\n  ></app-text-field>\n\n  <app-combobox-topic\n    fieldName=\"Тема\"\n    [formElement]=\"form.controls.topic\"\n    [showError]=\"showAllErrors\"\n    (listenerToValueChangeReady)=\"onTopicChoiceReadyToGetValue()\"\n  ></app-combobox-topic>\n\n  <app-checkbox-single\n    fieldName=\"Отображать форму в каталоге\"\n    [formElement]=\"form.controls.shown\"\n  ></app-checkbox-single>\n\n  <br/>\n\n  <app-middle-control>\n    <button\n      type=\"submit\"\n      class=\"button-red-rounded\"\n    >Сохранить изменения</button>\n  </app-middle-control>\n</form>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}