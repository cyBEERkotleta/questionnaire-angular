{"ast":null,"code":"import * as StompJS from '@stomp/stompjs';\nimport * as i0 from \"@angular/core\";\nconst {\n  Client\n} = StompJS;\nexport class WebSocketService {\n  constructor() {\n    this.path = 'ws://localhost:8080/ws';\n    this.stompClient = new StompJS.Client({\n      brokerURL: 'ws://localhost:8080/ws'\n    });\n    this.stompClient.activate();\n  }\n  /*subscribeToFormUpdates(formId: bigint): Observable<AnsweredForm[]> {\n    this.messagingService = new MessagingService(this.path, this.getDestination(formId));\n    return this.messagingService.stream()\n      .pipe(\n      map(\n        message => {\n          return JSON.parse(message.toString()) as AnsweredForm[];\n        }\n      )\n    );\n  }*/\n  getDestination(formId) {\n    return '/user/answered_forms_queue/' + formId;\n  }\n  setEvents() {\n    this.stompClient.onConnect = frame => {\n      console.log('Connected: ' + frame);\n      this.stompClient.subscribe('/topic/greetings', greeting => {\n        console.log(JSON.parse(greeting.body).content);\n      });\n    };\n    this.stompClient.onWebSocketError = error => {\n      console.error('Error with websocket', error);\n    };\n    this.stompClient.onStompError = frame => {\n      console.error('Broker reported error: ' + frame.headers['message']);\n      console.error('Additional details: ' + frame.body);\n    };\n  }\n}\nWebSocketService.ɵfac = function WebSocketService_Factory(t) {\n  return new (t || WebSocketService)();\n};\nWebSocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WebSocketService,\n  factory: WebSocketService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["StompJS","Client","WebSocketService","constructor","path","stompClient","brokerURL","activate","getDestination","formId","setEvents","onConnect","frame","console","log","subscribe","greeting","JSON","parse","body","content","onWebSocketError","error","onStompError","headers","factory","ɵfac","providedIn"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\service\\web-socket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {MessagingService} from \"./messaging-service.service\";\nimport {map, Observable} from \"rxjs\";\nimport {AnsweredForm} from \"../entity/AnsweredForm\";\nimport * as StompJS from '@stomp/stompjs';\n\nconst { Client } = StompJS;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WebSocketService {\n  private path = 'ws://localhost:8080/ws';\n\n  private messagingService;\n\n  constructor() {\n\n    this.stompClient.activate();\n  }\n\n  /*subscribeToFormUpdates(formId: bigint): Observable<AnsweredForm[]> {\n    this.messagingService = new MessagingService(this.path, this.getDestination(formId));\n    return this.messagingService.stream()\n      .pipe(\n      map(\n        message => {\n          return JSON.parse(message.toString()) as AnsweredForm[];\n        }\n      )\n    );\n  }*/\n\n  private getDestination(formId: bigint): string {\n    return '/user/answered_forms_queue/' + formId;\n  }\n\n  private stompClient = new StompJS.Client({\n    brokerURL: 'ws://localhost:8080/ws'\n  });\n\n  private setEvents() {\n    this.stompClient.onConnect = (frame) => {\n      console.log('Connected: ' + frame);\n      this.stompClient.subscribe('/topic/greetings', (greeting) => {\n        console.log(JSON.parse(greeting.body).content);\n      });\n    };\n\n    this.stompClient.onWebSocketError = (error) => {\n      console.error('Error with websocket', error);\n    };\n\n    this.stompClient.onStompError = (frame) => {\n      console.error('Broker reported error: ' + frame.headers['message']);\n      console.error('Additional details: ' + frame.body);\n    };\n\n  }\n}\n"],"mappings":"AAIA,OAAO,KAAKA,OAAO,MAAM,gBAAgB;;AAEzC,MAAM;EAAEC;AAAM,CAAE,GAAGD,OAAO;AAK1B,OAAM,MAAOE,gBAAgB;EAK3BC,YAAA;IAJQ,KAAAC,IAAI,GAAG,wBAAwB;IAyB/B,KAAAC,WAAW,GAAG,IAAIL,OAAO,CAACC,MAAM,CAAC;MACvCK,SAAS,EAAE;KACZ,CAAC;IArBA,IAAI,CAACD,WAAW,CAACE,QAAQ,EAAE;EAC7B;EAEA;;;;;;;;;;;EAYQC,cAAcA,CAACC,MAAc;IACnC,OAAO,6BAA6B,GAAGA,MAAM;EAC/C;EAMQC,SAASA,CAAA;IACf,IAAI,CAACL,WAAW,CAACM,SAAS,GAAIC,KAAK,IAAI;MACrCC,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGF,KAAK,CAAC;MAClC,IAAI,CAACP,WAAW,CAACU,SAAS,CAAC,kBAAkB,EAAGC,QAAQ,IAAI;QAC1DH,OAAO,CAACC,GAAG,CAACG,IAAI,CAACC,KAAK,CAACF,QAAQ,CAACG,IAAI,CAAC,CAACC,OAAO,CAAC;MAChD,CAAC,CAAC;IACJ,CAAC;IAED,IAAI,CAACf,WAAW,CAACgB,gBAAgB,GAAIC,KAAK,IAAI;MAC5CT,OAAO,CAACS,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C,CAAC;IAED,IAAI,CAACjB,WAAW,CAACkB,YAAY,GAAIX,KAAK,IAAI;MACxCC,OAAO,CAACS,KAAK,CAAC,yBAAyB,GAAGV,KAAK,CAACY,OAAO,CAAC,SAAS,CAAC,CAAC;MACnEX,OAAO,CAACS,KAAK,CAAC,sBAAsB,GAAGV,KAAK,CAACO,IAAI,CAAC;IACpD,CAAC;EAEH;;AA/CWjB,gBAAgB,C;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB,C;SAAhBA,gBAAgB;EAAAuB,OAAA,EAAhBvB,gBAAgB,CAAAwB,IAAA;EAAAC,UAAA,EAFf;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}