{"ast":null,"code":"import { catchError, tap, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./error.service\";\nimport * as i3 from \"./session.service\";\nexport class UserService {\n  constructor(http, errorService, sessionService) {\n    this.http = http;\n    this.errorService = errorService;\n    this.sessionService = sessionService;\n  }\n  isUserPresent(user) {\n    return !!user && !!user.id && !!user.userRole && !!user.firstName && !!user.lastName && !!user.email && !!user.phoneNumber && !!user.forms && !!user.gender;\n  }\n  getAll() {\n    let token = this.sessionService.getToken();\n    return this.http.post('http://localhost:8080/users', token).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  getUserById(id) {\n    let token = this.sessionService.getToken();\n    let path = 'http://localhost:8080/users/' + id;\n    return this.http.post(path, token).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  register(user, password) {\n    const userWithPassword = {\n      user: user,\n      password: password\n    };\n    return this.http.post('http://localhost:8080/register', userWithPassword).pipe(catchError(this.errorHandler.bind(this)), tap(result => {\n      if (result.success) {\n        this.updateTokenInSession(result.token);\n        this.updateCurrentUser();\n      }\n    }));\n  }\n  tryRegister(user, password) {\n    const userWithPassword = {\n      user: user,\n      password: password\n    };\n    return this.http.post('http://localhost:8080/try_register', userWithPassword).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  login(email, password, rememberMe) {\n    const loginData = {\n      email: email,\n      password: password\n    };\n    return this.http.post('http://localhost:8080/login', loginData).pipe(catchError(this.errorHandler.bind(this)), tap(result => {\n      if (result.success) {\n        this.updateTokenWithRememberMeFlag(result.token, rememberMe);\n        this.updateCurrentUser();\n      }\n    }));\n  }\n  logOut() {\n    this.sessionService.removeTokenFromEverywhere();\n    this.sessionService.resetUser();\n  }\n  changePassword(oldPassword, newPassword) {\n    let token = this.sessionService.getToken();\n    const tokenWithChangePasswordData = {\n      token: token,\n      oldPassword: oldPassword,\n      newPassword: newPassword\n    };\n    return this.http.post('http://localhost:8080/change_password', tokenWithChangePasswordData).pipe(catchError(this.errorHandler.bind(this)), tap(result => {\n      if (result.success) {\n        this.updateTokenWhereItWasSet(result.token);\n        this.updateCurrentUser();\n      }\n    }));\n  }\n  saveUser(user) {\n    let token = this.sessionService.getToken();\n    const tokenWithUser = {\n      token: token,\n      user: user\n    };\n    return this.http.post('http://localhost:8080/save_user', tokenWithUser).pipe(catchError(this.errorHandler.bind(this)), tap(result => {\n      if (result.success) {\n        this.updateTokenWhereItWasSet(result.token);\n        this.updateCurrentUser();\n      }\n    }));\n  }\n  updateCurrentUser() {\n    let token = this.sessionService.getToken();\n    return this.http.post('http://localhost:8080/user_by_token', token).pipe(catchError(this.errorHandler.bind(this)), tap(result => {\n      if (this.isUserPresent(result)) this.sessionService.setUser(result);\n    }));\n  }\n  updateTokenWithRememberMeFlag(token, rememberMe) {\n    if (rememberMe) this.updateTokenGlobally(token);else this.updateTokenInSession(token);\n  }\n  updateTokenInSession(token) {\n    this.sessionService.saveTokenToSessionStorage(token);\n  }\n  updateTokenGlobally(token) {\n    this.sessionService.saveTokenToSessionStorage(token);\n    this.sessionService.saveTokenToLocalStorage(token);\n  }\n  updateTokenWhereItWasSet(token) {\n    this.sessionService.updateTokenWhereItWasSet(token);\n  }\n  errorHandler(error) {\n    this.errorService.handle(error.message);\n    return throwError(() => error.message);\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ErrorService), i0.ɵɵinject(i3.SessionService));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","tap","throwError","UserService","constructor","http","errorService","sessionService","isUserPresent","user","id","userRole","firstName","lastName","email","phoneNumber","forms","gender","getAll","token","getToken","post","pipe","errorHandler","bind","getUserById","path","register","password","userWithPassword","result","success","updateTokenInSession","updateCurrentUser","tryRegister","login","rememberMe","loginData","updateTokenWithRememberMeFlag","logOut","removeTokenFromEverywhere","resetUser","changePassword","oldPassword","newPassword","tokenWithChangePasswordData","updateTokenWhereItWasSet","saveUser","tokenWithUser","setUser","updateTokenGlobally","saveTokenToSessionStorage","saveTokenToLocalStorage","error","handle","message","i0","ɵɵinject","i1","HttpClient","i2","ErrorService","i3","SessionService","factory","ɵfac","providedIn"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\service\\user.service.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {HttpClient, HttpErrorResponse} from \"@angular/common/http\";\r\nimport {catchError, Observable, tap, throwError} from \"rxjs\";\r\nimport {User} from \"../entity/User\";\r\nimport {ErrorService} from \"./error.service\";\r\nimport {AuthorizeResult} from \"../additional/AuthorizeResult\";\r\nimport {SessionService} from \"./session.service\";\r\nimport {Topic} from \"../entity/Topic\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n  private http: HttpClient;\r\n  private errorService: ErrorService;\r\n  private sessionService: SessionService;\r\n\r\n  constructor(http: HttpClient,\r\n              errorService: ErrorService,\r\n              sessionService: SessionService) {\r\n    this.http = http;\r\n    this.errorService = errorService;\r\n    this.sessionService = sessionService;\r\n  }\r\n\r\n  isUserPresent(user: User): boolean {\r\n    return !!user && !!user.id && !!user.userRole && !!user.firstName && !!user.lastName &&\r\n      !!user.email && !!user.phoneNumber && !!user.forms && !!user.gender;\r\n  }\r\n\r\n  getAll() : Observable<User[]> {\r\n    let token = this.sessionService.getToken();\r\n    return this.http.post<User[]>('http://localhost:8080/users', token)\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this)),\r\n      )\r\n  }\r\n\r\n  getUserById(id: bigint) : Observable<User> {\r\n    let token = this.sessionService.getToken();\r\n    let path = 'http://localhost:8080/users/' + id;\r\n    return this.http.post<User>(path, token)\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this)),\r\n      )\r\n  }\r\n\r\n  register(user: User, password: string): Observable<AuthorizeResult> {\r\n    const userWithPassword = {user: user, password: password};\r\n\r\n    return this.http.post<AuthorizeResult>('http://localhost:8080/register', userWithPassword)\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this)),\r\n        tap(result => {\r\n          if (result.success) {\r\n            this.updateTokenInSession(result.token);\r\n            this.updateCurrentUser();\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  tryRegister(user: User, password: string): Observable<AuthorizeResult> {\r\n    const userWithPassword = {user: user, password: password};\r\n\r\n    return this.http.post<AuthorizeResult>('http://localhost:8080/try_register', userWithPassword)\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this))\r\n      );\r\n  }\r\n\r\n  login(email: string, password: string, rememberMe: boolean): Observable<AuthorizeResult> {\r\n    const loginData = {email: email, password: password};\r\n\r\n    return this.http.post<AuthorizeResult>('http://localhost:8080/login', loginData)\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this)),\r\n        tap(result => {\r\n          if (result.success) {\r\n            this.updateTokenWithRememberMeFlag(result.token, rememberMe);\r\n            this.updateCurrentUser();\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  logOut() {\r\n    this.sessionService.removeTokenFromEverywhere();\r\n    this.sessionService.resetUser();\r\n  }\r\n\r\n  changePassword(oldPassword: string, newPassword: string): Observable<AuthorizeResult> {\r\n    let token = this.sessionService.getToken();\r\n    const tokenWithChangePasswordData = {\r\n      token: token, oldPassword: oldPassword, newPassword: newPassword\r\n    };\r\n\r\n    return this.http.post<AuthorizeResult>('http://localhost:8080/change_password', tokenWithChangePasswordData)\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this)),\r\n        tap(result => {\r\n          if (result.success) {\r\n            this.updateTokenWhereItWasSet(result.token);\r\n            this.updateCurrentUser();\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  saveUser(user: User): Observable<AuthorizeResult> {\r\n    let token = this.sessionService.getToken();\r\n    const tokenWithUser = {\r\n      token: token, user: user\r\n    };\r\n\r\n    return this.http.post<AuthorizeResult>('http://localhost:8080/save_user', tokenWithUser)\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this)),\r\n        tap(result => {\r\n          if (result.success) {\r\n            this.updateTokenWhereItWasSet(result.token);\r\n            this.updateCurrentUser();\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  updateCurrentUser(): Observable<User> {\r\n    let token = this.sessionService.getToken();\r\n    return this.http.post<User>('http://localhost:8080/user_by_token', token)\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this)),\r\n        tap(result => {\r\n          if (this.isUserPresent(result))\r\n            this.sessionService.setUser(result);\r\n        })\r\n      );\r\n  }\r\n\r\n  private updateTokenWithRememberMeFlag(token: string, rememberMe: boolean) {\r\n    if (rememberMe)\r\n      this.updateTokenGlobally(token);\r\n    else\r\n      this.updateTokenInSession(token);\r\n  }\r\n\r\n  private updateTokenInSession(token: string) {\r\n    this.sessionService.saveTokenToSessionStorage(token);\r\n  }\r\n\r\n  private updateTokenGlobally(token: string) {\r\n    this.sessionService.saveTokenToSessionStorage(token);\r\n    this.sessionService.saveTokenToLocalStorage(token);\r\n  }\r\n\r\n  private updateTokenWhereItWasSet(token: string) {\r\n    this.sessionService.updateTokenWhereItWasSet(token);\r\n  }\r\n\r\n  private errorHandler(error: HttpErrorResponse) {\r\n    this.errorService.handle(error.message);\r\n    return throwError(() => error.message);\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}