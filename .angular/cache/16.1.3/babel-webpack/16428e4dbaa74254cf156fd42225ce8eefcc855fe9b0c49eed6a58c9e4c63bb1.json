{"ast":null,"code":"import { catchError, map, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./error.service\";\nimport * as i3 from \"./session.service\";\nexport let FormService = /*#__PURE__*/(() => {\n  class FormService {\n    constructor(http, errorService, sessionService) {\n      this.http = http;\n      this.errorService = errorService;\n      this.sessionService = sessionService;\n    }\n    isFormPresent(form) {\n      return !!form && !!form.id && !!form.name && !!form.user && !!form.topic;\n    }\n    getAll() {\n      return this.http.get('http://localhost:8090/forms').pipe(catchError(this.errorHandler.bind(this)), map(forms => {\n        return forms.map(form => {\n          form.topic.shownName = form.topic.name;\n          return form;\n        });\n      }));\n    }\n    getFormsByTopicId(topicId) {\n      let path = 'http://localhost:8090/forms/topic_' + topicId;\n      return this.http.get(path).pipe(catchError(this.errorHandler.bind(this)), map(forms => {\n        return forms.map(form => {\n          form.topic.shownName = form.topic.name;\n          return form;\n        });\n      }));\n    }\n    getFormsByUserId(userId) {\n      let token = this.sessionService.getToken();\n      let path = 'http://localhost:8090/forms/user_' + userId;\n      return this.http.post(path, token).pipe(catchError(this.errorHandler.bind(this)), map(forms => {\n        return forms.map(form => {\n          form.topic.shownName = form.topic.name;\n          return form;\n        });\n      }));\n    }\n    getFormById(id) {\n      let token = this.sessionService.getToken();\n      let path = 'http://localhost:8090/forms/' + id;\n      return this.http.post(path, token).pipe(catchError(this.errorHandler.bind(this)), map(form => {\n        form.topic.shownName = form.topic.name;\n        return form;\n      }));\n    }\n    saveForm(form) {\n      let token = this.sessionService.getToken();\n      let tokenWithForm = {\n        token: token,\n        form: form\n      };\n      return this.http.post('http://localhost:8090/save_form', tokenWithForm).pipe(catchError(this.errorHandler.bind(this)));\n    }\n    deleteForm(form) {\n      let token = this.sessionService.getToken();\n      let tokenWithForm = {\n        token: token,\n        form: form\n      };\n      return this.http.post('http://localhost:8090/delete_form', tokenWithForm).pipe(catchError(this.errorHandler.bind(this)));\n    }\n    errorHandler(error) {\n      this.errorService.handle(error.message);\n      return throwError(() => error.message);\n    }\n  }\n  FormService.ɵfac = function FormService_Factory(t) {\n    return new (t || FormService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ErrorService), i0.ɵɵinject(i3.SessionService));\n  };\n  FormService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FormService,\n    factory: FormService.ɵfac,\n    providedIn: 'root'\n  });\n  return FormService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}