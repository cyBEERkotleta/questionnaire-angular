{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nfunction OptionListComponent_div_0_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵelement(1, \"input\", 6);\n    i0.ɵɵelementStart(2, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function OptionListComponent_div_0_div_3_Template_button_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const i_r3 = restoredCtx.index;\n      const ctx_r4 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r4.removeFieldOption(i_r3));\n    });\n    i0.ɵɵtext(3, \"Remove\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const i_r3 = ctx.index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"formControlName\", i_r3);\n    i0.ɵɵpropertyInterpolate1(\"placeholder\", \"\\u0412\\u0430\\u0440\\u0438\\u0430\\u043D\\u0442 \", i_r3 + 1, \"\");\n  }\n}\nfunction OptionListComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 1)(2, \"form\", 2);\n    i0.ɵɵtemplate(3, OptionListComponent_div_0_div_3_Template, 4, 2, \"div\", 3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function OptionListComponent_div_0_Template_button_click_4_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.addFieldOption());\n    });\n    i0.ɵɵtext(5, \"Add Option\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.fieldOptionsForm);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.getFormArray().controls);\n  }\n}\nexport class OptionListComponent {\n  constructor(formBuilder) {\n    this.fieldOptions = [];\n    this.visible = false;\n    this.fieldOptionsChange = new EventEmitter();\n    /*this.fieldOptionsForm = new FormGroup({\n      options: new FormArray([])\n    });*/\n    this.formBuilder = formBuilder;\n    this.fieldOptionsForm = this.formBuilder.group({\n      options: this.formBuilder.array([])\n    });\n  }\n  ngOnInit() {\n    this.populateFieldOptionsForm();\n  }\n  getFormArray() {\n    return this.fieldOptionsForm.get('options');\n  }\n  populateFieldOptionsForm() {\n    const optionsArray = this.getFormArray();\n    optionsArray.clear();\n    if (!this.fieldOptions) return;\n    /*this.fieldOptions.forEach(option => {\n      optionsArray.push(new FormControl(option.text));\n    });*/\n    /*this.fieldOptions.forEach(option => {\n      optionsArray.push(\n        this.formBuilder.group({\n          text: option.text\n        })\n      );\n    });*/\n  }\n\n  addFieldOption() {\n    const optionsArray = this.getFormArray();\n    /*optionsArray.push(new FormControl(''));*/\n    optionsArray.push(this.formBuilder.group({\n      text: ''\n    }));\n    this.updateFieldOptions();\n  }\n  removeFieldOption(index) {\n    const optionsArray = this.getFormArray();\n    optionsArray.removeAt(index);\n    this.updateFieldOptions();\n  }\n  updateFieldOptions() {\n    const optionsArray = this.getFormArray();\n    /*this.fieldOptions = optionsArray.value.map((text: string, index: number) => {\n      return {\n        id: (!this.fieldOptions || this.fieldOptions.length <= index) ? null : this.fieldOptions[index].id,\n        text,\n        shownName: text\n      };\n    });*/\n    this.fieldOptions = optionsArray.value.map(option => {\n      return {\n        id: option.id,\n        text: option.text,\n        shownName: option.text\n      };\n    });\n    this.fieldOptionsChange.emit(this.fieldOptions);\n    console.log('fieldOptions:');\n    this.fieldOptions.forEach(option => console.log(option.text + ', ' + option.id));\n  }\n}\nOptionListComponent.ɵfac = function OptionListComponent_Factory(t) {\n  return new (t || OptionListComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nOptionListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: OptionListComponent,\n  selectors: [[\"app-option-list\"]],\n  inputs: {\n    fieldOptions: \"fieldOptions\",\n    visible: \"visible\"\n  },\n  outputs: {\n    fieldOptionsChange: \"fieldOptionsChange\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[4, \"ngIf\"], [1, \"options-container\"], [3, \"formGroup\"], [\"class\", \"option-row\", \"formGroupName\", \"options\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [\"formGroupName\", \"options\", 1, \"option-row\"], [\"type\", \"text\", 1, \"form-control\", 3, \"formControlName\", \"placeholder\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", 3, \"click\"]],\n  template: function OptionListComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, OptionListComponent_div_0_Template, 6, 2, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.visible);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["EventEmitter","i0","ɵɵelementStart","ɵɵelement","ɵɵlistener","OptionListComponent_div_0_div_3_Template_button_click_2_listener","restoredCtx","ɵɵrestoreView","_r5","i_r3","index","ctx_r4","ɵɵnextContext","ɵɵresetView","removeFieldOption","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵpropertyInterpolate","ɵɵpropertyInterpolate1","ɵɵtemplate","OptionListComponent_div_0_div_3_Template","OptionListComponent_div_0_Template_button_click_4_listener","_r7","ctx_r6","addFieldOption","ɵɵproperty","ctx_r0","fieldOptionsForm","getFormArray","controls","OptionListComponent","constructor","formBuilder","fieldOptions","visible","fieldOptionsChange","group","options","array","ngOnInit","populateFieldOptionsForm","get","optionsArray","clear","push","text","updateFieldOptions","removeAt","value","map","option","id","shownName","emit","console","log","forEach","ɵɵdirectiveInject","i1","FormBuilder","selectors","inputs","outputs","decls","vars","consts","template","OptionListComponent_Template","rf","ctx","OptionListComponent_div_0_Template"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\components\\option-list\\option-list.component.ts","C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\components\\option-list\\option-list.component.html"],"sourcesContent":["import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {FieldOption} from \"../../entity/FieldOption\";\nimport {FormArray, FormBuilder, FormControl, FormGroup} from \"@angular/forms\";\n\n@Component({\n  selector: 'app-option-list',\n  templateUrl: './option-list.component.html',\n  styleUrls: ['./option-list.component.css']\n})\nexport class OptionListComponent implements OnInit {\n  @Input() fieldOptions: FieldOption[] = [];\n  @Input() visible: boolean = false;\n\n  @Output() fieldOptionsChange = new EventEmitter<FieldOption[]>();\n\n  fieldOptionsForm: FormGroup;\n\n  private formBuilder: FormBuilder;\n\n  constructor(formBuilder: FormBuilder) {\n    /*this.fieldOptionsForm = new FormGroup({\n      options: new FormArray([])\n    });*/\n    this.formBuilder = formBuilder;\n\n    this.fieldOptionsForm = this.formBuilder.group({\n      options: this.formBuilder.array([])\n    });\n  }\n\n  ngOnInit() {\n    this.populateFieldOptionsForm();\n  }\n\n  getFormArray(): FormArray {\n    return this.fieldOptionsForm.get('options') as FormArray;\n  }\n\n  private populateFieldOptionsForm() {\n    const optionsArray = this.getFormArray();\n    optionsArray.clear();\n\n    if (!this.fieldOptions)\n      return;\n\n    /*this.fieldOptions.forEach(option => {\n      optionsArray.push(new FormControl(option.text));\n    });*/\n    /*this.fieldOptions.forEach(option => {\n      optionsArray.push(\n        this.formBuilder.group({\n          text: option.text\n        })\n      );\n    });*/\n  }\n\n  addFieldOption() {\n    const optionsArray = this.getFormArray();\n    /*optionsArray.push(new FormControl(''));*/\n    optionsArray.push(\n      this.formBuilder.group({\n        text: ''\n      })\n    );\n\n    this.updateFieldOptions();\n  }\n\n  removeFieldOption(index: number) {\n    const optionsArray = this.getFormArray();\n    optionsArray.removeAt(index);\n    this.updateFieldOptions();\n  }\n\n  updateFieldOptions() {\n    const optionsArray = this.getFormArray();\n    /*this.fieldOptions = optionsArray.value.map((text: string, index: number) => {\n      return {\n        id: (!this.fieldOptions || this.fieldOptions.length <= index) ? null : this.fieldOptions[index].id,\n        text,\n        shownName: text\n      };\n    });*/\n\n    this.fieldOptions = optionsArray.value.map((option: FieldOption) => {\n      return {\n        id: option.id,\n        text: option.text,\n        shownName: option.text\n      };\n    });\n\n    this.fieldOptionsChange.emit(this.fieldOptions);\n\n    console.log('fieldOptions:');\n    this.fieldOptions.forEach(option => console.log(option.text + ', ' + option.id));\n  }\n}\n","<div *ngIf=\"visible\">\n  <div class=\"options-container\">\n    <form [formGroup]=\"fieldOptionsForm\">\n      <div *ngFor=\"let optionCtrl of getFormArray().controls; let i = index\" class=\"option-row\" formGroupName=\"options\">\n        <input type=\"text\" formControlName=\"{{i}}\" class=\"form-control\" placeholder=\"Вариант {{i + 1}}\">\n        <button type=\"button\" class=\"btn btn-danger\" (click)=\"removeFieldOption(i)\">Remove</button>\n      </div>\n    </form>\n  </div>\n  <button type=\"button\" class=\"btn btn-primary\" (click)=\"addFieldOption()\">Add Option</button>\n</div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}