{"ast":null,"code":"import { catchError, tap, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./error.service\";\nexport class FormService {\n  constructor(http, errorService) {\n    this.http = http;\n    this.errorService = errorService;\n  }\n  getFormsByTopicId(topicId) {\n    let path = 'http://localhost:8080/forms/topic_' + topicId;\n    return this.http.get(path).pipe(catchError(this.errorHandler.bind(this)), tap(forms => this.forms = forms));\n  }\n  getFormsByUserId(userId) {\n    let path = 'http://localhost:8080/forms/user_' + userId;\n    return this.http.get(path).pipe(catchError(this.errorHandler.bind(this)), tap(forms => this.forms = forms));\n  }\n  getFormById(id) {\n    let path = 'http://localhost:8080/forms/' + id;\n    return this.http.get(path).pipe(catchError(this.errorHandler.bind(this)), tap(form => this.form = form));\n  }\n  saveForm(form) {\n    return this.http.post('http://localhost:8080/save_form', form).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  deleteFormById(id) {\n    return this.http.post('http://localhost:8080/delete_form', id).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  errorHandler(error) {\n    this.errorService.handle(error.message);\n    return throwError(() => error.message);\n  }\n}\nFormService.ɵfac = function FormService_Factory(t) {\n  return new (t || FormService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ErrorService));\n};\nFormService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FormService,\n  factory: FormService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","tap","throwError","FormService","constructor","http","errorService","getFormsByTopicId","topicId","path","get","pipe","errorHandler","bind","forms","getFormsByUserId","userId","getFormById","id","form","saveForm","post","deleteFormById","error","handle","message","i0","ɵɵinject","i1","HttpClient","i2","ErrorService","factory","ɵfac","providedIn"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\service\\form.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient, HttpErrorResponse} from \"@angular/common/http\";\nimport {ErrorService} from \"./error.service\";\nimport {catchError, Observable, tap, throwError} from \"rxjs\";\nimport {RequestResult} from \"../additional/RequestResult\";\nimport {Form} from \"../entity/Form\";\nimport {Topic} from \"../entity/Topic\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormService {\n  private http: HttpClient;\n  private errorService: ErrorService;\n\n  forms: Form[];\n  form: Form;\n\n  constructor(http: HttpClient, errorService: ErrorService) {\n    this.http = http;\n    this.errorService = errorService;\n  }\n\n  getFormsByTopicId(topicId: bigint) : Observable<Form[]> {\n    let path = 'http://localhost:8080/forms/topic_' + topicId;\n    return this.http.get<Form[]>(path)\n      .pipe(\n        catchError(this.errorHandler.bind(this)),\n        tap(forms => this.forms = forms)\n      )\n  }\n\n  getFormsByUserId(userId: bigint) : Observable<Form[]> {\n    let path = 'http://localhost:8080/forms/user_' + userId;\n    return this.http.get<Form[]>(path)\n      .pipe(\n        catchError(this.errorHandler.bind(this)),\n        tap(forms => this.forms = forms)\n      )\n  }\n\n  getFormById(id: bigint): Observable<Form> {\n    let path = 'http://localhost:8080/forms/' + id;\n    return this.http.get<Form>(path)\n      .pipe(\n        catchError(this.errorHandler.bind(this)),\n        tap(form => this.form = form)\n      );\n  }\n\n  saveForm(form: Form): Observable<RequestResult> {\n    return this.http.post<RequestResult>('http://localhost:8080/save_form', form)\n      .pipe(\n        catchError(this.errorHandler.bind(this)),\n      );\n  }\n\n  deleteFormById(id: bigint): Observable<RequestResult> {\n    return this.http.post<RequestResult>('http://localhost:8080/delete_form', id)\n      .pipe(\n        catchError(this.errorHandler.bind(this)),\n      );\n  }\n\n  private errorHandler(error: HttpErrorResponse) {\n    this.errorService.handle(error.message);\n    return throwError(() => error.message);\n  }\n}\n"],"mappings":"AAGA,SAAQA,UAAU,EAAcC,GAAG,EAAEC,UAAU,QAAO,MAAM;;;;AAQ5D,OAAM,MAAOC,WAAW;EAOtBC,YAAYC,IAAgB,EAAEC,YAA0B;IACtD,IAAI,CAACD,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,YAAY,GAAGA,YAAY;EAClC;EAEAC,iBAAiBA,CAACC,OAAe;IAC/B,IAAIC,IAAI,GAAG,oCAAoC,GAAGD,OAAO;IACzD,OAAO,IAAI,CAACH,IAAI,CAACK,GAAG,CAASD,IAAI,CAAC,CAC/BE,IAAI,CACHX,UAAU,CAAC,IAAI,CAACY,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,EACxCZ,GAAG,CAACa,KAAK,IAAI,IAAI,CAACA,KAAK,GAAGA,KAAK,CAAC,CACjC;EACL;EAEAC,gBAAgBA,CAACC,MAAc;IAC7B,IAAIP,IAAI,GAAG,mCAAmC,GAAGO,MAAM;IACvD,OAAO,IAAI,CAACX,IAAI,CAACK,GAAG,CAASD,IAAI,CAAC,CAC/BE,IAAI,CACHX,UAAU,CAAC,IAAI,CAACY,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,EACxCZ,GAAG,CAACa,KAAK,IAAI,IAAI,CAACA,KAAK,GAAGA,KAAK,CAAC,CACjC;EACL;EAEAG,WAAWA,CAACC,EAAU;IACpB,IAAIT,IAAI,GAAG,8BAA8B,GAAGS,EAAE;IAC9C,OAAO,IAAI,CAACb,IAAI,CAACK,GAAG,CAAOD,IAAI,CAAC,CAC7BE,IAAI,CACHX,UAAU,CAAC,IAAI,CAACY,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,EACxCZ,GAAG,CAACkB,IAAI,IAAI,IAAI,CAACA,IAAI,GAAGA,IAAI,CAAC,CAC9B;EACL;EAEAC,QAAQA,CAACD,IAAU;IACjB,OAAO,IAAI,CAACd,IAAI,CAACgB,IAAI,CAAgB,iCAAiC,EAAEF,IAAI,CAAC,CAC1ER,IAAI,CACHX,UAAU,CAAC,IAAI,CAACY,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CACzC;EACL;EAEAS,cAAcA,CAACJ,EAAU;IACvB,OAAO,IAAI,CAACb,IAAI,CAACgB,IAAI,CAAgB,mCAAmC,EAAEH,EAAE,CAAC,CAC1EP,IAAI,CACHX,UAAU,CAAC,IAAI,CAACY,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CACzC;EACL;EAEQD,YAAYA,CAACW,KAAwB;IAC3C,IAAI,CAACjB,YAAY,CAACkB,MAAM,CAACD,KAAK,CAACE,OAAO,CAAC;IACvC,OAAOvB,UAAU,CAAC,MAAMqB,KAAK,CAACE,OAAO,CAAC;EACxC;;AAxDWtB,WAAW,C;mBAAXA,WAAW,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,YAAA;AAAA;AAAX5B,WAAW,C;SAAXA,WAAW;EAAA6B,OAAA,EAAX7B,WAAW,CAAA8B,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}