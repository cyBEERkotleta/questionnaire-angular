{"ast":null,"code":"import { catchError, map, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./error.service\";\nimport * as i3 from \"./session.service\";\nexport let TopicService = /*#__PURE__*/(() => {\n  class TopicService {\n    constructor(http, errorService, sessionService) {\n      this.http = http;\n      this.errorService = errorService;\n      this.sessionService = sessionService;\n    }\n    isTopicPresent(topic) {\n      return !!topic && !!topic.id && !!topic.name && !!topic.description;\n    }\n    getAll() {\n      return this.http.get('http://localhost:8090/topics').pipe(catchError(this.errorHandler.bind(this)), map(topics => {\n        return topics.map(topic => {\n          topic.shownName = topic.name;\n          return topic;\n        });\n      }));\n    }\n    getTopicById(id) {\n      let path = 'http://localhost:8090/topics/' + id;\n      return this.http.get(path).pipe(catchError(this.errorHandler.bind(this)), map(topic => {\n        topic.shownName = topic.name;\n        return topic;\n      }));\n    }\n    saveTopic(topic) {\n      let token = this.sessionService.getToken();\n      let tokenWithTopic = {\n        token: token,\n        topic: topic\n      };\n      return this.http.post('http://localhost:8090/save_topic', tokenWithTopic).pipe(catchError(this.errorHandler.bind(this)));\n    }\n    deleteTopic(topic) {\n      let token = this.sessionService.getToken();\n      let tokenWithTopic = {\n        token: token,\n        topic: topic\n      };\n      return this.http.post('http://localhost:8090/delete_topic', tokenWithTopic).pipe(catchError(this.errorHandler.bind(this)));\n    }\n    errorHandler(error) {\n      this.errorService.handle(error.message);\n      return throwError(() => error.message);\n    }\n  }\n  TopicService.ɵfac = function TopicService_Factory(t) {\n    return new (t || TopicService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ErrorService), i0.ɵɵinject(i3.SessionService));\n  };\n  TopicService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TopicService,\n    factory: TopicService.ɵfac,\n    providedIn: 'root'\n  });\n  return TopicService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}