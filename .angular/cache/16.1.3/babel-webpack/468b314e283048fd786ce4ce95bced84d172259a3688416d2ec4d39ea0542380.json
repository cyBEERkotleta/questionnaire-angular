{"ast":null,"code":"import { catchError, map, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./error.service\";\nexport let FieldTypeService = /*#__PURE__*/(() => {\n  class FieldTypeService {\n    constructor(http, errorService) {\n      this.typesLoaded = false;\n      this.http = http;\n      this.errorService = errorService;\n      this.initializeTypes();\n    }\n    areTypesEqual(type1, type2) {\n      if (!this.isTypePresent(type1) || !this.isTypePresent(type2)) return false;\n      return type1.id == type2.id && type1.name == type2.name && type1.ableToHaveOptions == type2.ableToHaveOptions;\n    }\n    isTypePresent(type) {\n      return !!type && !!type.id && !!type.name;\n    }\n    initializeTypes() {\n      let dateId = 1;\n      let comboBoxId = 2;\n      let checkBoxId = 3;\n      let radioButtonId = 4;\n      let multiLineText = 5;\n      let singleLineText = 6;\n      this.getAll().subscribe(types => {\n        this.date = types.find(type => type.id == dateId);\n        this.comboBox = types.find(type => type.id == comboBoxId);\n        this.checkBox = types.find(type => type.id == checkBoxId);\n        this.radioButton = types.find(type => type.id == radioButtonId);\n        this.multiLineText = types.find(type => type.id == multiLineText);\n        this.singleLineText = types.find(type => type.id == singleLineText);\n        this.typesLoaded = true;\n      });\n    }\n    getAll() {\n      return this.http.get('http://localhost:8090/field_types').pipe(catchError(this.errorHandler.bind(this)), map(fieldTypes => {\n        return fieldTypes.map(fieldType => {\n          fieldType.shownName = fieldType.name;\n          return fieldType;\n        });\n      }));\n    }\n    errorHandler(error) {\n      this.errorService.handle(error.message);\n      return throwError(() => error.message);\n    }\n  }\n  FieldTypeService.ɵfac = function FieldTypeService_Factory(t) {\n    return new (t || FieldTypeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ErrorService));\n  };\n  FieldTypeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FieldTypeService,\n    factory: FieldTypeService.ɵfac,\n    providedIn: 'root'\n  });\n  return FieldTypeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}