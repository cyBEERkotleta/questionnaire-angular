{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nexport let FlexibleFieldControlComponent = class FlexibleFieldControlComponent {\n  constructor(fieldTypeService) {\n    this.showError = false;\n    this.additionalNote = '';\n    this.fieldTypeService = fieldTypeService;\n  }\n  isSingleLineText() {\n    let type1 = this.field.type;\n    let type2 = this.fieldTypeService.singleLineText;\n    return this.fieldTypeService.areTypesEqual(type1, type2);\n  }\n  isMultiLineText() {\n    let type1 = this.field.type;\n    let type2 = this.fieldTypeService.multiLineText;\n    return this.fieldTypeService.areTypesEqual(type1, type2);\n  }\n  isDate() {\n    let type1 = this.field.type;\n    let type2 = this.fieldTypeService.date;\n    return this.fieldTypeService.areTypesEqual(type1, type2);\n  }\n  isComboBox() {\n    let type1 = this.field.type;\n    let type2 = this.fieldTypeService.comboBox;\n    return this.fieldTypeService.areTypesEqual(type1, type2);\n  }\n  isCheckBox() {\n    let type1 = this.field.type;\n    let type2 = this.fieldTypeService.checkBox;\n    return this.fieldTypeService.areTypesEqual(type1, type2);\n  }\n  isRadioButton() {\n    let type1 = this.field.type;\n    let type2 = this.fieldTypeService.radioButton;\n    return this.fieldTypeService.areTypesEqual(type1, type2);\n  }\n};\n__decorate([Input()], FlexibleFieldControlComponent.prototype, \"field\", void 0);\n__decorate([Input()], FlexibleFieldControlComponent.prototype, \"formElement\", void 0);\n__decorate([Input()], FlexibleFieldControlComponent.prototype, \"showError\", void 0);\n__decorate([Input()], FlexibleFieldControlComponent.prototype, \"additionalNote\", void 0);\nFlexibleFieldControlComponent = __decorate([Component({\n  selector: 'app-flexible-field-control',\n  templateUrl: './flexible-field-control.component.html',\n  styleUrls: ['./flexible-field-control.component.css']\n})], FlexibleFieldControlComponent);","map":{"version":3,"names":["Component","Input","FlexibleFieldControlComponent","constructor","fieldTypeService","showError","additionalNote","isSingleLineText","type1","field","type","type2","singleLineText","areTypesEqual","isMultiLineText","multiLineText","isDate","date","isComboBox","comboBox","isCheckBox","checkBox","isRadioButton","radioButton","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\little-components\\flexible-field-control\\flexible-field-control.component.ts"],"sourcesContent":["import {Component, Input} from '@angular/core';\nimport {FormControl} from \"@angular/forms\";\nimport {Field} from \"../../entity/Field\";\nimport {FieldTypeService} from \"../../service/field-type.service\";\n\n@Component({\n  selector: 'app-flexible-field-control',\n  templateUrl: './flexible-field-control.component.html',\n  styleUrls: ['./flexible-field-control.component.css']\n})\nexport class FlexibleFieldControlComponent {\n  @Input() field: Field;\n  @Input() formElement: FormControl;\n  @Input() showError: boolean = false;\n  @Input() additionalNote: string = '';\n\n  private fieldTypeService: FieldTypeService;\n\n  constructor(fieldTypeService: FieldTypeService) {\n    this.fieldTypeService = fieldTypeService;\n  }\n\n  isSingleLineText() {\n    let type1 = this.field.type;\n    let type2 = this.fieldTypeService.singleLineText;\n    return this.fieldTypeService.areTypesEqual(type1, type2);\n  }\n\n  isMultiLineText() {\n    let type1 = this.field.type;\n    let type2 = this.fieldTypeService.multiLineText;\n    return this.fieldTypeService.areTypesEqual(type1, type2);\n  }\n\n  isDate() {\n    let type1 = this.field.type;\n    let type2 = this.fieldTypeService.date;\n    return this.fieldTypeService.areTypesEqual(type1, type2);\n  }\n\n  isComboBox() {\n    let type1 = this.field.type;\n    let type2 = this.fieldTypeService.comboBox;\n    return this.fieldTypeService.areTypesEqual(type1, type2);\n  }\n\n  isCheckBox() {\n    let type1 = this.field.type;\n    let type2 = this.fieldTypeService.checkBox;\n    return this.fieldTypeService.areTypesEqual(type1, type2);\n  }\n\n  isRadioButton() {\n    let type1 = this.field.type;\n    let type2 = this.fieldTypeService.radioButton;\n    return this.fieldTypeService.areTypesEqual(type1, type2);\n  }\n}\n"],"mappings":";AAAA,SAAQA,SAAS,EAAEC,KAAK,QAAO,eAAe;AAUvC,WAAMC,6BAA6B,GAAnC,MAAMA,6BAA6B;EAQxCC,YAAYC,gBAAkC;IALrC,KAAAC,SAAS,GAAY,KAAK;IAC1B,KAAAC,cAAc,GAAW,EAAE;IAKlC,IAAI,CAACF,gBAAgB,GAAGA,gBAAgB;EAC1C;EAEAG,gBAAgBA,CAAA;IACd,IAAIC,KAAK,GAAG,IAAI,CAACC,KAAK,CAACC,IAAI;IAC3B,IAAIC,KAAK,GAAG,IAAI,CAACP,gBAAgB,CAACQ,cAAc;IAChD,OAAO,IAAI,CAACR,gBAAgB,CAACS,aAAa,CAACL,KAAK,EAAEG,KAAK,CAAC;EAC1D;EAEAG,eAAeA,CAAA;IACb,IAAIN,KAAK,GAAG,IAAI,CAACC,KAAK,CAACC,IAAI;IAC3B,IAAIC,KAAK,GAAG,IAAI,CAACP,gBAAgB,CAACW,aAAa;IAC/C,OAAO,IAAI,CAACX,gBAAgB,CAACS,aAAa,CAACL,KAAK,EAAEG,KAAK,CAAC;EAC1D;EAEAK,MAAMA,CAAA;IACJ,IAAIR,KAAK,GAAG,IAAI,CAACC,KAAK,CAACC,IAAI;IAC3B,IAAIC,KAAK,GAAG,IAAI,CAACP,gBAAgB,CAACa,IAAI;IACtC,OAAO,IAAI,CAACb,gBAAgB,CAACS,aAAa,CAACL,KAAK,EAAEG,KAAK,CAAC;EAC1D;EAEAO,UAAUA,CAAA;IACR,IAAIV,KAAK,GAAG,IAAI,CAACC,KAAK,CAACC,IAAI;IAC3B,IAAIC,KAAK,GAAG,IAAI,CAACP,gBAAgB,CAACe,QAAQ;IAC1C,OAAO,IAAI,CAACf,gBAAgB,CAACS,aAAa,CAACL,KAAK,EAAEG,KAAK,CAAC;EAC1D;EAEAS,UAAUA,CAAA;IACR,IAAIZ,KAAK,GAAG,IAAI,CAACC,KAAK,CAACC,IAAI;IAC3B,IAAIC,KAAK,GAAG,IAAI,CAACP,gBAAgB,CAACiB,QAAQ;IAC1C,OAAO,IAAI,CAACjB,gBAAgB,CAACS,aAAa,CAACL,KAAK,EAAEG,KAAK,CAAC;EAC1D;EAEAW,aAAaA,CAAA;IACX,IAAId,KAAK,GAAG,IAAI,CAACC,KAAK,CAACC,IAAI;IAC3B,IAAIC,KAAK,GAAG,IAAI,CAACP,gBAAgB,CAACmB,WAAW;IAC7C,OAAO,IAAI,CAACnB,gBAAgB,CAACS,aAAa,CAACL,KAAK,EAAEG,KAAK,CAAC;EAC1D;CACD;AA9CUa,UAAA,EAARvB,KAAK,EAAE,C,2DAAc;AACbuB,UAAA,EAARvB,KAAK,EAAE,C,iEAA0B;AACzBuB,UAAA,EAARvB,KAAK,EAAE,C,+DAA4B;AAC3BuB,UAAA,EAARvB,KAAK,EAAE,C,oEAA6B;AAJ1BC,6BAA6B,GAAAsB,UAAA,EALzCxB,SAAS,CAAC;EACTyB,QAAQ,EAAE,4BAA4B;EACtCC,WAAW,EAAE,yCAAyC;EACtDC,SAAS,EAAE,CAAC,wCAAwC;CACrD,CAAC,C,EACWzB,6BAA6B,CA+CzC"},"metadata":{},"sourceType":"module","externalDependencies":[]}