{"ast":null,"code":"import { catchError, map, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./error.service\";\nexport class FieldTypeService {\n  constructor(http, errorService) {\n    this.typesLoaded = false;\n    this.http = http;\n    this.errorService = errorService;\n    this.initializeTypes();\n  }\n  areTypesEqual(type1, type2) {\n    if (!this.isTypePresent(type1) || !this.isTypePresent(type2)) return false;\n    return type1.id == type2.id && type1.name == type2.name && type1.ableToHaveOptions == type2.ableToHaveOptions;\n  }\n  isTypePresent(type) {\n    return !!type && !!type.id && !!type.name;\n  }\n  initializeTypes() {\n    let dateId = 1;\n    let comboBoxId = 2;\n    let checkBoxId = 3;\n    let radioButtonId = 4;\n    let multiLineText = 5;\n    let singleLineText = 6;\n    this.getAll().subscribe(types => {\n      this.date = types.find(type => type.id == dateId);\n      this.comboBox = types.find(type => type.id == comboBoxId);\n      this.checkBox = types.find(type => type.id == checkBoxId);\n      this.radioButton = types.find(type => type.id == radioButtonId);\n      this.multiLineText = types.find(type => type.id == multiLineText);\n      this.singleLineText = types.find(type => type.id == singleLineText);\n      this.typesLoaded = true;\n    });\n  }\n  getAll() {\n    return this.http.get('http://localhost:8080/field_types').pipe(catchError(this.errorHandler.bind(this)), map(fieldTypes => {\n      return fieldTypes.map(fieldType => {\n        fieldType.shownName = fieldType.name;\n        return fieldType;\n      });\n    }));\n  }\n  errorHandler(error) {\n    this.errorService.handle(error.message);\n    return throwError(() => error.message);\n  }\n}\nFieldTypeService.ɵfac = function FieldTypeService_Factory(t) {\n  return new (t || FieldTypeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ErrorService));\n};\nFieldTypeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FieldTypeService,\n  factory: FieldTypeService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","map","throwError","FieldTypeService","constructor","http","errorService","typesLoaded","initializeTypes","areTypesEqual","type1","type2","isTypePresent","id","name","ableToHaveOptions","type","dateId","comboBoxId","checkBoxId","radioButtonId","multiLineText","singleLineText","getAll","subscribe","types","date","find","comboBox","checkBox","radioButton","get","pipe","errorHandler","bind","fieldTypes","fieldType","shownName","error","handle","message","i0","ɵɵinject","i1","HttpClient","i2","ErrorService","factory","ɵfac","providedIn"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\service\\field-type.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {HttpClient, HttpErrorResponse} from \"@angular/common/http\";\r\nimport {ErrorService} from \"./error.service\";\r\nimport {catchError, map, Observable, throwError} from \"rxjs\";\r\nimport {FieldType} from \"../entity/FieldType\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FieldTypeService {\r\n  private http: HttpClient;\r\n  private errorService: ErrorService;\r\n\r\n  date: FieldType;\r\n  comboBox: FieldType;\r\n  checkBox: FieldType;\r\n  radioButton: FieldType;\r\n  multiLineText: FieldType;\r\n  singleLineText: FieldType;\r\n\r\n  typesLoaded = false;\r\n\r\n  constructor(http: HttpClient,\r\n              errorService: ErrorService) {\r\n    this.http = http;\r\n    this.errorService = errorService;\r\n\r\n    this.initializeTypes();\r\n  }\r\n\r\n  areTypesEqual(type1: FieldType, type2: FieldType): boolean {\r\n    if (!this.isTypePresent(type1) || !this.isTypePresent(type2))\r\n      return false;\r\n\r\n    return type1.id == type2.id && type1.name == type2.name &&\r\n      type1.ableToHaveOptions == type2.ableToHaveOptions;\r\n  }\r\n\r\n  isTypePresent(type: FieldType): boolean {\r\n    return !!type && !!type.id && !!type.name;\r\n  }\r\n\r\n  private initializeTypes() {\r\n    let dateId = 1;\r\n    let comboBoxId = 2;\r\n    let checkBoxId = 3;\r\n    let radioButtonId = 4;\r\n    let multiLineText = 5;\r\n    let singleLineText = 6;\r\n\r\n    this.getAll()\r\n      .subscribe(types => {\r\n        this.date = types.find(type => type.id == dateId);\r\n        this.comboBox = types.find(type => type.id == comboBoxId);\r\n        this.checkBox = types.find(type => type.id == checkBoxId);\r\n        this.radioButton = types.find(type => type.id == radioButtonId);\r\n        this.multiLineText = types.find(type => type.id == multiLineText);\r\n        this.singleLineText = types.find(type => type.id == singleLineText);\r\n\r\n        this.typesLoaded = true;\r\n      });\r\n  }\r\n\r\n  getAll() : Observable<FieldType[]> {\r\n    return this.http.get<FieldType[]>('http://localhost:8080/field_types')\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this)),\r\n        map(fieldTypes => {\r\n          return fieldTypes.map(fieldType => {\r\n            fieldType.shownName = fieldType.name;\r\n            return fieldType;\r\n          });\r\n        })\r\n      );\r\n  }\r\n\r\n  private errorHandler(error: HttpErrorResponse) {\r\n    this.errorService.handle(error.message);\r\n    return throwError(() => error.message);\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}