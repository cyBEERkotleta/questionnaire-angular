{"ast":null,"code":"import { catchError, tap, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./error.service\";\nexport class UserService {\n  constructor(http, errorService) {\n    this.users = [];\n    this.http = http;\n    this.errorService = errorService;\n  }\n  getAll() {\n    return this.http.get('http://localhost:8080/users').pipe(catchError(this.errorHandler.bind(this)), tap(users => this.users = users));\n  }\n  register(user, password) {\n    const userWithPassword = {\n      user: user,\n      password: password\n    };\n    return this.http.post('http://localhost:8080/register', userWithPassword).pipe(catchError(this.errorHandler.bind(this)), tap(result => this.getAll().subscribe()));\n  }\n  login(email, password) {\n    const loginData = {\n      email: email,\n      password: password\n    };\n    return this.http.post('http://localhost:8080/login', loginData).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  changePassword(email, oldPassword, newPassword) {\n    const changePasswordData = {\n      email: email,\n      oldPassword: oldPassword,\n      newPassword: newPassword\n    };\n    return this.http.post('http://localhost:8080/change_password', changePasswordData).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  errorHandler(error) {\n    this.errorService.handle(error.message);\n    return throwError(() => error.message);\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ErrorService));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","tap","throwError","UserService","constructor","http","errorService","users","getAll","get","pipe","errorHandler","bind","register","user","password","userWithPassword","post","result","subscribe","login","email","loginData","changePassword","oldPassword","newPassword","changePasswordData","error","handle","message","i0","ɵɵinject","i1","HttpClient","i2","ErrorService","factory","ɵfac","providedIn"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\service\\user.service.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {HttpClient, HttpErrorResponse} from \"@angular/common/http\";\r\nimport {catchError, Observable, tap, throwError} from \"rxjs\";\r\nimport {User} from \"../entity/User\";\r\nimport {ErrorService} from \"./error.service\";\r\nimport {RequestResult} from \"../additional/RequestResult\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n  private http: HttpClient;\r\n  private errorService: ErrorService;\r\n\r\n  users: User[] = [];\r\n\r\n  constructor(http: HttpClient, errorService: ErrorService) {\r\n    this.http = http;\r\n    this.errorService = errorService;\r\n  }\r\n\r\n  getAll() : Observable<User[]> {\r\n    return this.http.get<User[]>('http://localhost:8080/users')\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this)),\r\n        tap(users => this.users = users)\r\n      )\r\n  }\r\n\r\n  register(user: User, password: string): Observable<RequestResult> {\r\n    const userWithPassword = {user: user, password: password};\r\n\r\n    return this.http.post<RequestResult>('http://localhost:8080/register', userWithPassword)\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this)),\r\n        tap(result => this.getAll().subscribe())\r\n      );\r\n  }\r\n\r\n  login(email: string, password: string): Observable<RequestResult> {\r\n    const loginData = {email: email, password: password};\r\n\r\n    return this.http.post<RequestResult>('http://localhost:8080/login', loginData)\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this))\r\n      );\r\n  }\r\n\r\n  changePassword(email: string, oldPassword: string, newPassword: string): Observable<RequestResult> {\r\n    const changePasswordData = {email: email, oldPassword: oldPassword, newPassword: newPassword};\r\n\r\n    return this.http.post<RequestResult>('http://localhost:8080/change_password', changePasswordData)\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this))\r\n      );\r\n  }\r\n\r\n  private errorHandler(error: HttpErrorResponse) {\r\n    this.errorService.handle(error.message);\r\n    return throwError(() => error.message);\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAAQA,UAAU,EAAcC,GAAG,EAAEC,UAAU,QAAO,MAAM;;;;AAQ5D,OAAM,MAAOC,WAAW;EAMtBC,YAAYC,IAAgB,EAAEC,YAA0B;IAFxD,KAAAC,KAAK,GAAW,EAAE;IAGhB,IAAI,CAACF,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,YAAY,GAAGA,YAAY;EAClC;EAEAE,MAAMA,CAAA;IACJ,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAS,6BAA6B,CAAC,CACxDC,IAAI,CACHV,UAAU,CAAC,IAAI,CAACW,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,EACxCX,GAAG,CAACM,KAAK,IAAI,IAAI,CAACA,KAAK,GAAGA,KAAK,CAAC,CACjC;EACL;EAEAM,QAAQA,CAACC,IAAU,EAAEC,QAAgB;IACnC,MAAMC,gBAAgB,GAAG;MAACF,IAAI,EAAEA,IAAI;MAAEC,QAAQ,EAAEA;IAAQ,CAAC;IAEzD,OAAO,IAAI,CAACV,IAAI,CAACY,IAAI,CAAgB,gCAAgC,EAAED,gBAAgB,CAAC,CACrFN,IAAI,CACHV,UAAU,CAAC,IAAI,CAACW,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,EACxCX,GAAG,CAACiB,MAAM,IAAI,IAAI,CAACV,MAAM,EAAE,CAACW,SAAS,EAAE,CAAC,CACzC;EACL;EAEAC,KAAKA,CAACC,KAAa,EAAEN,QAAgB;IACnC,MAAMO,SAAS,GAAG;MAACD,KAAK,EAAEA,KAAK;MAAEN,QAAQ,EAAEA;IAAQ,CAAC;IAEpD,OAAO,IAAI,CAACV,IAAI,CAACY,IAAI,CAAgB,6BAA6B,EAAEK,SAAS,CAAC,CAC3EZ,IAAI,CACHV,UAAU,CAAC,IAAI,CAACW,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CACzC;EACL;EAEAW,cAAcA,CAACF,KAAa,EAAEG,WAAmB,EAAEC,WAAmB;IACpE,MAAMC,kBAAkB,GAAG;MAACL,KAAK,EAAEA,KAAK;MAAEG,WAAW,EAAEA,WAAW;MAAEC,WAAW,EAAEA;IAAW,CAAC;IAE7F,OAAO,IAAI,CAACpB,IAAI,CAACY,IAAI,CAAgB,uCAAuC,EAAES,kBAAkB,CAAC,CAC9FhB,IAAI,CACHV,UAAU,CAAC,IAAI,CAACW,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CACzC;EACL;EAEQD,YAAYA,CAACgB,KAAwB;IAC3C,IAAI,CAACrB,YAAY,CAACsB,MAAM,CAACD,KAAK,CAACE,OAAO,CAAC;IACvC,OAAO3B,UAAU,CAAC,MAAMyB,KAAK,CAACE,OAAO,CAAC;EACxC;;AAlDW1B,WAAW,C;mBAAXA,WAAW,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,YAAA;AAAA;AAAXhC,WAAW,C;SAAXA,WAAW;EAAAiC,OAAA,EAAXjC,WAAW,CAAAkC,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}