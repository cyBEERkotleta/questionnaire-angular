{"ast":null,"code":"import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../service/user.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"../../little-components/error-paragraph/error-paragraph.component\";\nimport * as i6 from \"../../little-components/text-field-password/text-field-password.component\";\nfunction RestorePasswordComponent_app_error_paragraph_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-error-paragraph\", 6);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"errorMessage\", ctx_r0.globalError);\n  }\n}\nexport let RestorePasswordComponent = /*#__PURE__*/(() => {\n  class RestorePasswordComponent {\n    constructor(activatedRoute, userService, router) {\n      this.showAllErrors = false;\n      this.globalError = '';\n      this.form = new FormGroup({\n        newPassword: new FormControl('', [Validators.required, Validators.minLength(8), Validators.maxLength(30)]),\n        confirmNewPassword: new FormControl('', [Validators.required, Validators.minLength(8), Validators.maxLength(30)])\n      });\n      this.activatedRoute = activatedRoute;\n      this.userService = userService;\n      this.router = router;\n    }\n    ngOnDestroy() {\n      if (this.subscriptionParams) this.subscriptionParams.unsubscribe();\n      if (this.subscriptionRestore) this.subscriptionRestore.unsubscribe();\n    }\n    isGlobalErrorSet() {\n      return this.globalError != '';\n    }\n    submit() {\n      if (this.anyErrorExists()) return;\n      this.changePassword();\n    }\n    anyErrorExists() {\n      this.resetGlobalError();\n      if (this.isAnyErrorInFields()) {\n        this.showAllErrors = true;\n        return true;\n      }\n      return false;\n    }\n    changePassword() {\n      let newPassword = this.getNewPasswordFromField();\n      this.subscriptionParams = this.activatedRoute.queryParams.subscribe(params => {\n        this.token = params['code'];\n        this.subscriptionRestore = this.userService.restorePassword(this.token, newPassword).subscribe(result => {\n          console.log(result);\n          if (result.success) {\n            this.doTransferToSuccessPage();\n          } else {\n            this.globalError = result.message;\n          }\n        });\n      });\n    }\n    resetGlobalError() {\n      this.globalError = '';\n    }\n    getNewPasswordFromField() {\n      return this.form.controls.newPassword.getRawValue();\n    }\n    getConfirmNewPasswordFromField() {\n      return this.form.controls.confirmNewPassword.getRawValue();\n    }\n    isAnyErrorInFields() {\n      let newPassword = this.getNewPasswordFromField();\n      let confirmNewPassword = this.getConfirmNewPasswordFromField();\n      if (newPassword != confirmNewPassword) {\n        this.globalError = 'Новый пароль и его подтверждение не совпадают';\n        return true;\n      }\n      return this.doesControlHaveError(this.form.controls.newPassword) || this.doesControlHaveError(this.form.controls.confirmNewPassword);\n    }\n    doesControlHaveError(formControl) {\n      return formControl.errors != null;\n    }\n    doTransferToSuccessPage() {\n      this.router.navigate(['/successful-restoration']);\n    }\n  }\n  RestorePasswordComponent.ɵfac = function RestorePasswordComponent_Factory(t) {\n    return new (t || RestorePasswordComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.UserService), i0.ɵɵdirectiveInject(i1.Router));\n  };\n  RestorePasswordComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RestorePasswordComponent,\n    selectors: [[\"app-restore-password\"]],\n    decls: 8,\n    vars: 6,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [3, \"errorMessage\", 4, \"ngIf\"], [\"fieldName\", \"\\u041D\\u043E\\u0432\\u044B\\u0439 \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C\", 3, \"formElement\", \"showError\"], [\"fieldName\", \"\\u041F\\u043E\\u0434\\u0442\\u0432\\u0435\\u0440\\u0434\\u0438\\u0442\\u0435 \\u043D\\u043E\\u0432\\u044B\\u0439 \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C\", 3, \"formElement\", \"showError\"], [1, \"flex\", \"flex-row\", \"items-center\"], [\"type\", \"submit\", 1, \"button-red-rounded\"], [3, \"errorMessage\"]],\n    template: function RestorePasswordComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function RestorePasswordComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.submit();\n        });\n        i0.ɵɵtemplate(1, RestorePasswordComponent_app_error_paragraph_1_Template, 1, 1, \"app-error-paragraph\", 1);\n        i0.ɵɵelement(2, \"app-text-field-password\", 2)(3, \"app-text-field-password\", 3)(4, \"br\");\n        i0.ɵɵelementStart(5, \"div\", 4)(6, \"button\", 5);\n        i0.ɵɵtext(7, \"\\u0418\\u0437\\u043C\\u0435\\u043D\\u0438\\u0442\\u044C\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isGlobalErrorSet());\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formElement\", ctx.form.controls.newPassword)(\"showError\", ctx.showAllErrors);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formElement\", ctx.form.controls.confirmNewPassword)(\"showError\", ctx.showAllErrors);\n      }\n    },\n    dependencies: [i3.NgIf, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i5.ErrorParagraphComponent, i6.TextFieldPasswordComponent]\n  });\n  return RestorePasswordComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}