{"ast":null,"code":"import { NavigationEnd } from \"@angular/router\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class UrlService {\n  constructor(router) {\n    this.LAST_PAGE_KEY = 'last_page_route';\n    this.CURRENT_PAGE_KEY = 'current_page_route';\n    this.router = router;\n    this.subscribeToNavigationEvents();\n  }\n  subscribeToNavigationEvents() {\n    this.router.events.subscribe(event => {\n      if (event instanceof NavigationEnd) {\n        this.lastUrl = event.url;\n        console.log('Последний адрес:', this.lastUrl);\n      }\n    });\n  }\n  saveCurrentPage() {\n    let currentPage = this.getCurrentUrl();\n    let prevPage = this.getCurrentPage();\n    if (prevPage != currentPage) {\n      sessionStorage.setItem(this.LAST_PAGE_KEY, prevPage);\n      sessionStorage.setItem(this.CURRENT_PAGE_KEY, currentPage);\n    }\n    console.log('prev page: ' + prevPage);\n    console.log('current page: ' + currentPage);\n    console.log('last page: ' + this.getLastPage());\n  }\n  getCurrentPage() {\n    return sessionStorage.getItem(this.CURRENT_PAGE_KEY);\n  }\n  getLastPage() {\n    return sessionStorage.getItem(this.LAST_PAGE_KEY);\n  }\n  getCurrentUrl() {\n    const urlTree = this.router.createUrlTree([], {\n      queryParamsHandling: 'merge',\n      preserveFragment: true\n    });\n    return this.router.serializeUrl(urlTree);\n  }\n}\nUrlService.ɵfac = function UrlService_Factory(t) {\n  return new (t || UrlService)(i0.ɵɵinject(i1.Router));\n};\nUrlService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UrlService,\n  factory: UrlService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["NavigationEnd","UrlService","constructor","router","LAST_PAGE_KEY","CURRENT_PAGE_KEY","subscribeToNavigationEvents","events","subscribe","event","lastUrl","url","console","log","saveCurrentPage","currentPage","getCurrentUrl","prevPage","getCurrentPage","sessionStorage","setItem","getLastPage","getItem","urlTree","createUrlTree","queryParamsHandling","preserveFragment","serializeUrl","i0","ɵɵinject","i1","Router","factory","ɵfac","providedIn"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\service\\url.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {NavigationEnd, Router} from \"@angular/router\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UrlService {\n  private router: Router;\n\n  private LAST_PAGE_KEY = 'last_page_route';\n  private CURRENT_PAGE_KEY = 'current_page_route';\n\n  constructor(router: Router) {\n    this.router = router;\n    this.subscribeToNavigationEvents();\n  }\n\n  private subscribeToNavigationEvents(): void {\n    this.router.events.subscribe(event => {\n      if (event instanceof NavigationEnd) {\n        this.lastUrl = event.url;\n        console.log('Последний адрес:', this.lastUrl);\n      }\n    });\n  }\n\n  saveCurrentPage() {\n    let currentPage = this.getCurrentUrl();\n\n    let prevPage = this.getCurrentPage();\n    if (prevPage != currentPage) {\n      sessionStorage.setItem(this.LAST_PAGE_KEY, prevPage);\n      sessionStorage.setItem(this.CURRENT_PAGE_KEY, currentPage);\n    }\n\n    console.log('prev page: ' + prevPage);\n    console.log('current page: ' + currentPage);\n    console.log('last page: ' + this.getLastPage());\n  }\n\n  getCurrentPage() {\n    return sessionStorage.getItem(this.CURRENT_PAGE_KEY);\n  }\n\n  getLastPage() {\n    return sessionStorage.getItem(this.LAST_PAGE_KEY);\n  }\n\n  private getCurrentUrl(): string {\n    const urlTree = this.router.createUrlTree([], {\n      queryParamsHandling: 'merge',\n      preserveFragment: true\n    });\n\n    return this.router.serializeUrl(urlTree);\n  }\n}\n"],"mappings":"AACA,SAAQA,aAAa,QAAe,iBAAiB;;;AAKrD,OAAM,MAAOC,UAAU;EAMrBC,YAAYC,MAAc;IAHlB,KAAAC,aAAa,GAAG,iBAAiB;IACjC,KAAAC,gBAAgB,GAAG,oBAAoB;IAG7C,IAAI,CAACF,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACG,2BAA2B,EAAE;EACpC;EAEQA,2BAA2BA,CAAA;IACjC,IAAI,CAACH,MAAM,CAACI,MAAM,CAACC,SAAS,CAACC,KAAK,IAAG;MACnC,IAAIA,KAAK,YAAYT,aAAa,EAAE;QAClC,IAAI,CAACU,OAAO,GAAGD,KAAK,CAACE,GAAG;QACxBC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE,IAAI,CAACH,OAAO,CAAC;;IAEjD,CAAC,CAAC;EACJ;EAEAI,eAAeA,CAAA;IACb,IAAIC,WAAW,GAAG,IAAI,CAACC,aAAa,EAAE;IAEtC,IAAIC,QAAQ,GAAG,IAAI,CAACC,cAAc,EAAE;IACpC,IAAID,QAAQ,IAAIF,WAAW,EAAE;MAC3BI,cAAc,CAACC,OAAO,CAAC,IAAI,CAAChB,aAAa,EAAEa,QAAQ,CAAC;MACpDE,cAAc,CAACC,OAAO,CAAC,IAAI,CAACf,gBAAgB,EAAEU,WAAW,CAAC;;IAG5DH,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGI,QAAQ,CAAC;IACrCL,OAAO,CAACC,GAAG,CAAC,gBAAgB,GAAGE,WAAW,CAAC;IAC3CH,OAAO,CAACC,GAAG,CAAC,aAAa,GAAG,IAAI,CAACQ,WAAW,EAAE,CAAC;EACjD;EAEAH,cAAcA,CAAA;IACZ,OAAOC,cAAc,CAACG,OAAO,CAAC,IAAI,CAACjB,gBAAgB,CAAC;EACtD;EAEAgB,WAAWA,CAAA;IACT,OAAOF,cAAc,CAACG,OAAO,CAAC,IAAI,CAAClB,aAAa,CAAC;EACnD;EAEQY,aAAaA,CAAA;IACnB,MAAMO,OAAO,GAAG,IAAI,CAACpB,MAAM,CAACqB,aAAa,CAAC,EAAE,EAAE;MAC5CC,mBAAmB,EAAE,OAAO;MAC5BC,gBAAgB,EAAE;KACnB,CAAC;IAEF,OAAO,IAAI,CAACvB,MAAM,CAACwB,YAAY,CAACJ,OAAO,CAAC;EAC1C;;AAjDWtB,UAAU,C;mBAAVA,UAAU,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA;AAAA;AAAV9B,UAAU,C;SAAVA,UAAU;EAAA+B,OAAA,EAAV/B,UAAU,CAAAgC,IAAA;EAAAC,UAAA,EAFT;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}