{"ast":null,"code":"import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/mail.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"../../components/header/header.component\";\nimport * as i6 from \"../../components/error/error.component\";\nimport * as i7 from \"../../little-components/text-field-placeholder/text-field-placeholder.component\";\nimport * as i8 from \"../../little-components/error-paragraph/error-paragraph.component\";\nimport * as i9 from \"../../components/narrow-area/narrow-area.component\";\nimport * as i10 from \"../../little-components/middle-control/middle-control.component\";\nfunction EmailToRestorePasswordPageComponent_app_error_paragraph_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-error-paragraph\", 11);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"errorMessage\", ctx_r0.globalError);\n  }\n}\nfunction EmailToRestorePasswordPageComponent_app_middle_control_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"app-middle-control\")(1, \"span\", 12);\n    i0.ɵɵtext(2, \" \\u0412\\u044B\\u043F\\u043E\\u043B\\u043D\\u044F\\u0435\\u0442\\u0441\\u044F \\u043E\\u0442\\u043F\\u0440\\u0430\\u0432\\u043A\\u0430 \\u043F\\u0438\\u0441\\u044C\\u043C\\u0430 \\u043D\\u0430 \\u0432\\u0430\\u0448 Email... \");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport class EmailToRestorePasswordPageComponent {\n  constructor(mailService, router) {\n    this.showAllErrors = false;\n    this.globalError = '';\n    this.sendingMailProcess = false;\n    this.form = new FormGroup({\n      email: new FormControl('', [Validators.email, Validators.required])\n    });\n    this.mailService = mailService;\n    this.router = router;\n  }\n  ngOnInit() {}\n  ngOnDestroy() {\n    if (this.subscription1) this.subscription1.unsubscribe();\n  }\n  isGlobalErrorSet() {\n    return this.globalError != '';\n  }\n  submit() {\n    if (this.anyErrorExists()) return;\n    this.sendMail();\n  }\n  anyErrorExists() {\n    this.resetGlobalError();\n    if (this.isAnyErrorInFields()) {\n      this.showAllErrors = true;\n      return true;\n    }\n    return false;\n  }\n  sendMail() {\n    let email = this.getEmailFromField();\n    this.sendingMailProcess = true;\n    this.subscription1 = this.mailService.sendPasswordRestoration(email).subscribe(result => {\n      console.log(result);\n      if (result.success) {\n        this.sendingMailProcess = false;\n        this.navigateToInfoPage(email);\n      } else {\n        this.globalError = result.message;\n      }\n    });\n  }\n  navigateToInfoPage(email) {\n    let navigationExtras = {\n      queryParams: {\n        'email': email\n      }\n    };\n    this.router.navigate(['/mail-to-restore-sent'], navigationExtras);\n  }\n  resetGlobalError() {\n    this.globalError = '';\n  }\n  getEmailFromField() {\n    return this.form.controls.email.getRawValue();\n  }\n  isAnyErrorInFields() {\n    return this.doesControlHaveError(this.form.controls.email);\n  }\n  doesControlHaveError(formControl) {\n    return formControl.errors != null;\n  }\n}\nEmailToRestorePasswordPageComponent.ɵfac = function EmailToRestorePasswordPageComponent_Factory(t) {\n  return new (t || EmailToRestorePasswordPageComponent)(i0.ɵɵdirectiveInject(i1.MailService), i0.ɵɵdirectiveInject(i2.Router));\n};\nEmailToRestorePasswordPageComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: EmailToRestorePasswordPageComponent,\n  selectors: [[\"app-email-to-restore-password-page\"]],\n  decls: 16,\n  vars: 6,\n  consts: [[1, \"main-body\"], [\"title\", \"\\u0412\\u043E\\u0441\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435 \\u043F\\u0430\\u0440\\u043E\\u043B\\u044F\"], [3, \"formGroup\", \"ngSubmit\"], [3, \"errorMessage\", 4, \"ngIf\"], [4, \"ngIf\"], [\"placeholder\", \"Email\", 3, \"formElement\", \"showError\"], [3, \"paddingTop\"], [\"type\", \"submit\", 1, \"button-red-rounded\"], [1, \"text-center\", \"fs-6\", \"pt-3\"], [1, \"text-black\"], [\"routerLink\", \"/login\", 1, \"blue-bold-link-text\"], [3, \"errorMessage\"], [1, \"text-blue-500\", \"fs-6\", \"fw-bold\"]],\n  template: function EmailToRestorePasswordPageComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelement(1, \"app-header\")(2, \"app-error\");\n      i0.ɵɵelementStart(3, \"app-narrow-area\", 1)(4, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function EmailToRestorePasswordPageComponent_Template_form_ngSubmit_4_listener() {\n        return ctx.submit();\n      });\n      i0.ɵɵtemplate(5, EmailToRestorePasswordPageComponent_app_error_paragraph_5_Template, 1, 1, \"app-error-paragraph\", 3);\n      i0.ɵɵtemplate(6, EmailToRestorePasswordPageComponent_app_middle_control_6_Template, 3, 0, \"app-middle-control\", 4);\n      i0.ɵɵelement(7, \"app-text-field-placeholder\", 5);\n      i0.ɵɵelementStart(8, \"app-middle-control\", 6)(9, \"button\", 7);\n      i0.ɵɵtext(10, \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C \\u043F\\u0438\\u0441\\u044C\\u043C\\u043E \\u043D\\u0430 \\u043F\\u043E\\u0447\\u0442\\u0443\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(11, \"p\", 8)(12, \"span\", 9);\n      i0.ɵɵtext(13, \"\\u0412\\u0441\\u043F\\u043E\\u043C\\u043D\\u0438\\u043B\\u0438 \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C? \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"a\", 10);\n      i0.ɵɵtext(15, \"\\u0412\\u043E\\u0439\\u0442\\u0438\");\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isGlobalErrorSet());\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.sendingMailProcess);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formElement\", ctx.form.controls.email)(\"showError\", ctx.showAllErrors);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"paddingTop\", 3);\n    }\n  },\n  dependencies: [i3.NgIf, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i2.RouterLink, i5.HeaderComponent, i6.ErrorComponent, i7.TextFieldPlaceholderComponent, i8.ErrorParagraphComponent, i9.NarrowAreaComponent, i10.MiddleControlComponent],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["FormControl","FormGroup","Validators","i0","ɵɵelement","ɵɵproperty","ctx_r0","globalError","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","EmailToRestorePasswordPageComponent","constructor","mailService","router","showAllErrors","sendingMailProcess","form","email","required","ngOnInit","ngOnDestroy","subscription1","unsubscribe","isGlobalErrorSet","submit","anyErrorExists","sendMail","resetGlobalError","isAnyErrorInFields","getEmailFromField","sendPasswordRestoration","subscribe","result","console","log","success","navigateToInfoPage","message","navigationExtras","queryParams","navigate","controls","getRawValue","doesControlHaveError","formControl","errors","ɵɵdirectiveInject","i1","MailService","i2","Router","selectors","decls","vars","consts","template","EmailToRestorePasswordPageComponent_Template","rf","ctx","ɵɵlistener","EmailToRestorePasswordPageComponent_Template_form_ngSubmit_4_listener","ɵɵtemplate","EmailToRestorePasswordPageComponent_app_error_paragraph_5_Template","EmailToRestorePasswordPageComponent_app_middle_control_6_Template","ɵɵadvance"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\pages\\email-to-restore-password-page\\email-to-restore-password-page.component.ts","C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\pages\\email-to-restore-password-page\\email-to-restore-password-page.component.html"],"sourcesContent":["import {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {ActivatedRoute, NavigationExtras, Router} from \"@angular/router\";\r\nimport {Subscription} from \"rxjs\";\r\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\r\nimport {MailService} from \"../../service/mail.service\";\r\nimport {SessionService} from \"../../service/session.service\";\r\n\r\n@Component({\r\n  selector: 'app-email-to-restore-password-page',\r\n  templateUrl: './email-to-restore-password-page.component.html',\r\n  styleUrls: ['./email-to-restore-password-page.component.css']\r\n})\r\nexport class EmailToRestorePasswordPageComponent implements OnInit, OnDestroy {\r\n  private mailService: MailService;\r\n  private router: Router;\r\n\r\n  showAllErrors = false;\r\n  globalError: string = '';\r\n  sendingMailProcess = false;\r\n\r\n  private subscription1: Subscription;\r\n\r\n  form = new FormGroup({\r\n    email: new FormControl<string>('', [\r\n      Validators.email,\r\n      Validators.required\r\n    ])\r\n  });\r\n\r\n  constructor(mailService: MailService,\r\n              router: Router) {\r\n    this.mailService = mailService;\r\n    this.router = router;\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.subscription1)\r\n      this.subscription1.unsubscribe();\r\n  }\r\n\r\n  isGlobalErrorSet(): boolean {\r\n    return this.globalError != '';\r\n  }\r\n\r\n  submit() {\r\n    if (this.anyErrorExists())\r\n      return;\r\n\r\n    this.sendMail();\r\n  }\r\n\r\n  private anyErrorExists(): boolean {\r\n    this.resetGlobalError();\r\n\r\n    if (this.isAnyErrorInFields()) {\r\n      this.showAllErrors = true;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private sendMail() {\r\n    let email = this.getEmailFromField();\r\n\r\n    this.sendingMailProcess = true;\r\n    this.subscription1 = this.mailService.sendPasswordRestoration(email)\r\n      .subscribe(result => {\r\n        console.log(result);\r\n        if (result.success) {\r\n          this.sendingMailProcess = false;\r\n          this.navigateToInfoPage(email);\r\n        }\r\n        else {\r\n          this.globalError = result.message;\r\n        }\r\n      });\r\n  }\r\n\r\n  private navigateToInfoPage(email: string) {\r\n    let navigationExtras: NavigationExtras = {\r\n      queryParams: {'email': email}\r\n    };\r\n    this.router.navigate(['/mail-to-restore-sent'], navigationExtras);\r\n  }\r\n\r\n  private resetGlobalError() {\r\n    this.globalError = '';\r\n  }\r\n\r\n  private getEmailFromField(): string {\r\n    return this.form.controls.email.getRawValue();\r\n  }\r\n\r\n  private isAnyErrorInFields(): boolean {\r\n    return this.doesControlHaveError(this.form.controls.email);\r\n  }\r\n\r\n  private doesControlHaveError(formControl: FormControl): boolean {\r\n    return formControl.errors != null;\r\n  }\r\n}\r\n","<div class=\"main-body\">\r\n  <app-header></app-header>\r\n  <app-error></app-error>\r\n\r\n  <app-narrow-area\r\n    title=\"Восстановление пароля\"\r\n  >\r\n    <form [formGroup]=\"form\" (ngSubmit)=\"submit()\">\r\n      <app-error-paragraph\r\n        *ngIf=\"isGlobalErrorSet()\"\r\n        [errorMessage]=\"globalError\"\r\n      ></app-error-paragraph>\r\n\r\n      <app-middle-control *ngIf=\"sendingMailProcess\">\r\n        <span class=\"text-blue-500 fs-6 fw-bold\">\r\n          Выполняется отправка письма на ваш Email...\r\n        </span>\r\n      </app-middle-control>\r\n\r\n      <app-text-field-placeholder\r\n        placeholder=\"Email\"\r\n        [formElement]=\"form.controls.email\"\r\n        [showError]=\"showAllErrors\"\r\n      ></app-text-field-placeholder>\r\n\r\n      <app-middle-control\r\n        [paddingTop]=\"3\">\r\n        <button\r\n          type=\"submit\"\r\n          class=\"button-red-rounded\"\r\n        >Отправить письмо на почту</button>\r\n      </app-middle-control>\r\n\r\n      <p class=\"text-center fs-6 pt-3\">\r\n        <span class=\"text-black\">Вспомнили пароль? </span>\r\n        <a routerLink=\"/login\" class=\"blue-bold-link-text\">Войти</a>\r\n      </p>\r\n\r\n    </form>\r\n\r\n  </app-narrow-area>\r\n</div>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}