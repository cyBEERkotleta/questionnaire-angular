{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nexport let OptionListComponent = class OptionListComponent {\n  constructor(formBuilder) {\n    this.fieldOptions = [];\n    this.visible = false;\n    this.fieldOptionsChange = new EventEmitter();\n    /*this.fieldOptionsForm = new FormGroup({\n      options: new FormArray([])\n    });*/\n    this.formBuilder = formBuilder;\n    this.fieldOptionsForm = this.formBuilder.group({\n      options: this.formBuilder.array([])\n    });\n  }\n  ngOnInit() {\n    this.populateFieldOptionsForm();\n  }\n  getFormArray() {\n    return this.fieldOptionsForm.get('options');\n  }\n  populateFieldOptionsForm() {\n    const optionsArray = this.getFormArray();\n    optionsArray.clear();\n    if (!this.fieldOptions) return;\n    /*this.fieldOptions.forEach(option => {\n      optionsArray.push(new FormControl(option.text));\n    });*/\n    this.fieldOptions.forEach(option => {\n      optionsArray.push(this.formBuilder.group({\n        text: option.text\n      }));\n    });\n  }\n  addFieldOption() {\n    const optionsArray = this.getFormArray();\n    /*optionsArray.push(new FormControl(''));*/\n    optionsArray.push(this.formBuilder.group({\n      text: ''\n    }));\n    this.updateFieldOptions();\n  }\n  removeFieldOption(index) {\n    const optionsArray = this.getFormArray();\n    optionsArray.removeAt(index);\n    this.updateFieldOptions();\n  }\n  updateFieldOptions() {\n    const optionsArray = this.getFormArray();\n    /*this.fieldOptions = optionsArray.value.map((text: string, index: number) => {\n      return {\n        id: (!this.fieldOptions || this.fieldOptions.length <= index) ? null : this.fieldOptions[index].id,\n        text,\n        shownName: text\n      };\n    });*/\n    this.fieldOptions = optionsArray.value.map(option => {\n      return {\n        id: option.id,\n        text: option.text,\n        shownName: option.text\n      };\n    });\n    this.fieldOptionsChange.emit(this.fieldOptions);\n  }\n};\n__decorate([Input()], OptionListComponent.prototype, \"fieldOptions\", void 0);\n__decorate([Input()], OptionListComponent.prototype, \"visible\", void 0);\n__decorate([Output()], OptionListComponent.prototype, \"fieldOptionsChange\", void 0);\nOptionListComponent = __decorate([Component({\n  selector: 'app-option-list',\n  templateUrl: './option-list.component.html',\n  styleUrls: ['./option-list.component.css']\n})], OptionListComponent);","map":{"version":3,"names":["Component","EventEmitter","Input","Output","OptionListComponent","constructor","formBuilder","fieldOptions","visible","fieldOptionsChange","fieldOptionsForm","group","options","array","ngOnInit","populateFieldOptionsForm","getFormArray","get","optionsArray","clear","forEach","option","push","text","addFieldOption","updateFieldOptions","removeFieldOption","index","removeAt","value","map","id","shownName","emit","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\components\\option-list\\option-list.component.ts"],"sourcesContent":["import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {FieldOption} from \"../../entity/FieldOption\";\nimport {FormArray, FormBuilder, FormControl, FormGroup} from \"@angular/forms\";\n\n@Component({\n  selector: 'app-option-list',\n  templateUrl: './option-list.component.html',\n  styleUrls: ['./option-list.component.css']\n})\nexport class OptionListComponent implements OnInit {\n  @Input() fieldOptions: FieldOption[] = [];\n  @Input() visible: boolean = false;\n\n  @Output() fieldOptionsChange = new EventEmitter<FieldOption[]>();\n\n  fieldOptionsForm: FormGroup;\n\n  private formBuilder: FormBuilder;\n\n  constructor(formBuilder: FormBuilder) {\n    /*this.fieldOptionsForm = new FormGroup({\n      options: new FormArray([])\n    });*/\n    this.formBuilder = formBuilder;\n\n    this.fieldOptionsForm = this.formBuilder.group({\n      options: this.formBuilder.array([])\n    });\n  }\n\n  ngOnInit() {\n    this.populateFieldOptionsForm();\n  }\n\n  getFormArray(): FormArray {\n    return this.fieldOptionsForm.get('options') as FormArray;\n  }\n\n  private populateFieldOptionsForm() {\n    const optionsArray = this.getFormArray();\n    optionsArray.clear();\n\n    if (!this.fieldOptions)\n      return;\n\n    /*this.fieldOptions.forEach(option => {\n      optionsArray.push(new FormControl(option.text));\n    });*/\n    this.fieldOptions.forEach(option => {\n      optionsArray.push(\n        this.formBuilder.group({\n          text: option.text\n        })\n      );\n    });\n  }\n\n  addFieldOption() {\n    const optionsArray = this.getFormArray();\n    /*optionsArray.push(new FormControl(''));*/\n    optionsArray.push(\n      this.formBuilder.group({\n        text: ''\n      })\n    );\n\n    this.updateFieldOptions();\n  }\n\n  removeFieldOption(index: number) {\n    const optionsArray = this.getFormArray();\n    optionsArray.removeAt(index);\n    this.updateFieldOptions();\n  }\n\n  updateFieldOptions() {\n    const optionsArray = this.getFormArray();\n    /*this.fieldOptions = optionsArray.value.map((text: string, index: number) => {\n      return {\n        id: (!this.fieldOptions || this.fieldOptions.length <= index) ? null : this.fieldOptions[index].id,\n        text,\n        shownName: text\n      };\n    });*/\n\n    this.fieldOptions = optionsArray.value.map((option: FieldOption) => {\n      return {\n        id: option.id,\n        text: option.text,\n        shownName: option.text\n      };\n    });\n\n    this.fieldOptionsChange.emit(this.fieldOptions);\n  }\n}\n"],"mappings":";AAAA,SAAQA,SAAS,EAAEC,YAAY,EAAEC,KAAK,EAAUC,MAAM,QAAO,eAAe;AASrE,WAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAU9BC,YAAYC,WAAwB;IAT3B,KAAAC,YAAY,GAAkB,EAAE;IAChC,KAAAC,OAAO,GAAY,KAAK;IAEvB,KAAAC,kBAAkB,GAAG,IAAIR,YAAY,EAAiB;IAO9D;;;IAGA,IAAI,CAACK,WAAW,GAAGA,WAAW;IAE9B,IAAI,CAACI,gBAAgB,GAAG,IAAI,CAACJ,WAAW,CAACK,KAAK,CAAC;MAC7CC,OAAO,EAAE,IAAI,CAACN,WAAW,CAACO,KAAK,CAAC,EAAE;KACnC,CAAC;EACJ;EAEAC,QAAQA,CAAA;IACN,IAAI,CAACC,wBAAwB,EAAE;EACjC;EAEAC,YAAYA,CAAA;IACV,OAAO,IAAI,CAACN,gBAAgB,CAACO,GAAG,CAAC,SAAS,CAAc;EAC1D;EAEQF,wBAAwBA,CAAA;IAC9B,MAAMG,YAAY,GAAG,IAAI,CAACF,YAAY,EAAE;IACxCE,YAAY,CAACC,KAAK,EAAE;IAEpB,IAAI,CAAC,IAAI,CAACZ,YAAY,EACpB;IAEF;;;IAGA,IAAI,CAACA,YAAY,CAACa,OAAO,CAACC,MAAM,IAAG;MACjCH,YAAY,CAACI,IAAI,CACf,IAAI,CAAChB,WAAW,CAACK,KAAK,CAAC;QACrBY,IAAI,EAAEF,MAAM,CAACE;OACd,CAAC,CACH;IACH,CAAC,CAAC;EACJ;EAEAC,cAAcA,CAAA;IACZ,MAAMN,YAAY,GAAG,IAAI,CAACF,YAAY,EAAE;IACxC;IACAE,YAAY,CAACI,IAAI,CACf,IAAI,CAAChB,WAAW,CAACK,KAAK,CAAC;MACrBY,IAAI,EAAE;KACP,CAAC,CACH;IAED,IAAI,CAACE,kBAAkB,EAAE;EAC3B;EAEAC,iBAAiBA,CAACC,KAAa;IAC7B,MAAMT,YAAY,GAAG,IAAI,CAACF,YAAY,EAAE;IACxCE,YAAY,CAACU,QAAQ,CAACD,KAAK,CAAC;IAC5B,IAAI,CAACF,kBAAkB,EAAE;EAC3B;EAEAA,kBAAkBA,CAAA;IAChB,MAAMP,YAAY,GAAG,IAAI,CAACF,YAAY,EAAE;IACxC;;;;;;;IAQA,IAAI,CAACT,YAAY,GAAGW,YAAY,CAACW,KAAK,CAACC,GAAG,CAAET,MAAmB,IAAI;MACjE,OAAO;QACLU,EAAE,EAAEV,MAAM,CAACU,EAAE;QACbR,IAAI,EAAEF,MAAM,CAACE,IAAI;QACjBS,SAAS,EAAEX,MAAM,CAACE;OACnB;IACH,CAAC,CAAC;IAEF,IAAI,CAACd,kBAAkB,CAACwB,IAAI,CAAC,IAAI,CAAC1B,YAAY,CAAC;EACjD;CACD;AArFU2B,UAAA,EAARhC,KAAK,EAAE,C,wDAAkC;AACjCgC,UAAA,EAARhC,KAAK,EAAE,C,mDAA0B;AAExBgC,UAAA,EAAT/B,MAAM,EAAE,C,8DAAwD;AAJtDC,mBAAmB,GAAA8B,UAAA,EAL/BlC,SAAS,CAAC;EACTmC,QAAQ,EAAE,iBAAiB;EAC3BC,WAAW,EAAE,8BAA8B;EAC3CC,SAAS,EAAE,CAAC,6BAA6B;CAC1C,CAAC,C,EACWjC,mBAAmB,CAsF/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}