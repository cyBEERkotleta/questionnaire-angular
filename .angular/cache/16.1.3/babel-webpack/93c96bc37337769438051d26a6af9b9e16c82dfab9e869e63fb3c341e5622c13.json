{"ast":null,"code":"import * as SockJS from \"sockjs-client\";\nimport * as Stomp from \"stompjs\";\nimport * as i0 from \"@angular/core\";\nexport class WebSocketService {\n  constructor() {\n    this.path = 'http://localhost:8080/websocket';\n    this.socket = new SockJS(this.path);\n    this.stompClient = Stomp.over(this.socket);\n  }\n  subscribe(formId, callback) {\n    const connected = this.stompClient.connected;\n    if (connected) {\n      return this.subscribeToForm(formId, callback);\n    }\n    return this.stompClient.connect({}, () => {\n      this.subscribeToForm(formId, callback);\n    });\n  }\n  subscribeToForm(formId, callback) {\n    return this.stompClient.subscribe(this.getDestination(formId), callback => {\n      callback();\n    });\n  }\n  getDestination(formId) {\n    return '/response/answered_forms/queue/' + formId;\n  }\n}\nWebSocketService.ɵfac = function WebSocketService_Factory(t) {\n  return new (t || WebSocketService)();\n};\nWebSocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WebSocketService,\n  factory: WebSocketService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["SockJS","Stomp","WebSocketService","constructor","path","socket","stompClient","over","subscribe","formId","callback","connected","subscribeToForm","connect","getDestination","factory","ɵfac","providedIn"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\service\\web-socket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport * as SockJS from \"sockjs-client\"\nimport * as Stomp from \"stompjs\"\nimport {Subscription} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WebSocketService {\n  private path = 'http://localhost:8080/websocket';\n\n  socket = new SockJS(this.path);\n  stompClient = Stomp.over(this.socket);\n\n  subscribe(formId: bigint, callback: any): Subscription {\n    const connected: boolean = this.stompClient.connected;\n    if (connected) {\n      return this.subscribeToForm(formId, callback);\n    }\n\n    return this.stompClient.connect({}, (): any => {\n      this.subscribeToForm(formId, callback);\n    });\n  }\n\n  private subscribeToForm(formId: bigint, callback: any): Subscription {\n    return this.stompClient.subscribe(this.getDestination(formId), callback => {\n      callback();\n    });\n  }\n\n  private getDestination(formId: bigint): string {\n    return '/response/answered_forms/queue/' + formId;\n  }\n}\n"],"mappings":"AACA,OAAO,KAAKA,MAAM,MAAM,eAAe;AACvC,OAAO,KAAKC,KAAK,MAAM,SAAS;;AAMhC,OAAM,MAAOC,gBAAgB;EAH7BC,YAAA;IAIU,KAAAC,IAAI,GAAG,iCAAiC;IAEhD,KAAAC,MAAM,GAAG,IAAIL,MAAM,CAAC,IAAI,CAACI,IAAI,CAAC;IAC9B,KAAAE,WAAW,GAAGL,KAAK,CAACM,IAAI,CAAC,IAAI,CAACF,MAAM,CAAC;;EAErCG,SAASA,CAACC,MAAc,EAAEC,QAAa;IACrC,MAAMC,SAAS,GAAY,IAAI,CAACL,WAAW,CAACK,SAAS;IACrD,IAAIA,SAAS,EAAE;MACb,OAAO,IAAI,CAACC,eAAe,CAACH,MAAM,EAAEC,QAAQ,CAAC;;IAG/C,OAAO,IAAI,CAACJ,WAAW,CAACO,OAAO,CAAC,EAAE,EAAE,MAAU;MAC5C,IAAI,CAACD,eAAe,CAACH,MAAM,EAAEC,QAAQ,CAAC;IACxC,CAAC,CAAC;EACJ;EAEQE,eAAeA,CAACH,MAAc,EAAEC,QAAa;IACnD,OAAO,IAAI,CAACJ,WAAW,CAACE,SAAS,CAAC,IAAI,CAACM,cAAc,CAACL,MAAM,CAAC,EAAEC,QAAQ,IAAG;MACxEA,QAAQ,EAAE;IACZ,CAAC,CAAC;EACJ;EAEQI,cAAcA,CAACL,MAAc;IACnC,OAAO,iCAAiC,GAAGA,MAAM;EACnD;;AAzBWP,gBAAgB,C;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB,C;SAAhBA,gBAAgB;EAAAa,OAAA,EAAhBb,gBAAgB,CAAAc,IAAA;EAAAC,UAAA,EAFf;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}