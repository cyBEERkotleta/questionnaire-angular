{"ast":null,"code":"import { MessagingService } from \"./messaging-service.service\";\nimport * as i0 from \"@angular/core\";\nexport class WebSocketService {\n  constructor() {\n    /*private path = 'ws://localhost:8080/ws';\n           stompClient = new Client({\n      brokerURL: this.path,\n      debug: (str) => {\n        console.log(str);\n      },\n    });\n           subscribe(formId: bigint, callback: any): StompSubscription {\n        this.stompClient.activate();\n      return this.subscribeToForm(formId, callback);\n    }\n           private subscribeToForm(formId: bigint, callback: any): StompSubscription {\n      return this.stompClient.subscribe(this.getDestination(formId), (message) => {\n        console.log('Received message:', JSON.stringify(message.body));\n      });\n    }*/\n    this.path = 'ws://localhost:8080/ws';\n  }\n  subscribeToFormUpdates(formId) {\n    this.messagingService = new MessagingService(this.path, this.getDestination(formId));\n    return this.messagingService.stream().map();\n  }\n  getDestination(formId) {\n    return '/user/answered_forms_queue/' + formId;\n  }\n}\nWebSocketService.ɵfac = function WebSocketService_Factory(t) {\n  return new (t || WebSocketService)();\n};\nWebSocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WebSocketService,\n  factory: WebSocketService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["MessagingService","WebSocketService","constructor","path","subscribeToFormUpdates","formId","messagingService","getDestination","stream","map","factory","ɵfac","providedIn"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\service\\web-socket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {MessagingService} from \"./messaging-service.service\";\nimport {Observable} from \"rxjs\";\nimport { Message } from \"@stomp/stompjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WebSocketService {\n  /*private path = 'ws://localhost:8080/ws';\n\n  stompClient = new Client({\n    brokerURL: this.path,\n    debug: (str) => {\n      console.log(str);\n    },\n  });\n\n  subscribe(formId: bigint, callback: any): StompSubscription {\n      this.stompClient.activate();\n    return this.subscribeToForm(formId, callback);\n  }\n\n  private subscribeToForm(formId: bigint, callback: any): StompSubscription {\n    return this.stompClient.subscribe(this.getDestination(formId), (message) => {\n      console.log('Received message:', JSON.stringify(message.body));\n    });\n  }*/\n\n  private path = 'ws://localhost:8080/ws';\n\n  private messagingService;\n\n  subscribeToFormUpdates(formId: bigint): Observable<Message> {\n    this.messagingService = new MessagingService(this.path, this.getDestination(formId));\n    return this.messagingService.stream().map(\n      \n    );\n  }\n\n  private getDestination(formId: bigint): string {\n    return '/user/answered_forms_queue/' + formId;\n  }\n}\n"],"mappings":"AACA,SAAQA,gBAAgB,QAAO,6BAA6B;;AAO5D,OAAM,MAAOC,gBAAgB;EAH7BC,YAAA;IAIE;;;;;;;;;;;;;;;;IAoBQ,KAAAC,IAAI,GAAG,wBAAwB;;EAIvCC,sBAAsBA,CAACC,MAAc;IACnC,IAAI,CAACC,gBAAgB,GAAG,IAAIN,gBAAgB,CAAC,IAAI,CAACG,IAAI,EAAE,IAAI,CAACI,cAAc,CAACF,MAAM,CAAC,CAAC;IACpF,OAAO,IAAI,CAACC,gBAAgB,CAACE,MAAM,EAAE,CAACC,GAAG,EAExC;EACH;EAEQF,cAAcA,CAACF,MAAc;IACnC,OAAO,6BAA6B,GAAGA,MAAM;EAC/C;;AAlCWJ,gBAAgB,C;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB,C;SAAhBA,gBAAgB;EAAAS,OAAA,EAAhBT,gBAAgB,CAAAU,IAAA;EAAAC,UAAA,EAFf;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}