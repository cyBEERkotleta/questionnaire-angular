{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let ManageQuestionnairesComponent = class ManageQuestionnairesComponent {\n  constructor(formService, userService, topicService, fieldService) {\n    this.formService = formService;\n    this.userService = userService;\n    this.topicService = topicService;\n    this.fieldService = fieldService;\n  }\n  ngOnInit() {\n    this.subscriptionUser = this.userService.updateCurrentUser().subscribe(result => {\n      this.user = result;\n      this.subscriptionForms = this.formService.getFormsByUserId(this.user.id).subscribe(forms => {\n        this.forms = forms;\n      });\n      this.subscriptionFieldCounts = this.fieldService.getFieldCountsOfUserForms(this.user.id).subscribe(fieldCounts => {\n        this.fieldCounts = fieldCounts;\n      });\n    });\n  }\n  ngOnDestroy() {\n    if (this.subscriptionUser) this.subscriptionUser.unsubscribe();\n    if (this.subscriptionForms) this.subscriptionForms.unsubscribe();\n    if (this.subscriptionFieldCounts) this.subscriptionFieldCounts.unsubscribe();\n  }\n  getRouterLinkForForm(index) {\n    return '/my-form-fields/' + this.forms[index];\n  }\n};\nManageQuestionnairesComponent = __decorate([Component({\n  selector: 'app-manage-questionnaires',\n  templateUrl: './manage-questionnaires.component.html',\n  styleUrls: ['./manage-questionnaires.component.css']\n})], ManageQuestionnairesComponent);","map":{"version":3,"names":["Component","ManageQuestionnairesComponent","constructor","formService","userService","topicService","fieldService","ngOnInit","subscriptionUser","updateCurrentUser","subscribe","result","user","subscriptionForms","getFormsByUserId","id","forms","subscriptionFieldCounts","getFieldCountsOfUserForms","fieldCounts","ngOnDestroy","unsubscribe","getRouterLinkForForm","index","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\components\\manage-questionnaires\\manage-questionnaires.component.ts"],"sourcesContent":["import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {FormService} from \"../../service/form.service\";\nimport {UserService} from \"../../service/user.service\";\nimport {Subscription} from \"rxjs\";\nimport {Form} from \"../../entity/Form\";\nimport {User} from \"../../entity/User\";\nimport {TopicService} from \"../../service/topic.service\";\nimport {FieldService} from \"../../service/field.service\";\n\n@Component({\n  selector: 'app-manage-questionnaires',\n  templateUrl: './manage-questionnaires.component.html',\n  styleUrls: ['./manage-questionnaires.component.css']\n})\nexport class ManageQuestionnairesComponent implements OnInit, OnDestroy {\n  private formService: FormService;\n  private userService: UserService;\n  private topicService: TopicService;\n  private fieldService: FieldService;\n\n  user: User;\n  forms: Form[];\n  fieldCounts: number[];\n\n  private subscriptionUser: Subscription;\n  private subscriptionForms: Subscription;\n  private subscriptionFieldCounts: Subscription;\n\n  constructor(formService: FormService,\n              userService: UserService,\n              topicService: TopicService,\n              fieldService: FieldService) {\n    this.formService = formService;\n    this.userService = userService;\n    this.topicService = topicService;\n    this.fieldService = fieldService;\n  }\n\n  ngOnInit() {\n    this.subscriptionUser = this.userService.updateCurrentUser()\n      .subscribe(result => {\n        this.user = result;\n\n        this.subscriptionForms = this.formService.getFormsByUserId(this.user.id)\n          .subscribe(forms => {\n            this.forms = forms;\n          });\n\n        this.subscriptionFieldCounts = this.fieldService.getFieldCountsOfUserForms(this.user.id)\n          .subscribe(fieldCounts => {\n            this.fieldCounts = fieldCounts;\n          });\n      });\n  }\n\n  ngOnDestroy() {\n    if (this.subscriptionUser)\n      this.subscriptionUser.unsubscribe();\n    if (this.subscriptionForms)\n      this.subscriptionForms.unsubscribe();\n    if (this.subscriptionFieldCounts)\n      this.subscriptionFieldCounts.unsubscribe();\n  }\n\n  getRouterLinkForForm(index: number): string {\n    return '/my-form-fields/' + this.forms[index];\n  }\n}\n"],"mappings":";AAAA,SAAQA,SAAS,QAA0B,eAAe;AAcnD,WAAMC,6BAA6B,GAAnC,MAAMA,6BAA6B;EAcxCC,YAAYC,WAAwB,EACxBC,WAAwB,EACxBC,YAA0B,EAC1BC,YAA0B;IACpC,IAAI,CAACH,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,YAAY,GAAGA,YAAY;EAClC;EAEAC,QAAQA,CAAA;IACN,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAACJ,WAAW,CAACK,iBAAiB,EAAE,CACzDC,SAAS,CAACC,MAAM,IAAG;MAClB,IAAI,CAACC,IAAI,GAAGD,MAAM;MAElB,IAAI,CAACE,iBAAiB,GAAG,IAAI,CAACV,WAAW,CAACW,gBAAgB,CAAC,IAAI,CAACF,IAAI,CAACG,EAAE,CAAC,CACrEL,SAAS,CAACM,KAAK,IAAG;QACjB,IAAI,CAACA,KAAK,GAAGA,KAAK;MACpB,CAAC,CAAC;MAEJ,IAAI,CAACC,uBAAuB,GAAG,IAAI,CAACX,YAAY,CAACY,yBAAyB,CAAC,IAAI,CAACN,IAAI,CAACG,EAAE,CAAC,CACrFL,SAAS,CAACS,WAAW,IAAG;QACvB,IAAI,CAACA,WAAW,GAAGA,WAAW;MAChC,CAAC,CAAC;IACN,CAAC,CAAC;EACN;EAEAC,WAAWA,CAAA;IACT,IAAI,IAAI,CAACZ,gBAAgB,EACvB,IAAI,CAACA,gBAAgB,CAACa,WAAW,EAAE;IACrC,IAAI,IAAI,CAACR,iBAAiB,EACxB,IAAI,CAACA,iBAAiB,CAACQ,WAAW,EAAE;IACtC,IAAI,IAAI,CAACJ,uBAAuB,EAC9B,IAAI,CAACA,uBAAuB,CAACI,WAAW,EAAE;EAC9C;EAEAC,oBAAoBA,CAACC,KAAa;IAChC,OAAO,kBAAkB,GAAG,IAAI,CAACP,KAAK,CAACO,KAAK,CAAC;EAC/C;CACD;AArDYtB,6BAA6B,GAAAuB,UAAA,EALzCxB,SAAS,CAAC;EACTyB,QAAQ,EAAE,2BAA2B;EACrCC,WAAW,EAAE,wCAAwC;EACrDC,SAAS,EAAE,CAAC,uCAAuC;CACpD,CAAC,C,EACW1B,6BAA6B,CAqDzC"},"metadata":{},"sourceType":"module","externalDependencies":[]}