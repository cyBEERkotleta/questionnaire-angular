{"ast":null,"code":"import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/form.service\";\nimport * as i2 from \"../../service/modal-edit-window.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"../../little-components/text-field/text-field.component\";\nimport * as i6 from \"../../little-components/error-paragraph/error-paragraph.component\";\nimport * as i7 from \"../../little-components/middle-control/middle-control.component\";\nimport * as i8 from \"../../little-components/checkbox-single/checkbox-single.component\";\nimport * as i9 from \"../../little-components/combobox-topic/combobox-topic.component\";\nfunction EditFormComponent_app_error_paragraph_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-error-paragraph\", 6);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"errorMessage\", ctx_r0.globalError);\n  }\n}\nexport class EditFormComponent {\n  constructor(formService, modalEditWindowService) {\n    this.showAllErrors = false;\n    this.globalError = '';\n    this.form = new FormGroup({\n      name: new FormControl('', [Validators.minLength(2), Validators.maxLength(150), Validators.required]),\n      topic: new FormControl(null, [Validators.required]),\n      shown: new FormControl(true)\n    });\n    this.formService = formService;\n    this.modalEditWindowsService = modalEditWindowService;\n    this.editedForm = this.modalEditWindowsService.getEditableObject();\n  }\n  ngOnInit() {\n    this.updateFormFields();\n  }\n  ngOnDestroy() {\n    if (this.subscription) this.subscription.unsubscribe();\n  }\n  isGlobalErrorSet() {\n    return this.globalError != '';\n  }\n  submit() {\n    if (this.anyErrorExists()) return;\n    this.saveForm();\n  }\n  anyErrorExists() {\n    this.resetGlobalError();\n    if (this.isAnyErrorInFields()) {\n      this.showAllErrors = true;\n      return true;\n    }\n    return false;\n  }\n  saveForm() {\n    this.updateEditedFormWithFields();\n    this.subscription = this.formService.saveForm(this.editedForm).subscribe(result => {\n      console.log(result);\n      if (result.success) {\n        this.modalEditWindowsService.close();\n        location.reload();\n      } else {\n        this.globalError = result.message;\n      }\n    });\n  }\n  updateFormFields() {\n    this.form.controls.name.setValue(this.editedForm.name);\n    this.form.controls.shown.setValue(this.editedForm.shown);\n  }\n  onTopicChoiceReadyToGetValue() {\n    this.form.controls.topic.setValue(this.editedForm.topic);\n  }\n  resetGlobalError() {\n    this.globalError = '';\n  }\n  updateEditedFormWithFields() {\n    let name = this.getNameFromField();\n    let shown = this.getShownFromField();\n    let topic = this.getTopicFromField();\n    this.editedForm.name = name;\n    this.editedForm.shown = shown;\n    this.editedForm.topic = topic;\n  }\n  getNameFromField() {\n    return this.form.controls.name.getRawValue();\n  }\n  getShownFromField() {\n    return this.form.controls.shown.getRawValue();\n  }\n  getTopicFromField() {\n    return this.form.controls.topic.getRawValue();\n  }\n  isAnyErrorInFields() {\n    return this.doesControlHaveError(this.form.controls.name) || this.doesControlHaveError(this.form.controls.topic);\n  }\n  doesControlHaveError(formControl) {\n    return formControl.errors != null;\n  }\n}\nEditFormComponent.ɵfac = function EditFormComponent_Factory(t) {\n  return new (t || EditFormComponent)(i0.ɵɵdirectiveInject(i1.FormService), i0.ɵɵdirectiveInject(i2.ModalEditWindowService));\n};\nEditFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: EditFormComponent,\n  selectors: [[\"app-edit-form\"]],\n  decls: 9,\n  vars: 7,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [3, \"errorMessage\", 4, \"ngIf\"], [\"fieldName\", \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435\", 3, \"formElement\", \"showError\"], [\"fieldName\", \"\\u0422\\u0435\\u043C\\u0430\", 3, \"formElement\", \"showError\", \"listenerToValueChangeReady\"], [\"fieldName\", \"\\u041E\\u0442\\u043E\\u0431\\u0440\\u0430\\u0436\\u0430\\u0442\\u044C \\u0444\\u043E\\u0440\\u043C\\u0443 \\u0432 \\u043A\\u0430\\u0442\\u0430\\u043B\\u043E\\u0433\\u0435\", 3, \"formElement\"], [\"type\", \"submit\", 1, \"button-red-rounded\"], [3, \"errorMessage\"]],\n  template: function EditFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function EditFormComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.submit();\n      });\n      i0.ɵɵtemplate(1, EditFormComponent_app_error_paragraph_1_Template, 1, 1, \"app-error-paragraph\", 1);\n      i0.ɵɵelement(2, \"app-text-field\", 2);\n      i0.ɵɵelementStart(3, \"app-combobox-topic\", 3);\n      i0.ɵɵlistener(\"listenerToValueChangeReady\", function EditFormComponent_Template_app_combobox_topic_listenerToValueChangeReady_3_listener() {\n        return ctx.onTopicChoiceReadyToGetValue();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"app-checkbox-single\", 4)(5, \"br\");\n      i0.ɵɵelementStart(6, \"app-middle-control\")(7, \"button\", 5);\n      i0.ɵɵtext(8, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C \\u0438\\u0437\\u043C\\u0435\\u043D\\u0435\\u043D\\u0438\\u044F\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isGlobalErrorSet());\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formElement\", ctx.form.controls.name)(\"showError\", ctx.showAllErrors);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formElement\", ctx.form.controls.topic)(\"showError\", ctx.showAllErrors);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formElement\", ctx.form.controls.shown);\n    }\n  },\n  dependencies: [i3.NgIf, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i5.TextFieldComponent, i6.ErrorParagraphComponent, i7.MiddleControlComponent, i8.CheckboxSingleComponent, i9.ComboboxTopicComponent],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["FormControl","FormGroup","Validators","i0","ɵɵelement","ɵɵproperty","ctx_r0","globalError","EditFormComponent","constructor","formService","modalEditWindowService","showAllErrors","form","name","minLength","maxLength","required","topic","shown","modalEditWindowsService","editedForm","getEditableObject","ngOnInit","updateFormFields","ngOnDestroy","subscription","unsubscribe","isGlobalErrorSet","submit","anyErrorExists","saveForm","resetGlobalError","isAnyErrorInFields","updateEditedFormWithFields","subscribe","result","console","log","success","close","location","reload","message","controls","setValue","onTopicChoiceReadyToGetValue","getNameFromField","getShownFromField","getTopicFromField","getRawValue","doesControlHaveError","formControl","errors","ɵɵdirectiveInject","i1","FormService","i2","ModalEditWindowService","selectors","decls","vars","consts","template","EditFormComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","EditFormComponent_Template_form_ngSubmit_0_listener","ɵɵtemplate","EditFormComponent_app_error_paragraph_1_Template","EditFormComponent_Template_app_combobox_topic_listenerToValueChangeReady_3_listener","ɵɵelementEnd","ɵɵtext","ɵɵadvance"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\components\\edit-form\\edit-form.component.ts","C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\components\\edit-form\\edit-form.component.html"],"sourcesContent":["import {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\r\nimport {Topic} from \"../../entity/Topic\";\r\nimport {FormService} from \"../../service/form.service\";\r\nimport {Subscription} from \"rxjs\";\r\nimport {Form} from \"../../entity/Form\";\r\nimport {ModalEditWindowService} from \"../../service/modal-edit-window.service\";\r\n\r\n@Component({\r\n  selector: 'app-edit-form',\r\n  templateUrl: './edit-form.component.html',\r\n  styleUrls: ['./edit-form.component.css']\r\n})\r\nexport class EditFormComponent implements OnInit, OnDestroy {\r\n  editedForm: Form;\r\n\r\n  private formService: FormService;\r\n  private modalEditWindowsService: ModalEditWindowService;\r\n\r\n  showAllErrors = false;\r\n  globalError: string = '';\r\n\r\n  private subscription: Subscription;\r\n\r\n  form = new FormGroup({\r\n    name: new FormControl<string>('', [\r\n      Validators.minLength(2),\r\n      Validators.maxLength(150),\r\n      Validators.required\r\n    ]),\r\n    topic: new FormControl<Topic>(null, [\r\n      Validators.required\r\n    ]),\r\n    shown: new FormControl<boolean>(true)\r\n  });\r\n\r\n  constructor(formService: FormService,\r\n              modalEditWindowService: ModalEditWindowService) {\r\n    this.formService = formService;\r\n    this.modalEditWindowsService = modalEditWindowService;\r\n\r\n    this.editedForm = this.modalEditWindowsService.getEditableObject() as Form;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.updateFormFields();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.subscription)\r\n      this.subscription.unsubscribe();\r\n  }\r\n\r\n  isGlobalErrorSet(): boolean {\r\n    return this.globalError != '';\r\n  }\r\n\r\n  submit() {\r\n    if (this.anyErrorExists())\r\n      return;\r\n\r\n    this.saveForm();\r\n  }\r\n\r\n  private anyErrorExists(): boolean {\r\n    this.resetGlobalError();\r\n\r\n    if (this.isAnyErrorInFields()) {\r\n      this.showAllErrors = true;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private saveForm() {\r\n    this.updateEditedFormWithFields();\r\n\r\n    this.subscription = this.formService.saveForm(this.editedForm)\r\n      .subscribe(result => {\r\n        console.log(result);\r\n        if (result.success) {\r\n          this.modalEditWindowsService.close();\r\n          location.reload();\r\n        }\r\n        else {\r\n          this.globalError = result.message;\r\n        }\r\n      });\r\n  }\r\n\r\n  private updateFormFields() {\r\n    this.form.controls.name.setValue(this.editedForm.name);\r\n    this.form.controls.shown.setValue(this.editedForm.shown);\r\n  }\r\n\r\n  onTopicChoiceReadyToGetValue() {\r\n    this.form.controls.topic.setValue(this.editedForm.topic);\r\n  }\r\n\r\n  private resetGlobalError() {\r\n    this.globalError = '';\r\n  }\r\n\r\n  private updateEditedFormWithFields() {\r\n    let name = this.getNameFromField();\r\n    let shown = this.getShownFromField();\r\n    let topic = this.getTopicFromField();\r\n\r\n    this.editedForm.name = name;\r\n    this.editedForm.shown = shown;\r\n    this.editedForm.topic = topic;\r\n  }\r\n\r\n  private getNameFromField(): string {\r\n    return this.form.controls.name.getRawValue();\r\n  }\r\n\r\n  private getShownFromField(): boolean {\r\n    return this.form.controls.shown.getRawValue();\r\n  }\r\n\r\n  private getTopicFromField(): Topic {\r\n    return this.form.controls.topic.getRawValue();\r\n  }\r\n\r\n  private isAnyErrorInFields(): boolean {\r\n    return this.doesControlHaveError(this.form.controls.name) ||\r\n      this.doesControlHaveError(this.form.controls.topic);\r\n  }\r\n\r\n  private doesControlHaveError(formControl: FormControl): boolean {\r\n    return formControl.errors != null;\r\n  }\r\n}\r\n","<form [formGroup]=\"form\" (ngSubmit)=\"submit()\">\r\n  <app-error-paragraph\r\n    *ngIf=\"isGlobalErrorSet()\"\r\n    [errorMessage]=\"globalError\"\r\n  ></app-error-paragraph>\r\n\r\n  <app-text-field\r\n    fieldName=\"Название\"\r\n    [formElement]=\"form.controls.name\"\r\n    [showError]=\"showAllErrors\"\r\n  ></app-text-field>\r\n\r\n  <app-combobox-topic\r\n    fieldName=\"Тема\"\r\n    [formElement]=\"form.controls.topic\"\r\n    [showError]=\"showAllErrors\"\r\n    (listenerToValueChangeReady)=\"onTopicChoiceReadyToGetValue()\"\r\n  ></app-combobox-topic>\r\n\r\n  <app-checkbox-single\r\n    fieldName=\"Отображать форму в каталоге\"\r\n    [formElement]=\"form.controls.shown\"\r\n  ></app-checkbox-single>\r\n\r\n  <br/>\r\n\r\n  <app-middle-control>\r\n    <button\r\n      type=\"submit\"\r\n      class=\"button-red-rounded\"\r\n    >Сохранить изменения</button>\r\n  </app-middle-control>\r\n</form>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}