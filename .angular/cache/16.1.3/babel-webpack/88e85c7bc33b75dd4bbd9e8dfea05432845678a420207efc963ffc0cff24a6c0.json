{"ast":null,"code":"import { catchError, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./error.service\";\nexport class RoleService {\n  constructor(http, errorService) {\n    this.http = http;\n    this.errorService = errorService;\n    this.initializeRoles();\n  }\n  areRolesEqual(role1, role2) {\n    if (!this.isRolePresent(role1) || !this.isRolePresent(role2)) return false;\n    return role1.id == role2.id && role1.name == role2.name && role1.shownName == role2.shownName;\n  }\n  isRolePresent(role) {\n    return !!role && !!role.id && !!role.name && !!role.shownName;\n  }\n  initializeRoles() {\n    const MEMBER_ROLE_ID = 1;\n    this.getRoleById(MEMBER_ROLE_ID).subscribe(result => {\n      this.memberRole = result;\n    });\n    const ADMIN_ROLE_ID = 2;\n    this.getRoleById(ADMIN_ROLE_ID).subscribe(result => {\n      this.adminRole = result;\n    });\n  }\n  getRoleById(id) {\n    let path = 'http://localhost:8080/user_roles/' + id;\n    return this.http.get(path).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  errorHandler(error) {\n    this.errorService.handle(error.message);\n    return throwError(() => error.message);\n  }\n}\nRoleService.ɵfac = function RoleService_Factory(t) {\n  return new (t || RoleService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ErrorService));\n};\nRoleService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RoleService,\n  factory: RoleService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","throwError","RoleService","constructor","http","errorService","initializeRoles","areRolesEqual","role1","role2","isRolePresent","id","name","shownName","role","MEMBER_ROLE_ID","getRoleById","subscribe","result","memberRole","ADMIN_ROLE_ID","adminRole","path","get","pipe","errorHandler","bind","error","handle","message","i0","ɵɵinject","i1","HttpClient","i2","ErrorService","factory","ɵfac","providedIn"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\service\\role.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {UserRole} from \"../entity/UserRole\";\nimport {HttpClient, HttpErrorResponse} from \"@angular/common/http\";\nimport {catchError, Observable, throwError} from \"rxjs\";\nimport {ErrorService} from \"./error.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RoleService {\n  private http: HttpClient;\n  private errorService: ErrorService;\n\n  memberRole: UserRole;\n  adminRole: UserRole;\n\n  constructor(http: HttpClient,\n              errorService: ErrorService) {\n    this.http = http;\n    this.errorService = errorService;\n\n    this.initializeRoles();\n  }\n\n  areRolesEqual(role1: UserRole, role2: UserRole): boolean {\n    if (!this.isRolePresent(role1) || !this.isRolePresent(role2))\n      return false;\n    return role1.id == role2.id && role1.name == role2.name && role1.shownName == role2.shownName;\n  }\n\n  isRolePresent(role: UserRole): boolean {\n    return !!role && !!role.id && !!role.name && !!role.shownName;\n  }\n\n  initializeRoles() {\n    const MEMBER_ROLE_ID = 1;\n    this.getRoleById(MEMBER_ROLE_ID)\n      .subscribe(result => {\n        this.memberRole = result;\n      });\n\n    const ADMIN_ROLE_ID = 2;\n    this.getRoleById(ADMIN_ROLE_ID)\n      .subscribe(result => {\n        this.adminRole = result;\n      });\n  }\n\n  getRoleById(id: number) : Observable<UserRole> {\n    let path = 'http://localhost:8080/user_roles/' + id;\n    return this.http.get<UserRole>(path)\n      .pipe(\n        catchError(this.errorHandler.bind(this)),\n      )\n  }\n\n  private errorHandler(error: HttpErrorResponse) {\n    this.errorService.handle(error.message);\n    return throwError(() => error.message);\n  }\n}\n"],"mappings":"AAGA,SAAQA,UAAU,EAAcC,UAAU,QAAO,MAAM;;;;AAMvD,OAAM,MAAOC,WAAW;EAOtBC,YAAYC,IAAgB,EAChBC,YAA0B;IACpC,IAAI,CAACD,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,YAAY,GAAGA,YAAY;IAEhC,IAAI,CAACC,eAAe,EAAE;EACxB;EAEAC,aAAaA,CAACC,KAAe,EAAEC,KAAe;IAC5C,IAAI,CAAC,IAAI,CAACC,aAAa,CAACF,KAAK,CAAC,IAAI,CAAC,IAAI,CAACE,aAAa,CAACD,KAAK,CAAC,EAC1D,OAAO,KAAK;IACd,OAAOD,KAAK,CAACG,EAAE,IAAIF,KAAK,CAACE,EAAE,IAAIH,KAAK,CAACI,IAAI,IAAIH,KAAK,CAACG,IAAI,IAAIJ,KAAK,CAACK,SAAS,IAAIJ,KAAK,CAACI,SAAS;EAC/F;EAEAH,aAAaA,CAACI,IAAc;IAC1B,OAAO,CAAC,CAACA,IAAI,IAAI,CAAC,CAACA,IAAI,CAACH,EAAE,IAAI,CAAC,CAACG,IAAI,CAACF,IAAI,IAAI,CAAC,CAACE,IAAI,CAACD,SAAS;EAC/D;EAEAP,eAAeA,CAAA;IACb,MAAMS,cAAc,GAAG,CAAC;IACxB,IAAI,CAACC,WAAW,CAACD,cAAc,CAAC,CAC7BE,SAAS,CAACC,MAAM,IAAG;MAClB,IAAI,CAACC,UAAU,GAAGD,MAAM;IAC1B,CAAC,CAAC;IAEJ,MAAME,aAAa,GAAG,CAAC;IACvB,IAAI,CAACJ,WAAW,CAACI,aAAa,CAAC,CAC5BH,SAAS,CAACC,MAAM,IAAG;MAClB,IAAI,CAACG,SAAS,GAAGH,MAAM;IACzB,CAAC,CAAC;EACN;EAEAF,WAAWA,CAACL,EAAU;IACpB,IAAIW,IAAI,GAAG,mCAAmC,GAAGX,EAAE;IACnD,OAAO,IAAI,CAACP,IAAI,CAACmB,GAAG,CAAWD,IAAI,CAAC,CACjCE,IAAI,CACHxB,UAAU,CAAC,IAAI,CAACyB,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CACzC;EACL;EAEQD,YAAYA,CAACE,KAAwB;IAC3C,IAAI,CAACtB,YAAY,CAACuB,MAAM,CAACD,KAAK,CAACE,OAAO,CAAC;IACvC,OAAO5B,UAAU,CAAC,MAAM0B,KAAK,CAACE,OAAO,CAAC;EACxC;;AAlDW3B,WAAW,C;mBAAXA,WAAW,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,YAAA;AAAA;AAAXjC,WAAW,C;SAAXA,WAAW;EAAAkC,OAAA,EAAXlC,WAAW,CAAAmC,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}