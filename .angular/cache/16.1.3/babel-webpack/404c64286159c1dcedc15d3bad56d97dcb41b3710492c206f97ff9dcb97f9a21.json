{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./role.service\";\nexport let SessionService = /*#__PURE__*/(() => {\n  class SessionService {\n    constructor(roleService) {\n      this.TOKEN_KEY = 'token';\n      this.TOKEN_BY_DEFAULT = 'no_token';\n      this.roleService = roleService;\n    }\n    setUser(user) {\n      this.user = user;\n    }\n    getUser() {\n      return this.user;\n    }\n    isCurrentUserAuthorized() {\n      return !!this.user;\n    }\n    isCurrentUserAdmin() {\n      if (!this.isCurrentUserAuthorized()) return false;\n      return this.roleService.areRolesEqual(this.user.userRole, this.roleService.adminRole);\n    }\n    isCurrentUserMember() {\n      if (!this.isCurrentUserAuthorized()) return false;\n      return this.roleService.areRolesEqual(this.user.userRole, this.roleService.memberRole);\n    }\n    resetUser() {\n      this.user = null;\n    }\n    ping() {\n      console.log('sessionStorage token=' + sessionStorage.getItem(this.TOKEN_KEY));\n      console.log('localStorage token=' + localStorage.getItem(this.TOKEN_KEY));\n    }\n    saveTokenToLocalStorage(token) {\n      localStorage.setItem(this.TOKEN_KEY, token);\n    }\n    saveTokenToSessionStorage(token) {\n      sessionStorage.setItem(this.TOKEN_KEY, token);\n    }\n    updateTokenWhereItWasSet(token) {\n      if (this.getTokenFromSessionStorage() != this.TOKEN_BY_DEFAULT) this.saveTokenToSessionStorage(token);\n      if (this.getTokenFromLocalStorage() != this.TOKEN_BY_DEFAULT) this.saveTokenToLocalStorage(token);\n    }\n    getTokenFromLocalStorage() {\n      let token = localStorage.getItem(this.TOKEN_KEY);\n      return token ? token : this.TOKEN_BY_DEFAULT;\n    }\n    getTokenFromSessionStorage() {\n      let token = sessionStorage.getItem(this.TOKEN_KEY);\n      return token ? token : this.TOKEN_BY_DEFAULT;\n    }\n    getToken() {\n      let token = this.getTokenFromSessionStorage();\n      if (token && token != this.TOKEN_BY_DEFAULT) {\n        return token;\n      }\n      token = this.getTokenFromLocalStorage();\n      if (token && token != this.TOKEN_BY_DEFAULT) {\n        this.saveTokenToSessionStorage(token);\n        return token;\n      }\n      return this.TOKEN_BY_DEFAULT;\n    }\n    removeTokenFromLocalStorage() {\n      localStorage.removeItem(this.TOKEN_KEY);\n    }\n    removeTokenFromSessionStorage() {\n      sessionStorage.removeItem(this.TOKEN_KEY);\n    }\n    removeTokenFromEverywhere() {\n      this.removeTokenFromSessionStorage();\n      this.removeTokenFromLocalStorage();\n    }\n  }\n  SessionService.ɵfac = function SessionService_Factory(t) {\n    return new (t || SessionService)(i0.ɵɵinject(i1.RoleService));\n  };\n  SessionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SessionService,\n    factory: SessionService.ɵfac,\n    providedIn: 'root'\n  });\n  return SessionService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}