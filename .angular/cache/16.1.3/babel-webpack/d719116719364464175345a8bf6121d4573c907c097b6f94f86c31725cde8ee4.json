{"ast":null,"code":"import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/user.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"../../little-components/error-paragraph/error-paragraph.component\";\nimport * as i6 from \"../../little-components/text-field-password/text-field-password.component\";\nfunction RestorePasswordComponent_app_error_paragraph_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-error-paragraph\", 6);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"errorMessage\", ctx_r0.globalError);\n  }\n}\nexport class RestorePasswordComponent {\n  constructor(userService, router, location) {\n    this.showAllErrors = false;\n    this.globalError = '';\n    this.form = new FormGroup({\n      newPassword: new FormControl('', [Validators.required, Validators.minLength(8), Validators.maxLength(30)]),\n      confirmNewPassword: new FormControl('', [Validators.required, Validators.minLength(8), Validators.maxLength(30)])\n    });\n    this.userService = userService;\n    this.router = router;\n    this.location = location;\n  }\n  ngOnDestroy() {\n    if (this.subscription) this.subscription.unsubscribe();\n  }\n  isGlobalErrorSet() {\n    return this.globalError != '';\n  }\n  submit() {\n    if (this.anyErrorExists()) return;\n    this.changePassword();\n  }\n  anyErrorExists() {\n    this.resetGlobalError();\n    if (this.isAnyErrorInFields()) {\n      this.showAllErrors = true;\n      return true;\n    }\n    return false;\n  }\n  changePassword() {\n    let linkFromMail = this.getCurrentUrl();\n    let newPassword = this.getNewPasswordFromField();\n    this.subscription = this.userService.restorePassword(linkFromMail, newPassword).subscribe(result => {\n      console.log(result);\n      if (result.success) {\n        this.doTransferToSuccessPage();\n      } else {\n        this.globalError = result.message;\n      }\n    });\n  }\n  resetGlobalError() {\n    this.globalError = '';\n  }\n  getNewPasswordFromField() {\n    return this.form.controls.newPassword.getRawValue();\n  }\n  getConfirmNewPasswordFromField() {\n    return this.form.controls.confirmNewPassword.getRawValue();\n  }\n  isAnyErrorInFields() {\n    let newPassword = this.getNewPasswordFromField();\n    let confirmNewPassword = this.getConfirmNewPasswordFromField();\n    if (newPassword != confirmNewPassword) {\n      this.globalError = 'Новый пароль и его подтверждение не совпадают';\n      return true;\n    }\n    return this.doesControlHaveError(this.form.controls.newPassword) || this.doesControlHaveError(this.form.controls.confirmNewPassword);\n  }\n  doesControlHaveError(formControl) {\n    return formControl.errors != null;\n  }\n  doTransferToSuccessPage() {\n    this.router.navigate(['/successful-restoration']);\n  }\n  getCurrentUrl() {\n    return this.location.href;\n  }\n}\nRestorePasswordComponent.ɵfac = function RestorePasswordComponent_Factory(t) {\n  return new (t || RestorePasswordComponent)(i0.ɵɵdirectiveInject(i1.UserService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(Location));\n};\nRestorePasswordComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RestorePasswordComponent,\n  selectors: [[\"app-restore-password\"]],\n  decls: 8,\n  vars: 6,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [3, \"errorMessage\", 4, \"ngIf\"], [\"fieldName\", \"\\u041D\\u043E\\u0432\\u044B\\u0439 \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C\", 3, \"formElement\", \"showError\"], [\"fieldName\", \"\\u041F\\u043E\\u0434\\u0442\\u0432\\u0435\\u0440\\u0434\\u0438\\u0442\\u0435 \\u043D\\u043E\\u0432\\u044B\\u0439 \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C\", 3, \"formElement\", \"showError\"], [1, \"flex\", \"flex-row\", \"items-center\"], [\"type\", \"submit\", 1, \"button-red-rounded\"], [3, \"errorMessage\"]],\n  template: function RestorePasswordComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function RestorePasswordComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.submit();\n      });\n      i0.ɵɵtemplate(1, RestorePasswordComponent_app_error_paragraph_1_Template, 1, 1, \"app-error-paragraph\", 1);\n      i0.ɵɵelement(2, \"app-text-field-password\", 2)(3, \"app-text-field-password\", 3)(4, \"br\");\n      i0.ɵɵelementStart(5, \"div\", 4)(6, \"button\", 5);\n      i0.ɵɵtext(7, \"\\u0418\\u0437\\u043C\\u0435\\u043D\\u0438\\u0442\\u044C\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isGlobalErrorSet());\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formElement\", ctx.form.controls.newPassword)(\"showError\", ctx.showAllErrors);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formElement\", ctx.form.controls.confirmNewPassword)(\"showError\", ctx.showAllErrors);\n    }\n  },\n  dependencies: [i3.NgIf, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i5.ErrorParagraphComponent, i6.TextFieldPasswordComponent],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["FormControl","FormGroup","Validators","i0","ɵɵelement","ɵɵproperty","ctx_r0","globalError","RestorePasswordComponent","constructor","userService","router","location","showAllErrors","form","newPassword","required","minLength","maxLength","confirmNewPassword","ngOnDestroy","subscription","unsubscribe","isGlobalErrorSet","submit","anyErrorExists","changePassword","resetGlobalError","isAnyErrorInFields","linkFromMail","getCurrentUrl","getNewPasswordFromField","restorePassword","subscribe","result","console","log","success","doTransferToSuccessPage","message","controls","getRawValue","getConfirmNewPasswordFromField","doesControlHaveError","formControl","errors","navigate","href","ɵɵdirectiveInject","i1","UserService","i2","Router","Location","selectors","decls","vars","consts","template","RestorePasswordComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","RestorePasswordComponent_Template_form_ngSubmit_0_listener","ɵɵtemplate","RestorePasswordComponent_app_error_paragraph_1_Template","ɵɵtext","ɵɵelementEnd","ɵɵadvance"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\components\\restore-password\\restore-password.component.ts","C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\components\\restore-password\\restore-password.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport {UserService} from \"../../service/user.service\";\nimport {Router} from \"@angular/router\";\nimport {Subscription} from \"rxjs\";\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\n\n@Component({\n  selector: 'app-restore-password',\n  templateUrl: './restore-password.component.html',\n  styleUrls: ['./restore-password.component.css']\n})\nexport class RestorePasswordComponent {\n  private userService: UserService;\n  private router: Router;\n  private location: Location;\n\n  showAllErrors = false;\n  globalError: string = '';\n\n  private subscription: Subscription;\n\n  form = new FormGroup({\n    newPassword: new FormControl<string>('', [\n      Validators.required,\n      Validators.minLength(8),\n      Validators.maxLength(30)\n    ]),\n    confirmNewPassword: new FormControl<string>('', [\n      Validators.required,\n      Validators.minLength(8),\n      Validators.maxLength(30)\n    ])\n  })\n\n  constructor(userService: UserService,\n              router: Router,\n              location: Location) {\n    this.userService = userService;\n    this.router = router;\n    this.location = location;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription)\n      this.subscription.unsubscribe();\n  }\n\n  isGlobalErrorSet(): boolean {\n    return this.globalError != '';\n  }\n\n  submit() {\n    if (this.anyErrorExists())\n      return;\n\n    this.changePassword();\n  }\n\n  private anyErrorExists(): boolean {\n    this.resetGlobalError();\n\n    if (this.isAnyErrorInFields()) {\n      this.showAllErrors = true;\n      return true;\n    }\n    return false;\n  }\n\n  private changePassword() {\n    let linkFromMail = this.getCurrentUrl();\n    let newPassword = this.getNewPasswordFromField();\n\n    this.subscription = this.userService.restorePassword(linkFromMail, newPassword)\n      .subscribe(result => {\n        console.log(result);\n        if (result.success) {\n          this.doTransferToSuccessPage();\n        }\n        else {\n          this.globalError = result.message;\n        }\n      });\n  }\n\n  resetGlobalError() {\n    this.globalError = '';\n  }\n\n  getNewPasswordFromField(): string {\n    return this.form.controls.newPassword.getRawValue();\n  }\n\n  getConfirmNewPasswordFromField(): string {\n    return this.form.controls.confirmNewPassword.getRawValue();\n  }\n\n  isAnyErrorInFields(): boolean {\n    let newPassword = this.getNewPasswordFromField();\n    let confirmNewPassword = this.getConfirmNewPasswordFromField();\n    if (newPassword != confirmNewPassword) {\n      this.globalError = 'Новый пароль и его подтверждение не совпадают';\n      return true;\n    }\n\n    return this.doesControlHaveError(this.form.controls.newPassword) ||\n      this.doesControlHaveError(this.form.controls.confirmNewPassword);\n  }\n\n  doesControlHaveError(formControl: FormControl): boolean {\n    return formControl.errors != null;\n  }\n\n  doTransferToSuccessPage() {\n    this.router.navigate(['/successful-restoration']);\n  }\n\n  private getCurrentUrl() {\n    return this.location.href;\n  }\n}\n","<form [formGroup]=\"form\" (ngSubmit)=\"submit()\">\n  <app-error-paragraph\n    *ngIf=\"isGlobalErrorSet()\"\n    [errorMessage]=\"globalError\"\n  ></app-error-paragraph>\n\n  <app-text-field-password\n    fieldName=\"Новый пароль\"\n    [formElement]=\"form.controls.newPassword\"\n    [showError]=\"showAllErrors\"\n  ></app-text-field-password>\n\n  <app-text-field-password\n    fieldName=\"Подтвердите новый пароль\"\n    [formElement]=\"form.controls.confirmNewPassword\"\n    [showError]=\"showAllErrors\"\n  ></app-text-field-password>\n\n  <br/>\n\n  <div\n    class=\"flex flex-row items-center\"\n  >\n    <button\n      type=\"submit\"\n      class=\"button-red-rounded\"\n    >Изменить</button>\n  </div>\n\n</form>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}