{"ast":null,"code":"import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/field.service\";\nimport * as i2 from \"../../service/modal-edit-window.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"../../little-components/text-field/text-field.component\";\nimport * as i6 from \"../../little-components/error-paragraph/error-paragraph.component\";\nimport * as i7 from \"../../little-components/middle-control/middle-control.component\";\nimport * as i8 from \"../../little-components/checkbox-single/checkbox-single.component\";\nimport * as i9 from \"../../little-components/combobox-field-type/combobox-field-type.component\";\nimport * as i10 from \"../option-list/option-list.component\";\nfunction EditFieldComponent_app_error_paragraph_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-error-paragraph\", 8);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"errorMessage\", ctx_r0.globalError);\n  }\n}\nfunction EditFieldComponent_app_option_list_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-option-list\", 9);\n    i0.ɵɵlistener(\"fieldOptionsChange\", function EditFieldComponent_app_option_list_4_Template_app_option_list_fieldOptionsChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.fieldOptions = $event);\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"visible\", ctx_r1.shouldShowOptionList())(\"fieldOptions\", ctx_r1.fieldOptions);\n  }\n}\nexport let EditFieldComponent = /*#__PURE__*/(() => {\n  class EditFieldComponent {\n    constructor(fieldService, modalService) {\n      this.globalError = '';\n      this.showAllErrors = false;\n      this.form = new FormGroup({\n        label: new FormControl('', [Validators.minLength(2), Validators.maxLength(300), Validators.required]),\n        type: new FormControl(null, [Validators.required]),\n        required: new FormControl(false),\n        active: new FormControl(true)\n      });\n      this.fieldService = fieldService;\n      this.modalService = modalService;\n      this.editedField = this.modalService.getEditableObject();\n      this.fieldType = this.editedField.type;\n    }\n    ngOnInit() {\n      this.updateFormFields();\n    }\n    ngOnDestroy() {\n      if (this.subscriptionSaveField) this.subscriptionSaveField.unsubscribe();\n    }\n    isGlobalErrorSet() {\n      return this.globalError != '';\n    }\n    submit() {\n      if (this.anyErrorExists()) return;\n      this.saveField();\n    }\n    anyErrorExists() {\n      this.resetGlobalError();\n      if (this.isAnyErrorInFields()) {\n        this.showAllErrors = true;\n        return true;\n      }\n      return false;\n    }\n    saveField() {\n      this.updateEditedFormWithFields();\n      this.subscriptionSaveField = this.fieldService.saveField(this.editedField).subscribe(result => {\n        console.log(result);\n        if (result.success) {\n          this.modalService.close();\n          location.reload();\n        } else {\n          this.globalError = result.message;\n        }\n      });\n    }\n    onFieldTypeSelected(fieldType) {\n      this.fieldType = fieldType;\n    }\n    shouldShowOptionList() {\n      if (!!this.fieldType) return this.fieldType.ableToHaveOptions;\n      return false;\n    }\n    updateFormFields() {\n      this.form.controls.label.setValue(this.editedField.label);\n      this.form.controls.required.setValue(this.editedField.required);\n      this.form.controls.active.setValue(this.editedField.active);\n      this.fieldOptions = this.editedField.options;\n    }\n    onFieldTypeChoiceReadyToGetValue() {\n      this.form.controls.type.setValue(this.editedField.type);\n    }\n    resetGlobalError() {\n      this.globalError = '';\n    }\n    updateEditedFormWithFields() {\n      let label = this.getLabelFromField();\n      let required = this.getRequiredFromField();\n      let active = this.getActiveFromField();\n      this.editedField.label = label;\n      this.editedField.required = required;\n      this.editedField.active = active;\n      this.editedField.type = this.fieldType;\n      if (this.shouldShowOptionList()) this.editedField.options = this.fieldOptions;else this.editedField.options = [];\n    }\n    getLabelFromField() {\n      return this.form.controls.label.getRawValue();\n    }\n    getRequiredFromField() {\n      return this.form.controls.required.getRawValue();\n    }\n    getActiveFromField() {\n      return this.form.controls.active.getRawValue();\n    }\n    isAnyErrorInFields() {\n      return this.doesControlHaveError(this.form.controls.label) || this.doesControlHaveError(this.form.controls.type);\n    }\n    doesControlHaveError(formControl) {\n      return formControl.errors != null;\n    }\n  }\n  EditFieldComponent.ɵfac = function EditFieldComponent_Factory(t) {\n    return new (t || EditFieldComponent)(i0.ɵɵdirectiveInject(i1.FieldService), i0.ɵɵdirectiveInject(i2.ModalEditWindowService));\n  };\n  EditFieldComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EditFieldComponent,\n    selectors: [[\"app-edit-field\"]],\n    decls: 12,\n    vars: 9,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [3, \"errorMessage\", 4, \"ngIf\"], [\"fieldName\", \"\\u0412\\u043E\\u043F\\u0440\\u043E\\u0441\", 3, \"formElement\", \"showError\"], [\"fieldName\", \"\\u0422\\u0438\\u043F\", 3, \"formElement\", \"showError\", \"newValueSelected\", \"listenerToValueChangeReady\"], [3, \"visible\", \"fieldOptions\", \"fieldOptionsChange\", 4, \"ngIf\"], [\"fieldName\", \"\\u041E\\u0431\\u044F\\u0437\\u0430\\u0442\\u0435\\u043B\\u044C\\u043D\\u043E\\u0435 \\u043F\\u043E\\u043B\\u0435\", 3, \"formElement\"], [\"fieldName\", \"\\u0410\\u043A\\u0442\\u0438\\u0432\\u043D\\u043E\", 3, \"formElement\"], [\"type\", \"submit\", 1, \"button-red-rounded\"], [3, \"errorMessage\"], [3, \"visible\", \"fieldOptions\", \"fieldOptionsChange\"]],\n    template: function EditFieldComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function EditFieldComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.submit();\n        });\n        i0.ɵɵtemplate(1, EditFieldComponent_app_error_paragraph_1_Template, 1, 1, \"app-error-paragraph\", 1);\n        i0.ɵɵelement(2, \"app-text-field\", 2);\n        i0.ɵɵelementStart(3, \"app-combobox-field-type\", 3);\n        i0.ɵɵlistener(\"newValueSelected\", function EditFieldComponent_Template_app_combobox_field_type_newValueSelected_3_listener($event) {\n          return ctx.onFieldTypeSelected($event);\n        })(\"listenerToValueChangeReady\", function EditFieldComponent_Template_app_combobox_field_type_listenerToValueChangeReady_3_listener() {\n          return ctx.onFieldTypeChoiceReadyToGetValue();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(4, EditFieldComponent_app_option_list_4_Template, 1, 2, \"app-option-list\", 4);\n        i0.ɵɵelement(5, \"br\")(6, \"app-checkbox-single\", 5)(7, \"app-checkbox-single\", 6)(8, \"br\");\n        i0.ɵɵelementStart(9, \"app-middle-control\")(10, \"button\", 7);\n        i0.ɵɵtext(11, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C \\u0438\\u0437\\u043C\\u0435\\u043D\\u0435\\u043D\\u0438\\u044F\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isGlobalErrorSet());\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formElement\", ctx.form.controls.label)(\"showError\", ctx.showAllErrors);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formElement\", ctx.form.controls.type)(\"showError\", ctx.showAllErrors);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.fieldOptions);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formElement\", ctx.form.controls.required);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formElement\", ctx.form.controls.active);\n      }\n    },\n    dependencies: [i3.NgIf, i4.ɵNgNoValidate, i4.NgControlStatusGroup, i4.FormGroupDirective, i5.TextFieldComponent, i6.ErrorParagraphComponent, i7.MiddleControlComponent, i8.CheckboxSingleComponent, i9.ComboboxFieldTypeComponent, i10.OptionListComponent]\n  });\n  return EditFieldComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}