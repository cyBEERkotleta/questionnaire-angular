{"ast":null,"code":"import { Field } from \"../../entity/Field\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/field.service\";\nimport * as i2 from \"../../service/form.service\";\nimport * as i3 from \"../../service/modal-create-window.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"../../little-components/text-field/text-field.component\";\nimport * as i7 from \"../../little-components/error-paragraph/error-paragraph.component\";\nimport * as i8 from \"../../little-components/middle-control/middle-control.component\";\nimport * as i9 from \"../../little-components/checkbox-single/checkbox-single.component\";\nimport * as i10 from \"../../little-components/combobox-field-type/combobox-field-type.component\";\nimport * as i11 from \"../option-list/option-list.component\";\nfunction CreateFieldComponent_app_error_paragraph_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-error-paragraph\", 8);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"errorMessage\", ctx_r0.globalError);\n  }\n}\nexport let CreateFieldComponent = /*#__PURE__*/(() => {\n  class CreateFieldComponent {\n    constructor(fieldService, formService, modalService) {\n      this.globalError = '';\n      this.showAllErrors = false;\n      this.fieldOptions = [];\n      this.form = new FormGroup({\n        label: new FormControl('', [Validators.minLength(2), Validators.maxLength(300), Validators.required]),\n        type: new FormControl(null, [Validators.required]),\n        required: new FormControl(false),\n        active: new FormControl(true)\n      });\n      this.fieldService = fieldService;\n      this.formService = formService;\n      this.modalService = modalService;\n    }\n    ngOnInit() {\n      this.subscriptionForm = this.formService.getFormById(this.formId).subscribe(result => {\n        this.formOfField = result;\n      });\n    }\n    ngOnDestroy() {\n      if (this.subscriptionForm) this.subscriptionForm.unsubscribe();\n      if (this.subscriptionSaveField) this.subscriptionSaveField.unsubscribe();\n    }\n    isGlobalErrorSet() {\n      return this.globalError != '';\n    }\n    submit() {\n      if (this.anyErrorExists()) return;\n      this.addField();\n    }\n    anyErrorExists() {\n      this.resetGlobalError();\n      if (this.isAnyErrorInFields()) {\n        this.showAllErrors = true;\n        return true;\n      }\n      return false;\n    }\n    addField() {\n      let newField = this.createField();\n      this.subscriptionSaveField = this.fieldService.saveField(newField).subscribe(result => {\n        console.log(result);\n        if (result.success) {\n          this.modalService.close();\n          location.reload();\n        } else {\n          this.globalError = result.message;\n        }\n      });\n    }\n    onFieldTypeSelected(fieldType) {\n      this.fieldType = fieldType;\n    }\n    shouldShowOptionList() {\n      if (!!this.fieldType) return this.fieldType.ableToHaveOptions;\n      return false;\n    }\n    resetGlobalError() {\n      this.globalError = '';\n    }\n    createField() {\n      let label = this.getLabelFromField();\n      let required = this.getRequiredFromField();\n      let active = this.getActiveFromField();\n      let fieldOptions = this.fieldOptions;\n      if (!this.shouldShowOptionList()) fieldOptions = [];\n      return new Field(null, label, this.fieldType, required, active, fieldOptions, this.formOfField);\n    }\n    getLabelFromField() {\n      return this.form.controls.label.getRawValue();\n    }\n    getRequiredFromField() {\n      return this.form.controls.required.getRawValue();\n    }\n    getActiveFromField() {\n      return this.form.controls.active.getRawValue();\n    }\n    isAnyErrorInFields() {\n      return this.doesControlHaveError(this.form.controls.label) || this.doesControlHaveError(this.form.controls.type);\n    }\n    doesControlHaveError(formControl) {\n      return formControl.errors != null;\n    }\n  }\n  CreateFieldComponent.ɵfac = function CreateFieldComponent_Factory(t) {\n    return new (t || CreateFieldComponent)(i0.ɵɵdirectiveInject(i1.FieldService), i0.ɵɵdirectiveInject(i2.FormService), i0.ɵɵdirectiveInject(i3.ModalCreateWindowService));\n  };\n  CreateFieldComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateFieldComponent,\n    selectors: [[\"app-create-field\"]],\n    inputs: {\n      formId: \"formId\"\n    },\n    decls: 11,\n    vars: 10,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [3, \"errorMessage\", 4, \"ngIf\"], [\"fieldName\", \"\\u0412\\u043E\\u043F\\u0440\\u043E\\u0441\", 3, \"formElement\", \"showError\"], [\"fieldName\", \"\\u0422\\u0438\\u043F\", 3, \"formElement\", \"showError\", \"newValueSelected\"], [3, \"visible\", \"fieldOptions\", \"fieldOptionsChange\"], [\"fieldName\", \"\\u041E\\u0431\\u044F\\u0437\\u0430\\u0442\\u0435\\u043B\\u044C\\u043D\\u043E\\u0435 \\u043F\\u043E\\u043B\\u0435\", 3, \"formElement\"], [\"fieldName\", \"\\u0410\\u043A\\u0442\\u0438\\u0432\\u043D\\u043E\", 3, \"formElement\"], [\"type\", \"submit\", 1, \"button-red-rounded\"], [3, \"errorMessage\"]],\n    template: function CreateFieldComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function CreateFieldComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.submit();\n        });\n        i0.ɵɵtemplate(1, CreateFieldComponent_app_error_paragraph_1_Template, 1, 1, \"app-error-paragraph\", 1);\n        i0.ɵɵelement(2, \"app-text-field\", 2);\n        i0.ɵɵelementStart(3, \"app-combobox-field-type\", 3);\n        i0.ɵɵlistener(\"newValueSelected\", function CreateFieldComponent_Template_app_combobox_field_type_newValueSelected_3_listener($event) {\n          return ctx.onFieldTypeSelected($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"app-option-list\", 4);\n        i0.ɵɵlistener(\"fieldOptionsChange\", function CreateFieldComponent_Template_app_option_list_fieldOptionsChange_4_listener($event) {\n          return ctx.fieldOptions = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"app-checkbox-single\", 5)(6, \"app-checkbox-single\", 6)(7, \"br\");\n        i0.ɵɵelementStart(8, \"app-middle-control\")(9, \"button\", 7);\n        i0.ɵɵtext(10, \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u043F\\u043E\\u043B\\u0435\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isGlobalErrorSet());\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formElement\", ctx.form.controls.label)(\"showError\", ctx.showAllErrors);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formElement\", ctx.form.controls.type)(\"showError\", ctx.showAllErrors);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"visible\", ctx.shouldShowOptionList())(\"fieldOptions\", ctx.fieldOptions);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formElement\", ctx.form.controls.required);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formElement\", ctx.form.controls.active);\n      }\n    },\n    dependencies: [i4.NgIf, i5.ɵNgNoValidate, i5.NgControlStatusGroup, i5.FormGroupDirective, i6.TextFieldComponent, i7.ErrorParagraphComponent, i8.MiddleControlComponent, i9.CheckboxSingleComponent, i10.ComboboxFieldTypeComponent, i11.OptionListComponent]\n  });\n  return CreateFieldComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}