{"ast":null,"code":"import { catchError, map, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./error.service\";\nimport * as i3 from \"./session.service\";\nexport class FormService {\n  constructor(http, errorService, sessionService) {\n    this.http = http;\n    this.errorService = errorService;\n    this.sessionService = sessionService;\n  }\n  isFormPresent(form) {\n    return !!form && !!form.id && !!form.name && !!form.user && !!form.topic;\n  }\n  getAll() {\n    return this.http.get('http://localhost:8090/forms').pipe(catchError(this.errorHandler.bind(this)), map(forms => {\n      return forms.map(form => {\n        form.topic.shownName = form.topic.name;\n        return form;\n      });\n    }));\n  }\n  getFormsByTopicId(topicId) {\n    let path = 'http://localhost:8090/forms/topic_' + topicId;\n    return this.http.get(path).pipe(catchError(this.errorHandler.bind(this)), map(forms => {\n      return forms.map(form => {\n        form.topic.shownName = form.topic.name;\n        return form;\n      });\n    }));\n  }\n  getFormsByUserId(userId) {\n    let token = this.sessionService.getToken();\n    let path = 'http://localhost:8090/forms/user_' + userId;\n    return this.http.post(path, token).pipe(catchError(this.errorHandler.bind(this)), map(forms => {\n      return forms.map(form => {\n        form.topic.shownName = form.topic.name;\n        return form;\n      });\n    }));\n  }\n  getFormById(id) {\n    let token = this.sessionService.getToken();\n    let path = 'http://localhost:8090/forms/' + id;\n    return this.http.post(path, token).pipe(catchError(this.errorHandler.bind(this)), map(form => {\n      form.topic.shownName = form.topic.name;\n      return form;\n    }));\n  }\n  saveForm(form) {\n    let token = this.sessionService.getToken();\n    let tokenWithForm = {\n      token: token,\n      form: form\n    };\n    return this.http.post('http://localhost:8090/save_form', tokenWithForm).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  deleteForm(form) {\n    let token = this.sessionService.getToken();\n    let tokenWithForm = {\n      token: token,\n      form: form\n    };\n    return this.http.post('http://localhost:8090/delete_form', tokenWithForm).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  errorHandler(error) {\n    this.errorService.handle(error.message);\n    return throwError(() => error.message);\n  }\n}\nFormService.ɵfac = function FormService_Factory(t) {\n  return new (t || FormService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ErrorService), i0.ɵɵinject(i3.SessionService));\n};\nFormService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FormService,\n  factory: FormService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","map","throwError","FormService","constructor","http","errorService","sessionService","isFormPresent","form","id","name","user","topic","getAll","get","pipe","errorHandler","bind","forms","shownName","getFormsByTopicId","topicId","path","getFormsByUserId","userId","token","getToken","post","getFormById","saveForm","tokenWithForm","deleteForm","error","handle","message","i0","ɵɵinject","i1","HttpClient","i2","ErrorService","i3","SessionService","factory","ɵfac","providedIn"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\service\\form.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {HttpClient, HttpErrorResponse} from \"@angular/common/http\";\r\nimport {ErrorService} from \"./error.service\";\r\nimport {catchError, map, Observable, throwError} from \"rxjs\";\r\nimport {RequestResult} from \"../additional/RequestResult\";\r\nimport {Form} from \"../entity/Form\";\r\nimport {SessionService} from \"./session.service\";\r\nimport {Field} from \"../entity/Field\";\r\nimport {Topic} from \"../entity/Topic\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FormService {\r\n  private http: HttpClient;\r\n  private errorService: ErrorService;\r\n  private sessionService: SessionService;\r\n\r\n  constructor(http: HttpClient,\r\n              errorService: ErrorService,\r\n              sessionService: SessionService) {\r\n    this.http = http;\r\n    this.errorService = errorService;\r\n    this.sessionService = sessionService;\r\n  }\r\n\r\n  isFormPresent(form: Form): boolean {\r\n    return !!form && !!form.id && !!form.name && !!form.user && !!form.topic;\r\n  }\r\n\r\n  getAll(): Observable<Form[]> {\r\n    return this.http.get<Form[]>('http://localhost:8090/forms')\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this)),\r\n        map(forms => {\r\n          return forms.map(form => {\r\n            form.topic.shownName = form.topic.name;\r\n            return form;\r\n          });\r\n        })\r\n      );\r\n  }\r\n\r\n  getFormsByTopicId(topicId: bigint) : Observable<Form[]> {\r\n    let path = 'http://localhost:8090/forms/topic_' + topicId;\r\n    return this.http.get<Form[]>(path)\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this)),\r\n        map(forms => {\r\n          return forms.map(form => {\r\n            form.topic.shownName = form.topic.name;\r\n            return form;\r\n          });\r\n        })\r\n      );\r\n  }\r\n\r\n  getFormsByUserId(userId: bigint) : Observable<Form[]> {\r\n    let token = this.sessionService.getToken();\r\n    let path = 'http://localhost:8090/forms/user_' + userId;\r\n    return this.http.post<Form[]>(path, token)\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this)),\r\n        map(forms => {\r\n          return forms.map(form => {\r\n            form.topic.shownName = form.topic.name;\r\n            return form;\r\n          });\r\n        })\r\n      );\r\n  }\r\n\r\n  getFormById(id: bigint): Observable<Form> {\r\n    let token = this.sessionService.getToken();\r\n    let path = 'http://localhost:8090/forms/' + id;\r\n    return this.http.post<Form>(path, token)\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this)),\r\n        map(form => {\r\n          form.topic.shownName = form.topic.name;\r\n          return form;\r\n        })\r\n      );\r\n  }\r\n\r\n  saveForm(form: Form): Observable<RequestResult> {\r\n    let token = this.sessionService.getToken();\r\n    let tokenWithForm = {token: token, form: form};\r\n    return this.http.post<RequestResult>('http://localhost:8090/save_form', tokenWithForm)\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this))\r\n      );\r\n  }\r\n\r\n  deleteForm(form: Form): Observable<RequestResult> {\r\n    let token = this.sessionService.getToken();\r\n    let tokenWithForm = {token: token, form: form};\r\n    return this.http.post<RequestResult>('http://localhost:8090/delete_form', tokenWithForm)\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this))\r\n      );\r\n  }\r\n\r\n  private errorHandler(error: HttpErrorResponse) {\r\n    this.errorService.handle(error.message);\r\n    return throwError(() => error.message);\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}