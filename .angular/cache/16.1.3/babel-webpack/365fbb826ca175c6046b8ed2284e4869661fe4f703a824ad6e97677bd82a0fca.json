{"ast":null,"code":"import { catchError, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./error.service\";\nimport * as i3 from \"./session.service\";\nexport class TopicService {\n  constructor(http, errorService, sessionService) {\n    this.http = http;\n    this.errorService = errorService;\n    this.sessionService = sessionService;\n  }\n  getAll() {\n    return this.http.get('http://localhost:8080/topics').pipe(catchError(this.errorHandler.bind(this)));\n  }\n  getTopicById(id) {\n    let path = 'http://localhost:8080/topics/' + id;\n    return this.http.get(path).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  saveTopic(topic) {\n    let token = this.sessionService.getToken();\n    let tokenWithTopic = {\n      token: token,\n      topic: topic\n    };\n    return this.http.post('http://localhost:8080/save_topic', tokenWithTopic).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  deleteTopic(topic) {\n    let token = this.sessionService.getToken();\n    let tokenWithTopic = {\n      token: token,\n      topic: topic\n    };\n    return this.http.post('http://localhost:8080/delete_topic', tokenWithTopic).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  errorHandler(error) {\n    this.errorService.handle(error.message);\n    return throwError(() => error.message);\n  }\n}\nTopicService.ɵfac = function TopicService_Factory(t) {\n  return new (t || TopicService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ErrorService), i0.ɵɵinject(i3.SessionService));\n};\nTopicService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TopicService,\n  factory: TopicService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","throwError","TopicService","constructor","http","errorService","sessionService","getAll","get","pipe","errorHandler","bind","getTopicById","id","path","saveTopic","topic","token","getToken","tokenWithTopic","post","deleteTopic","error","handle","message","i0","ɵɵinject","i1","HttpClient","i2","ErrorService","i3","SessionService","factory","ɵfac","providedIn"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\service\\topic.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient, HttpErrorResponse} from \"@angular/common/http\";\nimport {ErrorService} from \"./error.service\";\nimport {Topic} from \"../entity/Topic\";\nimport {catchError, Observable, throwError} from \"rxjs\";\nimport {RequestResult} from \"../additional/RequestResult\";\nimport {SessionService} from \"./session.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TopicService {\n  private http: HttpClient;\n  private errorService: ErrorService;\n  private sessionService: SessionService;\n\n  constructor(http: HttpClient,\n              errorService: ErrorService,\n              sessionService: SessionService) {\n    this.http = http;\n    this.errorService = errorService;\n    this.sessionService = sessionService;\n  }\n\n  getAll() : Observable<Topic[]> {\n    return this.http.get<Topic[]>('http://localhost:8080/topics')\n      .pipe(\n        catchError(this.errorHandler.bind(this)),\n      )\n  }\n\n  getTopicById(id: bigint): Observable<Topic> {\n    let path = 'http://localhost:8080/topics/' + id;\n    return this.http.get<Topic>(path)\n      .pipe(\n        catchError(this.errorHandler.bind(this)),\n      );\n  }\n\n  saveTopic(topic: Topic): Observable<RequestResult> {\n    let token = this.sessionService.getToken();\n    let tokenWithTopic = {token: token, topic: topic};\n    return this.http.post<RequestResult>('http://localhost:8080/save_topic', tokenWithTopic)\n      .pipe(\n        catchError(this.errorHandler.bind(this)),\n      );\n  }\n\n  deleteTopic(topic: Topic): Observable<RequestResult> {\n    let token = this.sessionService.getToken();\n    let tokenWithTopic = {token: token, topic: topic};\n    return this.http.post<RequestResult>('http://localhost:8080/delete_topic', tokenWithTopic)\n      .pipe(\n        catchError(this.errorHandler.bind(this)),\n      );\n  }\n\n  private errorHandler(error: HttpErrorResponse) {\n    this.errorService.handle(error.message);\n    return throwError(() => error.message);\n  }\n}\n"],"mappings":"AAIA,SAAQA,UAAU,EAAcC,UAAU,QAAO,MAAM;;;;;AAOvD,OAAM,MAAOC,YAAY;EAKvBC,YAAYC,IAAgB,EAChBC,YAA0B,EAC1BC,cAA8B;IACxC,IAAI,CAACF,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,cAAc,GAAGA,cAAc;EACtC;EAEAC,MAAMA,CAAA;IACJ,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAU,8BAA8B,CAAC,CAC1DC,IAAI,CACHT,UAAU,CAAC,IAAI,CAACU,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CACzC;EACL;EAEAC,YAAYA,CAACC,EAAU;IACrB,IAAIC,IAAI,GAAG,+BAA+B,GAAGD,EAAE;IAC/C,OAAO,IAAI,CAACT,IAAI,CAACI,GAAG,CAAQM,IAAI,CAAC,CAC9BL,IAAI,CACHT,UAAU,CAAC,IAAI,CAACU,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CACzC;EACL;EAEAI,SAASA,CAACC,KAAY;IACpB,IAAIC,KAAK,GAAG,IAAI,CAACX,cAAc,CAACY,QAAQ,EAAE;IAC1C,IAAIC,cAAc,GAAG;MAACF,KAAK,EAAEA,KAAK;MAAED,KAAK,EAAEA;IAAK,CAAC;IACjD,OAAO,IAAI,CAACZ,IAAI,CAACgB,IAAI,CAAgB,kCAAkC,EAAED,cAAc,CAAC,CACrFV,IAAI,CACHT,UAAU,CAAC,IAAI,CAACU,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CACzC;EACL;EAEAU,WAAWA,CAACL,KAAY;IACtB,IAAIC,KAAK,GAAG,IAAI,CAACX,cAAc,CAACY,QAAQ,EAAE;IAC1C,IAAIC,cAAc,GAAG;MAACF,KAAK,EAAEA,KAAK;MAAED,KAAK,EAAEA;IAAK,CAAC;IACjD,OAAO,IAAI,CAACZ,IAAI,CAACgB,IAAI,CAAgB,oCAAoC,EAAED,cAAc,CAAC,CACvFV,IAAI,CACHT,UAAU,CAAC,IAAI,CAACU,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CACzC;EACL;EAEQD,YAAYA,CAACY,KAAwB;IAC3C,IAAI,CAACjB,YAAY,CAACkB,MAAM,CAACD,KAAK,CAACE,OAAO,CAAC;IACvC,OAAOvB,UAAU,CAAC,MAAMqB,KAAK,CAACE,OAAO,CAAC;EACxC;;AAjDWtB,YAAY,C;mBAAZA,YAAY,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,YAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,cAAA;AAAA;AAAZ9B,YAAY,C;SAAZA,YAAY;EAAA+B,OAAA,EAAZ/B,YAAY,CAAAgC,IAAA;EAAAC,UAAA,EAFX;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}