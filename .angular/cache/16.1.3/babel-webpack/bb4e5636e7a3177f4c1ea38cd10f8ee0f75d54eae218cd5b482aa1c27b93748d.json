{"ast":null,"code":"import { WordForm } from \"../additional/WordForm\";\nimport * as i0 from \"@angular/core\";\nexport class WordFormService {\n  constructor() {\n    this.question = new WordForm('вопрос', 'вопроса', 'вопросов');\n  }\n  getQuestionForm(count) {\n    return this.getForm(this.question, count);\n  }\n  getForm(word, count) {\n    if (count >= 11 && count <= 14) return word.many;\n    if (count % 10 == 1) return word.one;\n    if (count % 10 == 2 || count % 10 == 3 || count % 10 == 4) return word.two;\n    return word.many;\n  }\n}\nWordFormService.ɵfac = function WordFormService_Factory(t) {\n  return new (t || WordFormService)();\n};\nWordFormService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WordFormService,\n  factory: WordFormService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["WordForm","WordFormService","constructor","question","getQuestionForm","count","getForm","word","many","one","two","factory","ɵfac","providedIn"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\service\\word-form.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {WordForm} from \"../additional/WordForm\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WordFormService {\r\n  private question = new WordForm('вопрос', 'вопроса', 'вопросов');\r\n\r\n  getQuestionForm(count: number): string {\r\n    return this.getForm(this.question, count);\r\n  }\r\n\r\n  private getForm(word: WordForm, count: number): string {\r\n    if (count >= 11 && count <= 14)\r\n      return word.many;\r\n\r\n    if (count % 10 == 1)\r\n      return word.one;\r\n\r\n    if (count % 10 == 2 || count % 10 == 3 || count % 10 == 4)\r\n      return word.two;\r\n\r\n    return word.many;\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAQA,QAAQ,QAAO,wBAAwB;;AAK/C,OAAM,MAAOC,eAAe;EAH5BC,YAAA;IAIU,KAAAC,QAAQ,GAAG,IAAIH,QAAQ,CAAC,QAAQ,EAAE,SAAS,EAAE,UAAU,CAAC;;EAEhEI,eAAeA,CAACC,KAAa;IAC3B,OAAO,IAAI,CAACC,OAAO,CAAC,IAAI,CAACH,QAAQ,EAAEE,KAAK,CAAC;EAC3C;EAEQC,OAAOA,CAACC,IAAc,EAAEF,KAAa;IAC3C,IAAIA,KAAK,IAAI,EAAE,IAAIA,KAAK,IAAI,EAAE,EAC5B,OAAOE,IAAI,CAACC,IAAI;IAElB,IAAIH,KAAK,GAAG,EAAE,IAAI,CAAC,EACjB,OAAOE,IAAI,CAACE,GAAG;IAEjB,IAAIJ,KAAK,GAAG,EAAE,IAAI,CAAC,IAAIA,KAAK,GAAG,EAAE,IAAI,CAAC,IAAIA,KAAK,GAAG,EAAE,IAAI,CAAC,EACvD,OAAOE,IAAI,CAACG,GAAG;IAEjB,OAAOH,IAAI,CAACC,IAAI;EAClB;;AAlBWP,eAAe,C;mBAAfA,eAAe;AAAA;AAAfA,eAAe,C;SAAfA,eAAe;EAAAU,OAAA,EAAfV,eAAe,CAAAW,IAAA;EAAAC,UAAA,EAFd;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}