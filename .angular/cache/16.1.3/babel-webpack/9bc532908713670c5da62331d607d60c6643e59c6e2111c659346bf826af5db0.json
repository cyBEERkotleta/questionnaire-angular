{"ast":null,"code":"import { catchError, map, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./error.service\";\nexport class FieldTypeService {\n  constructor(http, errorService) {\n    this.typesLoaded = false;\n    this.http = http;\n    this.errorService = errorService;\n    this.initializeTypes();\n  }\n  areTypesEqual(type1, type2) {\n    console.log(JSON.stringify(type1));\n    console.log(JSON.stringify(type2));\n    console.log('present type1 ' + this.isTypePresent(type1));\n    console.log('present type2 ' + this.isTypePresent(type2));\n    if (!this.isTypePresent(type1) || !this.isTypePresent(type2)) return false;\n    console.log('type1.id == type2.id ' + (type1.id == type2.id));\n    console.log('type1.name == type2.name ' + (type1.name == type2.name));\n    console.log('type1.ableToHaveOptions == type2.ableToHaveOptions ' + (type1.ableToHaveOptions == type2.ableToHaveOptions));\n    return type1.id == type2.id && type1.name == type2.name && type1.ableToHaveOptions == type2.ableToHaveOptions;\n  }\n  isTypePresent(type) {\n    return !!type && !!type.id && !!type.name && !!type.ableToHaveOptions;\n  }\n  initializeTypes() {\n    let dateId = 1;\n    let comboBoxId = 2;\n    let checkBoxId = 3;\n    let radioButtonId = 4;\n    let multiLineText = 5;\n    let singleLineText = 6;\n    this.getAll().subscribe(types => {\n      this.date = types.find(type => type.id == dateId);\n      this.comboBox = types.find(type => type.id == comboBoxId);\n      this.checkBox = types.find(type => type.id == checkBoxId);\n      this.radioButton = types.find(type => type.id == radioButtonId);\n      this.multiLineText = types.find(type => type.id == multiLineText);\n      this.singleLineText = types.find(type => type.id == singleLineText);\n      this.typesLoaded = true;\n    });\n  }\n  getAll() {\n    return this.http.get('http://localhost:8080/field_types').pipe(catchError(this.errorHandler.bind(this)), map(fieldTypes => {\n      return fieldTypes.map(fieldType => {\n        fieldType.shownName = fieldType.name;\n        return fieldType;\n      });\n    }));\n  }\n  errorHandler(error) {\n    this.errorService.handle(error.message);\n    return throwError(() => error.message);\n  }\n}\nFieldTypeService.ɵfac = function FieldTypeService_Factory(t) {\n  return new (t || FieldTypeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ErrorService));\n};\nFieldTypeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FieldTypeService,\n  factory: FieldTypeService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","map","throwError","FieldTypeService","constructor","http","errorService","typesLoaded","initializeTypes","areTypesEqual","type1","type2","console","log","JSON","stringify","isTypePresent","id","name","ableToHaveOptions","type","dateId","comboBoxId","checkBoxId","radioButtonId","multiLineText","singleLineText","getAll","subscribe","types","date","find","comboBox","checkBox","radioButton","get","pipe","errorHandler","bind","fieldTypes","fieldType","shownName","error","handle","message","i0","ɵɵinject","i1","HttpClient","i2","ErrorService","factory","ɵfac","providedIn"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\service\\field-type.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient, HttpErrorResponse} from \"@angular/common/http\";\nimport {ErrorService} from \"./error.service\";\nimport {catchError, map, Observable, throwError} from \"rxjs\";\nimport {FieldType} from \"../entity/FieldType\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FieldTypeService {\n  private http: HttpClient;\n  private errorService: ErrorService;\n\n  date: FieldType;\n  comboBox: FieldType;\n  checkBox: FieldType;\n  radioButton: FieldType;\n  multiLineText: FieldType;\n  singleLineText: FieldType;\n\n  typesLoaded = false;\n\n  constructor(http: HttpClient,\n              errorService: ErrorService) {\n    this.http = http;\n    this.errorService = errorService;\n\n    this.initializeTypes();\n  }\n\n  areTypesEqual(type1: FieldType, type2: FieldType): boolean {\n    console.log(JSON.stringify(type1));\n    console.log(JSON.stringify(type2));\n\n    console.log('present type1 ' + this.isTypePresent(type1));\n    console.log('present type2 ' + this.isTypePresent(type2));\n\n    if (!this.isTypePresent(type1) || !this.isTypePresent(type2))\n      return false;\n\n    console.log('type1.id == type2.id ' + (type1.id == type2.id));\n    console.log('type1.name == type2.name ' + (type1.name == type2.name));\n    console.log('type1.ableToHaveOptions == type2.ableToHaveOptions ' + (type1.ableToHaveOptions == type2.ableToHaveOptions));\n\n    return type1.id == type2.id && type1.name == type2.name &&\n      type1.ableToHaveOptions == type2.ableToHaveOptions;\n  }\n\n  isTypePresent(type: FieldType): boolean {\n    return !!type && !!type.id && !!type.name && !!type.ableToHaveOptions;\n  }\n\n  private initializeTypes() {\n    let dateId = 1;\n    let comboBoxId = 2;\n    let checkBoxId = 3;\n    let radioButtonId = 4;\n    let multiLineText = 5;\n    let singleLineText = 6;\n\n    this.getAll()\n      .subscribe(types => {\n        this.date = types.find(type => type.id == dateId);\n        this.comboBox = types.find(type => type.id == comboBoxId);\n        this.checkBox = types.find(type => type.id == checkBoxId);\n        this.radioButton = types.find(type => type.id == radioButtonId);\n        this.multiLineText = types.find(type => type.id == multiLineText);\n        this.singleLineText = types.find(type => type.id == singleLineText);\n\n        this.typesLoaded = true;\n      });\n  }\n\n  getAll() : Observable<FieldType[]> {\n    return this.http.get<FieldType[]>('http://localhost:8080/field_types')\n      .pipe(\n        catchError(this.errorHandler.bind(this)),\n        map(fieldTypes => {\n          return fieldTypes.map(fieldType => {\n            fieldType.shownName = fieldType.name;\n            return fieldType;\n          });\n        })\n      );\n  }\n\n  private errorHandler(error: HttpErrorResponse) {\n    this.errorService.handle(error.message);\n    return throwError(() => error.message);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}