{"ast":null,"code":"import { catchError, tap, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./error.service\";\nimport * as i3 from \"./session.service\";\nimport * as i4 from \"./role.service\";\nexport class UserService {\n  constructor(http, errorService, sessionService, roleService) {\n    this.http = http;\n    this.errorService = errorService;\n    this.sessionService = sessionService;\n    this.roleService = roleService;\n  }\n  getAll() {\n    let token = this.sessionService.getToken();\n    return this.http.post('http://localhost:8080/users', token).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  getUserById(id) {\n    let token = this.sessionService.getToken();\n    let path = 'http://localhost:8080/users/' + id;\n    return this.http.post(path, token).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  register(user, password) {\n    const userWithPassword = {\n      user: user,\n      password: password\n    };\n    return this.http.post('http://localhost:8080/register', userWithPassword).pipe(catchError(this.errorHandler.bind(this)), tap(result => {\n      if (result.success) {\n        this.updateTokenInSession(result.token);\n      }\n    }));\n  }\n  login(email, password, rememberMe) {\n    const loginData = {\n      email: email,\n      password: password\n    };\n    return this.http.post('http://localhost:8080/login', loginData).pipe(catchError(this.errorHandler.bind(this)), tap(result => {\n      if (result.success) {\n        this.updateTokenWithRememberMeFlag(result.token, rememberMe);\n      }\n    }));\n  }\n  logOut() {\n    this.sessionService.removeTokenFromEverywhere();\n  }\n  changePassword(oldPassword, newPassword) {\n    let token = this.sessionService.getToken();\n    const tokenWithChangePasswordData = {\n      token: token,\n      oldPassword: oldPassword,\n      newPassword: newPassword\n    };\n    return this.http.post('http://localhost:8080/change_password', tokenWithChangePasswordData).pipe(catchError(this.errorHandler.bind(this)), tap(result => {\n      if (result.success) {\n        this.updateTokenWhereItWasSet(result.token);\n      }\n    }));\n  }\n  saveUser(user) {\n    let token = this.sessionService.getToken();\n    const tokenWithUser = {\n      token: token,\n      user: user\n    };\n    return this.http.post('http://localhost:8080/save_user', tokenWithUser).pipe(catchError(this.errorHandler.bind(this)), tap(result => {\n      if (result.success) {\n        this.updateTokenWhereItWasSet(result.token);\n      }\n    }));\n  }\n  updateCurrentUser() {\n    let token = this.sessionService.getToken();\n    return this.http.post('http://localhost:8080/user_by_token', token).pipe(catchError(this.errorHandler.bind(this)), tap(result => this.sessionService.user = result));\n  }\n  isCurrentUserAdmin() {\n    let token = this.sessionService.getToken();\n    this.updateCurrentUser().subscribe(result => {\n      return result.userRole == this.roleService.adminRole;\n    });\n  }\n  updateTokenWithRememberMeFlag(token, rememberMe) {\n    if (rememberMe) this.updateTokenGlobally(token);else this.updateTokenInSession(token);\n  }\n  updateTokenInSession(token) {\n    this.sessionService.saveTokenToSessionStorage(token);\n  }\n  updateTokenGlobally(token) {\n    this.sessionService.saveTokenToSessionStorage(token);\n    this.sessionService.saveTokenToLocalStorage(token);\n  }\n  updateTokenWhereItWasSet(token) {\n    this.sessionService.updateTokenWhereItWasSet(token);\n  }\n  errorHandler(error) {\n    this.errorService.handle(error.message);\n    return throwError(() => error.message);\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ErrorService), i0.ɵɵinject(i3.SessionService), i0.ɵɵinject(i4.RoleService));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","tap","throwError","UserService","constructor","http","errorService","sessionService","roleService","getAll","token","getToken","post","pipe","errorHandler","bind","getUserById","id","path","register","user","password","userWithPassword","result","success","updateTokenInSession","login","email","rememberMe","loginData","updateTokenWithRememberMeFlag","logOut","removeTokenFromEverywhere","changePassword","oldPassword","newPassword","tokenWithChangePasswordData","updateTokenWhereItWasSet","saveUser","tokenWithUser","updateCurrentUser","isCurrentUserAdmin","subscribe","userRole","adminRole","updateTokenGlobally","saveTokenToSessionStorage","saveTokenToLocalStorage","error","handle","message","i0","ɵɵinject","i1","HttpClient","i2","ErrorService","i3","SessionService","i4","RoleService","factory","ɵfac","providedIn"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\service\\user.service.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {HttpClient, HttpErrorResponse} from \"@angular/common/http\";\r\nimport {catchError, Observable, tap, throwError} from \"rxjs\";\r\nimport {User} from \"../entity/User\";\r\nimport {ErrorService} from \"./error.service\";\r\nimport {AuthorizeResult} from \"../additional/AuthorizeResult\";\r\nimport {SessionService} from \"./session.service\";\r\nimport {RoleService} from \"./role.service\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n  private http: HttpClient;\r\n  private errorService: ErrorService;\r\n  private sessionService: SessionService;\r\n  private roleService: RoleService;\r\n\r\n  constructor(http: HttpClient,\r\n              errorService: ErrorService,\r\n              sessionService: SessionService,\r\n              roleService: RoleService) {\r\n    this.http = http;\r\n    this.errorService = errorService;\r\n    this.sessionService = sessionService;\r\n    this.roleService = roleService;\r\n  }\r\n\r\n  getAll() : Observable<User[]> {\r\n    let token = this.sessionService.getToken();\r\n    return this.http.post<User[]>('http://localhost:8080/users', token)\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this)),\r\n      )\r\n  }\r\n\r\n  getUserById(id: bigint) : Observable<User> {\r\n    let token = this.sessionService.getToken();\r\n    let path = 'http://localhost:8080/users/' + id;\r\n    return this.http.post<User>(path, token)\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this)),\r\n      )\r\n  }\r\n\r\n  register(user: User, password: string): Observable<AuthorizeResult> {\r\n    const userWithPassword = {user: user, password: password};\r\n\r\n    return this.http.post<AuthorizeResult>('http://localhost:8080/register', userWithPassword)\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this)),\r\n        tap(result => {\r\n          if (result.success) {\r\n            this.updateTokenInSession(result.token);\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  login(email: string, password: string, rememberMe: boolean): Observable<AuthorizeResult> {\r\n    const loginData = {email: email, password: password};\r\n\r\n    return this.http.post<AuthorizeResult>('http://localhost:8080/login', loginData)\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this)),\r\n        tap(result => {\r\n          if (result.success) {\r\n            this.updateTokenWithRememberMeFlag(result.token, rememberMe);\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  logOut() {\r\n    this.sessionService.removeTokenFromEverywhere();\r\n  }\r\n\r\n  changePassword(oldPassword: string, newPassword: string): Observable<AuthorizeResult> {\r\n    let token = this.sessionService.getToken();\r\n    const tokenWithChangePasswordData = {\r\n      token: token, oldPassword: oldPassword, newPassword: newPassword\r\n    };\r\n\r\n    return this.http.post<AuthorizeResult>('http://localhost:8080/change_password', tokenWithChangePasswordData)\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this)),\r\n        tap(result => {\r\n          if (result.success) {\r\n            this.updateTokenWhereItWasSet(result.token);\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  saveUser(user: User): Observable<AuthorizeResult> {\r\n    let token = this.sessionService.getToken();\r\n    const tokenWithUser = {\r\n      token: token, user: user\r\n    };\r\n\r\n    return this.http.post<AuthorizeResult>('http://localhost:8080/save_user', tokenWithUser)\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this)),\r\n        tap(result => {\r\n          if (result.success) {\r\n            this.updateTokenWhereItWasSet(result.token);\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  updateCurrentUser(): Observable<User> {\r\n    let token = this.sessionService.getToken();\r\n    return this.http.post<User>('http://localhost:8080/user_by_token', token)\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this)),\r\n        tap(result => this.sessionService.user = result)\r\n      )\r\n  }\r\n\r\n  isCurrentUserAdmin(): boolean {\r\n    let token = this.sessionService.getToken();\r\n    this.updateCurrentUser()\r\n      .subscribe(result => {\r\n        return result.userRole == this.roleService.adminRole;\r\n      });\r\n  }\r\n\r\n  private updateTokenWithRememberMeFlag(token: string, rememberMe: boolean) {\r\n    if (rememberMe)\r\n      this.updateTokenGlobally(token);\r\n    else\r\n      this.updateTokenInSession(token);\r\n  }\r\n\r\n  private updateTokenInSession(token: string) {\r\n    this.sessionService.saveTokenToSessionStorage(token);\r\n  }\r\n\r\n  private updateTokenGlobally(token: string) {\r\n    this.sessionService.saveTokenToSessionStorage(token);\r\n    this.sessionService.saveTokenToLocalStorage(token);\r\n  }\r\n\r\n  private updateTokenWhereItWasSet(token: string) {\r\n    this.sessionService.updateTokenWhereItWasSet(token);\r\n  }\r\n\r\n  private errorHandler(error: HttpErrorResponse) {\r\n    this.errorService.handle(error.message);\r\n    return throwError(() => error.message);\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}