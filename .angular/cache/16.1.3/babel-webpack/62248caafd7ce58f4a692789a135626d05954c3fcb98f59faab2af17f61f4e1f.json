{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./messaging-service.service\";\nexport class WebSocketService {\n  constructor(messagingService) {\n    /*private path = 'ws://localhost:8080/ws';\n           stompClient = new Client({\n      brokerURL: this.path,\n      debug: (str) => {\n        console.log(str);\n      },\n    });\n           subscribe(formId: bigint, callback: any): StompSubscription {\n        this.stompClient.activate();\n      return this.subscribeToForm(formId, callback);\n    }\n           private subscribeToForm(formId: bigint, callback: any): StompSubscription {\n      return this.stompClient.subscribe(this.getDestination(formId), (message) => {\n        console.log('Received message:', JSON.stringify(message.body));\n      });\n    }*/\n    this.path = 'ws://localhost:8080/ws';\n    this.messagingService = messagingService;\n  }\n  getDestination(formId) {\n    return '/user/answered_forms_queue/' + formId;\n  }\n}\nWebSocketService.ɵfac = function WebSocketService_Factory(t) {\n  return new (t || WebSocketService)(i0.ɵɵinject(i1.MessagingService));\n};\nWebSocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WebSocketService,\n  factory: WebSocketService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["WebSocketService","constructor","messagingService","path","getDestination","formId","i0","ɵɵinject","i1","MessagingService","factory","ɵfac","providedIn"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\service\\web-socket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {Client, StompSubscription} from \"@stomp/stompjs\";\nimport {MessagingService} from \"./messaging-service.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WebSocketService {\n  /*private path = 'ws://localhost:8080/ws';\n\n  stompClient = new Client({\n    brokerURL: this.path,\n    debug: (str) => {\n      console.log(str);\n    },\n  });\n\n  subscribe(formId: bigint, callback: any): StompSubscription {\n      this.stompClient.activate();\n    return this.subscribeToForm(formId, callback);\n  }\n\n  private subscribeToForm(formId: bigint, callback: any): StompSubscription {\n    return this.stompClient.subscribe(this.getDestination(formId), (message) => {\n      console.log('Received message:', JSON.stringify(message.body));\n    });\n  }*/\n\n  private path = 'ws://localhost:8080/ws';\n\n  private messagingService: MessagingService;\n\n  constructor(messagingService: MessagingService) {\n    this.messagingService = messagingService;\n  }\n\n  \n\n  private getDestination(formId: bigint): string {\n    return '/user/answered_forms_queue/' + formId;\n  }\n}\n"],"mappings":";;AAOA,OAAM,MAAOA,gBAAgB;EAyB3BC,YAAYC,gBAAkC;IAxB9C;;;;;;;;;;;;;;;;IAoBQ,KAAAC,IAAI,GAAG,wBAAwB;IAKrC,IAAI,CAACD,gBAAgB,GAAGA,gBAAgB;EAC1C;EAIQE,cAAcA,CAACC,MAAc;IACnC,OAAO,6BAA6B,GAAGA,MAAM;EAC/C;;AAjCWL,gBAAgB,C;mBAAhBA,gBAAgB,EAAAM,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,gBAAA;AAAA;AAAhBT,gBAAgB,C;SAAhBA,gBAAgB;EAAAU,OAAA,EAAhBV,gBAAgB,CAAAW,IAAA;EAAAC,UAAA,EAFf;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}