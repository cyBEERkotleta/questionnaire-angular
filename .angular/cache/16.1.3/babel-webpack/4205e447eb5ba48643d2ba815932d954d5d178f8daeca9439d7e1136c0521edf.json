{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/field-type.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"../field-validator/field-validator.component\";\nimport * as i4 from \"../combobox/combobox.component\";\nfunction ComboboxFieldTypeComponent_app_combobox_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-combobox\", 3);\n    i0.ɵɵlistener(\"itemSelection\", function ComboboxFieldTypeComponent_app_combobox_1_Template_app_combobox_itemSelection_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onChange($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"label\", ctx_r0.fieldName)(\"required\", ctx_r0.isFieldRequired())(\"objects\", ctx_r0.fieldTypes)(\"selected\", ctx_r0.selectedType);\n  }\n}\nexport class ComboboxFieldTypeComponent {\n  constructor(fieldTypeService) {\n    this.showError = false;\n    this.listenerToValueChangeReady = new EventEmitter();\n    this.newValueSelected = new EventEmitter();\n    this.typesLoaded = false;\n    this.fieldTypeService = fieldTypeService;\n  }\n  ngOnInit() {\n    this.subscription1 = this.fieldTypeService.getAll().subscribe(result => {\n      this.fieldTypes = result;\n      this.typesLoaded = true;\n    });\n    this.subscription2 = this.formElement.valueChanges.subscribe(fieldType => {\n      this.selectedType = fieldType;\n    });\n    this.listenerToValueChangeReady.emit();\n  }\n  ngOnDestroy() {\n    if (this.subscription1) this.subscription1.unsubscribe();\n    if (this.subscription2) this.subscription2.unsubscribe();\n  }\n  onChange(item) {\n    this.selectedType = item;\n    this.formElement.setValue(this.selectedType);\n    this.newValueSelected.emit(this.selectedType);\n  }\n  isFieldRequired() {\n    return this.formElement.hasValidator(Validators.required);\n  }\n}\nComboboxFieldTypeComponent.ɵfac = function ComboboxFieldTypeComponent_Factory(t) {\n  return new (t || ComboboxFieldTypeComponent)(i0.ɵɵdirectiveInject(i1.FieldTypeService));\n};\nComboboxFieldTypeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ComboboxFieldTypeComponent,\n  selectors: [[\"app-combobox-field-type\"]],\n  inputs: {\n    formElement: \"formElement\",\n    fieldName: \"fieldName\",\n    showError: \"showError\"\n  },\n  outputs: {\n    listenerToValueChangeReady: \"listenerToValueChangeReady\",\n    newValueSelected: \"newValueSelected\"\n  },\n  decls: 3,\n  vars: 3,\n  consts: [[1, \"pt-3\"], [3, \"label\", \"required\", \"objects\", \"selected\", \"itemSelection\", 4, \"ngIf\"], [3, \"formElement\", \"showError\"], [3, \"label\", \"required\", \"objects\", \"selected\", \"itemSelection\"]],\n  template: function ComboboxFieldTypeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, ComboboxFieldTypeComponent_app_combobox_1_Template, 1, 4, \"app-combobox\", 1);\n      i0.ɵɵelement(2, \"app-field-validator\", 2);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.typesLoaded);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formElement\", ctx.formElement)(\"showError\", ctx.showError);\n    }\n  },\n  dependencies: [i2.NgIf, i3.FieldValidatorComponent, i4.ComboboxComponent],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["EventEmitter","Validators","i0","ɵɵelementStart","ɵɵlistener","ComboboxFieldTypeComponent_app_combobox_1_Template_app_combobox_itemSelection_0_listener","$event","ɵɵrestoreView","_r2","ctx_r1","ɵɵnextContext","ɵɵresetView","onChange","ɵɵelementEnd","ɵɵproperty","ctx_r0","fieldName","isFieldRequired","fieldTypes","selectedType","ComboboxFieldTypeComponent","constructor","fieldTypeService","showError","listenerToValueChangeReady","newValueSelected","typesLoaded","ngOnInit","subscription1","getAll","subscribe","result","subscription2","formElement","valueChanges","fieldType","emit","ngOnDestroy","unsubscribe","item","setValue","hasValidator","required","ɵɵdirectiveInject","i1","FieldTypeService","selectors","inputs","outputs","decls","vars","consts","template","ComboboxFieldTypeComponent_Template","rf","ctx","ɵɵtemplate","ComboboxFieldTypeComponent_app_combobox_1_Template","ɵɵelement","ɵɵadvance"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\little-components\\combobox-field-type\\combobox-field-type.component.ts","C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\little-components\\combobox-field-type\\combobox-field-type.component.html"],"sourcesContent":["import {Component, EventEmitter, Input, Output} from '@angular/core';\r\nimport {FormControl, Validators} from \"@angular/forms\";\r\nimport {Subscription} from \"rxjs\";\r\nimport {INamed} from \"../../additional/INamed\";\r\nimport {FieldType} from \"../../entity/FieldType\";\r\nimport {FieldTypeService} from \"../../service/field-type.service\";\r\n\r\n@Component({\r\n  selector: 'app-combobox-field-type',\r\n  templateUrl: './combobox-field-type.component.html',\r\n  styleUrls: ['./combobox-field-type.component.css']\r\n})\r\nexport class ComboboxFieldTypeComponent {\r\n  @Input() formElement: FormControl<FieldType>;\r\n  @Input() fieldName: string;\r\n  @Input() showError: boolean = false;\r\n\r\n  @Output() listenerToValueChangeReady = new EventEmitter();\r\n\r\n  @Output() newValueSelected = new EventEmitter<FieldType>();\r\n\r\n  fieldTypes: FieldType[];\r\n  selectedType: FieldType;\r\n\r\n  private fieldTypeService: FieldTypeService;\r\n\r\n  private subscription1: Subscription;\r\n  private subscription2: Subscription;\r\n\r\n  typesLoaded = false;\r\n\r\n  constructor(fieldTypeService: FieldTypeService) {\r\n    this.fieldTypeService = fieldTypeService;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.subscription1 = this.fieldTypeService.getAll()\r\n      .subscribe(result => {\r\n        this.fieldTypes = result;\r\n        this.typesLoaded = true;\r\n      });\r\n\r\n    this.subscription2 = this.formElement.valueChanges\r\n      .subscribe(fieldType => {\r\n        this.selectedType = fieldType;\r\n      });\r\n    this.listenerToValueChangeReady.emit();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.subscription1)\r\n      this.subscription1.unsubscribe();\r\n    if (this.subscription2)\r\n      this.subscription2.unsubscribe();\r\n  }\r\n\r\n\r\n  onChange(item: INamed) {\r\n    this.selectedType = item as FieldType;\r\n    this.formElement.setValue(this.selectedType);\r\n\r\n    this.newValueSelected.emit(this.selectedType);\r\n  }\r\n\r\n  isFieldRequired(): boolean {\r\n    return this.formElement.hasValidator(Validators.required);\r\n  }\r\n}\r\n","<div class=\"pt-3\">\r\n  <app-combobox\r\n    *ngIf=\"typesLoaded\"\r\n\r\n    [label]=\"fieldName\"\r\n    [required]=\"isFieldRequired()\"\r\n    [objects]=\"fieldTypes\"\r\n    [selected]=\"selectedType\"\r\n    (itemSelection)=\"onChange($event)\"\r\n  ></app-combobox>\r\n\r\n  <app-field-validator\r\n    [formElement]=\"formElement\"\r\n    [showError]=\"showError\"\r\n  ></app-field-validator>\r\n</div>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}