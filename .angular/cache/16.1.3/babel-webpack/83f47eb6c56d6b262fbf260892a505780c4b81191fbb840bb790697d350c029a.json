{"ast":null,"code":"import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { Answer } from \"../../entity/Answer\";\nimport { AnsweredForm } from \"../../entity/AnsweredForm\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/form.service\";\nimport * as i2 from \"../../service/field.service\";\nimport * as i3 from \"../../service/answered-form.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"../../little-components/error-paragraph/error-paragraph.component\";\nimport * as i8 from \"../../little-components/middle-control/middle-control.component\";\nimport * as i9 from \"../../little-components/flexible-field-control/flexible-field-control.component\";\nfunction QuestionnaireComponent_app_error_paragraph_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-error-paragraph\", 6);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"errorMessage\", ctx_r0.globalError);\n  }\n}\nfunction QuestionnaireComponent_app_middle_control_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"app-middle-control\")(1, \"span\", 7);\n    i0.ɵɵtext(2, \" \\u0412\\u044B\\u043F\\u043E\\u043B\\u043D\\u044F\\u0435\\u0442\\u0441\\u044F \\u0430\\u043D\\u0430\\u043B\\u0438\\u0437 \\u0438 \\u0441\\u043E\\u0445\\u0440\\u0430\\u043D\\u0435\\u043D\\u0438\\u0435 \\u043E\\u0442\\u0432\\u0435\\u0442\\u043E\\u0432... \");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction QuestionnaireComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"app-flexible-field-control\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const formControl_r3 = ctx.$implicit;\n    const i_r4 = ctx.index;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"field\", ctx_r2.fields[i_r4])(\"formElement\", formControl_r3)(\"showError\", ctx_r2.showAllErrors);\n  }\n}\nexport let QuestionnaireComponent = /*#__PURE__*/(() => {\n  class QuestionnaireComponent {\n    constructor(formService, fieldService, answeredFormService, router) {\n      this.formControls = [];\n      this.globalError = '';\n      this.showAllErrors = false;\n      this.savingProcess = false;\n      this.formService = formService;\n      this.fieldService = fieldService;\n      this.answeredFormService = answeredFormService;\n      this.router = router;\n      this.formGroup = new FormGroup({});\n    }\n    ngOnInit() {\n      this.subscriptionFields = this.fieldService.getActiveFieldsByFormId(this.formId).subscribe(result => {\n        this.fields = result;\n        this.addFormControls(this.fields.length);\n      });\n      this.subscriptionForm = this.formService.getFormById(this.formId).subscribe(result => {\n        this.form = result;\n      });\n    }\n    ngOnDestroy() {\n      if (this.subscriptionFields) this.subscriptionFields.unsubscribe();\n      if (this.subscriptionSaveAnswers) this.subscriptionSaveAnswers.unsubscribe();\n      if (this.subscriptionForm) this.subscriptionForm.unsubscribe();\n    }\n    addFormControls(count) {\n      for (let i = 0; i < count; i++) {\n        let validators = [Validators.maxLength(300)];\n        if (this.fields[i].required) validators.push(Validators.required);\n        const control = new FormControl('', validators);\n        this.formGroup.addControl(`control${i}`, control);\n        this.formControls.push(control);\n      }\n    }\n    getControlByIndex(index) {\n      return this.formGroup.get(`control${index}`);\n    }\n    isGlobalErrorSet() {\n      return this.globalError != '';\n    }\n    submit() {\n      if (this.anyErrorExists()) return;\n      this.savingProcess = true;\n      this.saveAnswers();\n      this.savingProcess = false;\n    }\n    anyErrorExists() {\n      this.resetGlobalError();\n      if (this.isAnyErrorInFields()) {\n        this.globalError = 'Не все необходимые поля заполнены';\n        this.showAllErrors = true;\n        return true;\n      }\n      return false;\n    }\n    resetGlobalError() {\n      this.globalError = '';\n    }\n    saveAnswers() {\n      let answers = this.collectAnswers();\n      let answeredForm = new AnsweredForm(null, answers, this.form);\n      this.subscriptionSaveAnswers = this.answeredFormService.saveAnsweredForm(answeredForm).subscribe(result => {\n        console.log(result);\n        if (result.success) {\n          this.navigateToCongratsPage();\n        } else {\n          this.globalError = result.message;\n        }\n      });\n    }\n    collectAnswers() {\n      let answers = [];\n      for (let i = 0; i < this.formControls.length; i++) {\n        let text = this.formControls[i].getRawValue();\n        let answer = new Answer(null, text, this.fields[i]);\n        answers.push(answer);\n      }\n      return answers;\n    }\n    clearAllFields() {\n      location.reload();\n    }\n    navigateToCongratsPage() {\n      this.router.navigate(['/successful-form-passing']);\n    }\n    isAnyErrorInFields() {\n      for (let i = 0; i < this.formControls.length; i++) {\n        if (this.doesControlHaveError(this.formControls[i])) return true;\n      }\n      return false;\n    }\n    doesControlHaveError(formControl) {\n      return formControl.errors != null;\n    }\n  }\n  QuestionnaireComponent.ɵfac = function QuestionnaireComponent_Factory(t) {\n    return new (t || QuestionnaireComponent)(i0.ɵɵdirectiveInject(i1.FormService), i0.ɵɵdirectiveInject(i2.FieldService), i0.ɵɵdirectiveInject(i3.AnsweredFormService), i0.ɵɵdirectiveInject(i4.Router));\n  };\n  QuestionnaireComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: QuestionnaireComponent,\n    selectors: [[\"app-questionnaire\"]],\n    inputs: {\n      formId: \"formId\"\n    },\n    decls: 10,\n    vars: 4,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [3, \"errorMessage\", 4, \"ngIf\"], [4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"submit\", 1, \"button-red-rounded\"], [\"type\", \"button\", 1, \"button-dark\", 3, \"click\"], [3, \"errorMessage\"], [1, \"text-blue-500\", \"fs-6\", \"fw-bold\"], [3, \"field\", \"formElement\", \"showError\"]],\n    template: function QuestionnaireComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function QuestionnaireComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.submit();\n        });\n        i0.ɵɵtemplate(1, QuestionnaireComponent_app_error_paragraph_1_Template, 1, 1, \"app-error-paragraph\", 1);\n        i0.ɵɵtemplate(2, QuestionnaireComponent_app_middle_control_2_Template, 3, 0, \"app-middle-control\", 2);\n        i0.ɵɵtemplate(3, QuestionnaireComponent_div_3_Template, 2, 3, \"div\", 3);\n        i0.ɵɵelement(4, \"br\");\n        i0.ɵɵelementStart(5, \"app-middle-control\")(6, \"button\", 4);\n        i0.ɵɵtext(7, \"\\u0417\\u0430\\u0432\\u0435\\u0440\\u0448\\u0438\\u0442\\u044C\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function QuestionnaireComponent_Template_button_click_8_listener() {\n          return ctx.clearAllFields();\n        });\n        i0.ɵɵtext(9, \"\\u041E\\u0447\\u0438\\u0441\\u0442\\u0438\\u0442\\u044C \\u0432\\u0441\\u0451\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.formGroup);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isGlobalErrorSet());\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.savingProcess);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.formControls);\n      }\n    },\n    dependencies: [i5.NgForOf, i5.NgIf, i6.ɵNgNoValidate, i6.NgControlStatusGroup, i6.FormGroupDirective, i7.ErrorParagraphComponent, i8.MiddleControlComponent, i9.FlexibleFieldControlComponent]\n  });\n  return QuestionnaireComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}