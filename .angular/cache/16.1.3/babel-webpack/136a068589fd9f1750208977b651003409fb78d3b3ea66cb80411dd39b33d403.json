{"ast":null,"code":"import { catchError, map, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./error.service\";\nimport * as i3 from \"./session.service\";\nexport class TopicService {\n  constructor(http, errorService, sessionService) {\n    this.http = http;\n    this.errorService = errorService;\n    this.sessionService = sessionService;\n  }\n  isTopicPresent(topic) {\n    return !!topic && !!topic.id && !!topic.name && !!topic.description;\n  }\n  getAll() {\n    return this.http.get('http://localhost:8090/topics').pipe(catchError(this.errorHandler.bind(this)), map(topics => {\n      return topics.map(topic => {\n        topic.shownName = topic.name;\n        return topic;\n      });\n    }));\n  }\n  getTopicById(id) {\n    let path = 'http://localhost:8090/topics/' + id;\n    return this.http.get(path).pipe(catchError(this.errorHandler.bind(this)), map(topic => {\n      topic.shownName = topic.name;\n      return topic;\n    }));\n  }\n  saveTopic(topic) {\n    let token = this.sessionService.getToken();\n    let tokenWithTopic = {\n      token: token,\n      topic: topic\n    };\n    return this.http.post('http://localhost:8090/save_topic', tokenWithTopic).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  deleteTopic(topic) {\n    let token = this.sessionService.getToken();\n    let tokenWithTopic = {\n      token: token,\n      topic: topic\n    };\n    return this.http.post('http://localhost:8090/delete_topic', tokenWithTopic).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  errorHandler(error) {\n    this.errorService.handle(error.message);\n    return throwError(() => error.message);\n  }\n}\nTopicService.ɵfac = function TopicService_Factory(t) {\n  return new (t || TopicService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ErrorService), i0.ɵɵinject(i3.SessionService));\n};\nTopicService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TopicService,\n  factory: TopicService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","map","throwError","TopicService","constructor","http","errorService","sessionService","isTopicPresent","topic","id","name","description","getAll","get","pipe","errorHandler","bind","topics","shownName","getTopicById","path","saveTopic","token","getToken","tokenWithTopic","post","deleteTopic","error","handle","message","i0","ɵɵinject","i1","HttpClient","i2","ErrorService","i3","SessionService","factory","ɵfac","providedIn"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\service\\topic.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {HttpClient, HttpErrorResponse} from \"@angular/common/http\";\r\nimport {ErrorService} from \"./error.service\";\r\nimport {Topic} from \"../entity/Topic\";\r\nimport {catchError, map, Observable, throwError} from \"rxjs\";\r\nimport {RequestResult} from \"../additional/RequestResult\";\r\nimport {SessionService} from \"./session.service\";\r\nimport {UserRole} from \"../entity/UserRole\";\r\nimport {Form} from \"../entity/Form\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TopicService {\r\n  private http: HttpClient;\r\n  private errorService: ErrorService;\r\n  private sessionService: SessionService;\r\n\r\n  constructor(http: HttpClient,\r\n              errorService: ErrorService,\r\n              sessionService: SessionService) {\r\n    this.http = http;\r\n    this.errorService = errorService;\r\n    this.sessionService = sessionService;\r\n  }\r\n\r\n  isTopicPresent(topic: Topic): boolean {\r\n    return !!topic && !!topic.id && !!topic.name && !!topic.description;\r\n  }\r\n\r\n  getAll() : Observable<Topic[]> {\r\n    return this.http.get<Topic[]>('http://localhost:8090/topics')\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this)),\r\n        map(topics => {\r\n          return topics.map(topic => {\r\n            topic.shownName = topic.name;\r\n            return topic;\r\n          });\r\n        })\r\n      );\r\n  }\r\n\r\n  getTopicById(id: bigint): Observable<Topic> {\r\n    let path = 'http://localhost:8090/topics/' + id;\r\n    return this.http.get<Topic>(path)\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this)),\r\n        map(topic => {\r\n          topic.shownName = topic.name;\r\n          return topic;\r\n        })\r\n      );\r\n  }\r\n\r\n  saveTopic(topic: Topic): Observable<RequestResult> {\r\n    let token = this.sessionService.getToken();\r\n    let tokenWithTopic = {token: token, topic: topic};\r\n    return this.http.post<RequestResult>('http://localhost:8090/save_topic', tokenWithTopic)\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this))\r\n      );\r\n  }\r\n\r\n  deleteTopic(topic: Topic): Observable<RequestResult> {\r\n    let token = this.sessionService.getToken();\r\n    let tokenWithTopic = {token: token, topic: topic};\r\n    return this.http.post<RequestResult>('http://localhost:8090/delete_topic', tokenWithTopic)\r\n      .pipe(\r\n        catchError(this.errorHandler.bind(this))\r\n      );\r\n  }\r\n\r\n  private errorHandler(error: HttpErrorResponse) {\r\n    this.errorService.handle(error.message);\r\n    return throwError(() => error.message);\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}