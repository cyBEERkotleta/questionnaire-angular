{"ast":null,"code":"import { NavigationEnd } from \"@angular/router\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class UrlService {\n  constructor(router) {\n    this.router = router;\n    this.subscribeToNavigationEvents();\n  }\n  subscribeToNavigationEvents() {\n    this.router.events.subscribe(event => {\n      if (event instanceof NavigationEnd) {\n        this.saveCurrentPage();\n      }\n    });\n  }\n  saveCurrentPage() {\n    let currentPage = this.getCurrentRouterLink();\n    let prevPage = this.getCurrentPage();\n    if (prevPage != currentPage) {\n      this.lastPage = prevPage;\n      this.currentPage = currentPage;\n    }\n  }\n  getCurrentPage() {\n    return this.currentPage;\n  }\n  getLastPage() {\n    if (this.lastPage) return this.lastPage;\n    return '/';\n  }\n  getCurrentRouterLink() {\n    const urlTree = this.router.createUrlTree([], {\n      queryParamsHandling: 'merge',\n      preserveFragment: true\n    });\n    return this.router.serializeUrl(urlTree);\n  }\n}\nUrlService.ɵfac = function UrlService_Factory(t) {\n  return new (t || UrlService)(i0.ɵɵinject(i1.Router));\n};\nUrlService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UrlService,\n  factory: UrlService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["NavigationEnd","UrlService","constructor","router","subscribeToNavigationEvents","events","subscribe","event","saveCurrentPage","currentPage","getCurrentRouterLink","prevPage","getCurrentPage","lastPage","getLastPage","urlTree","createUrlTree","queryParamsHandling","preserveFragment","serializeUrl","i0","ɵɵinject","i1","Router","factory","ɵfac","providedIn"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\service\\url.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {NavigationEnd, Router} from \"@angular/router\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UrlService {\r\n  private router: Router;\r\n\r\n  private lastPage: string;\r\n  private currentPage: string;\r\n\r\n  constructor(router: Router) {\r\n    this.router = router;\r\n\r\n    this.subscribeToNavigationEvents();\r\n  }\r\n\r\n  private subscribeToNavigationEvents(): void {\r\n    this.router.events.subscribe(event => {\r\n      if (event instanceof NavigationEnd) {\r\n        this.saveCurrentPage();\r\n      }\r\n    });\r\n  }\r\n\r\n  private saveCurrentPage() {\r\n    let currentPage = this.getCurrentRouterLink();\r\n\r\n    let prevPage = this.getCurrentPage();\r\n    if (prevPage != currentPage) {\r\n      this.lastPage = prevPage;\r\n      this.currentPage = currentPage;\r\n    }\r\n  }\r\n\r\n  private getCurrentPage() {\r\n    return this.currentPage;\r\n  }\r\n\r\n  getLastPage() {\r\n    if (this.lastPage)\r\n      return this.lastPage;\r\n    return '/';\r\n  }\r\n\r\n  private getCurrentRouterLink(): string {\r\n    const urlTree = this.router.createUrlTree([], {\r\n      queryParamsHandling: 'merge',\r\n      preserveFragment: true\r\n    });\r\n\r\n    return this.router.serializeUrl(urlTree);\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAQA,aAAa,QAAe,iBAAiB;;;AAKrD,OAAM,MAAOC,UAAU;EAMrBC,YAAYC,MAAc;IACxB,IAAI,CAACA,MAAM,GAAGA,MAAM;IAEpB,IAAI,CAACC,2BAA2B,EAAE;EACpC;EAEQA,2BAA2BA,CAAA;IACjC,IAAI,CAACD,MAAM,CAACE,MAAM,CAACC,SAAS,CAACC,KAAK,IAAG;MACnC,IAAIA,KAAK,YAAYP,aAAa,EAAE;QAClC,IAAI,CAACQ,eAAe,EAAE;;IAE1B,CAAC,CAAC;EACJ;EAEQA,eAAeA,CAAA;IACrB,IAAIC,WAAW,GAAG,IAAI,CAACC,oBAAoB,EAAE;IAE7C,IAAIC,QAAQ,GAAG,IAAI,CAACC,cAAc,EAAE;IACpC,IAAID,QAAQ,IAAIF,WAAW,EAAE;MAC3B,IAAI,CAACI,QAAQ,GAAGF,QAAQ;MACxB,IAAI,CAACF,WAAW,GAAGA,WAAW;;EAElC;EAEQG,cAAcA,CAAA;IACpB,OAAO,IAAI,CAACH,WAAW;EACzB;EAEAK,WAAWA,CAAA;IACT,IAAI,IAAI,CAACD,QAAQ,EACf,OAAO,IAAI,CAACA,QAAQ;IACtB,OAAO,GAAG;EACZ;EAEQH,oBAAoBA,CAAA;IAC1B,MAAMK,OAAO,GAAG,IAAI,CAACZ,MAAM,CAACa,aAAa,CAAC,EAAE,EAAE;MAC5CC,mBAAmB,EAAE,OAAO;MAC5BC,gBAAgB,EAAE;KACnB,CAAC;IAEF,OAAO,IAAI,CAACf,MAAM,CAACgB,YAAY,CAACJ,OAAO,CAAC;EAC1C;;AA/CWd,UAAU,C;mBAAVA,UAAU,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA;AAAA;AAAVtB,UAAU,C;SAAVA,UAAU;EAAAuB,OAAA,EAAVvB,UAAU,CAAAwB,IAAA;EAAAC,UAAA,EAFT;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}