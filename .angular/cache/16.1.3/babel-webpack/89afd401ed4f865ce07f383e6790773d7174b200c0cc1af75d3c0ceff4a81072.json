{"ast":null,"code":"import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { Topic } from \"../../entity/Topic\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/topic.service\";\nimport * as i2 from \"../../service/modal-create-window.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"../../little-components/text-field/text-field.component\";\nimport * as i7 from \"../../little-components/error-paragraph/error-paragraph.component\";\nimport * as i8 from \"../../little-components/middle-control/middle-control.component\";\nimport * as i9 from \"../../little-components/multi-line-text/multi-line-text.component\";\nfunction CreateTopicComponent_app_error_paragraph_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-error-paragraph\", 5);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"errorMessage\", ctx_r0.globalError);\n  }\n}\nexport let CreateTopicComponent = /*#__PURE__*/(() => {\n  class CreateTopicComponent {\n    constructor(topicService, modalService, router) {\n      this.showAllErrors = false;\n      this.globalError = '';\n      this.form = new FormGroup({\n        name: new FormControl('', [Validators.minLength(3), Validators.maxLength(100), Validators.required]),\n        description: new FormControl('', [Validators.maxLength(250)])\n      });\n      this.topicService = topicService;\n      this.modalService = modalService;\n      this.router = router;\n    }\n    ngOnDestroy() {\n      if (this.subscription) this.subscription.unsubscribe();\n    }\n    isGlobalErrorSet() {\n      return this.globalError != '';\n    }\n    submit() {\n      if (this.anyErrorExists()) return;\n      this.addTopic();\n    }\n    anyErrorExists() {\n      this.resetGlobalError();\n      if (this.isAnyErrorInFields()) {\n        this.showAllErrors = true;\n        return true;\n      }\n      return false;\n    }\n    addTopic() {\n      let topic = this.createTopicFromFields();\n      this.subscription = this.topicService.saveTopic(topic).subscribe(result => {\n        console.log(result);\n        if (result.success) {\n          this.modalService.close();\n          location.reload();\n        } else {\n          this.globalError = result.message;\n        }\n      });\n    }\n    resetGlobalError() {\n      this.globalError = '';\n    }\n    createTopicFromFields() {\n      let name = this.getNameFromField();\n      let description = this.getDescriptionFromField();\n      return new Topic(null, name, description);\n    }\n    getNameFromField() {\n      return this.form.controls.name.getRawValue();\n    }\n    getDescriptionFromField() {\n      return this.form.controls.description.getRawValue();\n    }\n    isAnyErrorInFields() {\n      return this.doesControlHaveError(this.form.controls.name) || this.doesControlHaveError(this.form.controls.description);\n    }\n    doesControlHaveError(formControl) {\n      return formControl.errors != null;\n    }\n  }\n  CreateTopicComponent.ɵfac = function CreateTopicComponent_Factory(t) {\n    return new (t || CreateTopicComponent)(i0.ɵɵdirectiveInject(i1.TopicService), i0.ɵɵdirectiveInject(i2.ModalCreateWindowService), i0.ɵɵdirectiveInject(i3.Router));\n  };\n  CreateTopicComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateTopicComponent,\n    selectors: [[\"app-create-topic\"]],\n    decls: 8,\n    vars: 6,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [3, \"errorMessage\", 4, \"ngIf\"], [\"fieldName\", \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435\", 3, \"formElement\", \"showError\"], [\"fieldName\", \"\\u041E\\u043F\\u0438\\u0441\\u0430\\u043D\\u0438\\u0435\", 3, \"formElement\", \"showError\"], [\"type\", \"submit\", 1, \"button-red-rounded\"], [3, \"errorMessage\"]],\n    template: function CreateTopicComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function CreateTopicComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.submit();\n        });\n        i0.ɵɵtemplate(1, CreateTopicComponent_app_error_paragraph_1_Template, 1, 1, \"app-error-paragraph\", 1);\n        i0.ɵɵelement(2, \"app-text-field\", 2)(3, \"app-multi-line-text\", 3)(4, \"br\");\n        i0.ɵɵelementStart(5, \"app-middle-control\")(6, \"button\", 4);\n        i0.ɵɵtext(7, \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u0442\\u0435\\u043C\\u0443\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isGlobalErrorSet());\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formElement\", ctx.form.controls.name)(\"showError\", ctx.showAllErrors);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formElement\", ctx.form.controls.description)(\"showError\", ctx.showAllErrors);\n      }\n    },\n    dependencies: [i4.NgIf, i5.ɵNgNoValidate, i5.NgControlStatusGroup, i5.FormGroupDirective, i6.TextFieldComponent, i7.ErrorParagraphComponent, i8.MiddleControlComponent, i9.MultiLineTextComponent]\n  });\n  return CreateTopicComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}