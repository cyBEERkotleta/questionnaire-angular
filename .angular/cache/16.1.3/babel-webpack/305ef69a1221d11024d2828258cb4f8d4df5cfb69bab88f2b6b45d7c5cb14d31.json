{"ast":null,"code":"import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { Topic } from \"../../entity/Topic\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/topic.service\";\nimport * as i2 from \"../../service/modal-create-window.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"../../little-components/text-field/text-field.component\";\nimport * as i7 from \"../../little-components/error-paragraph/error-paragraph.component\";\nimport * as i8 from \"../../little-components/middle-control/middle-control.component\";\nimport * as i9 from \"../../little-components/multi-line-text/multi-line-text.component\";\nfunction CreateTopicComponent_app_error_paragraph_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-error-paragraph\", 5);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"errorMessage\", ctx_r0.globalError);\n  }\n}\nexport class CreateTopicComponent {\n  constructor(topicService, modalService, router) {\n    this.showAllErrors = false;\n    this.globalError = '';\n    this.form = new FormGroup({\n      name: new FormControl('', [Validators.minLength(3), Validators.maxLength(100), Validators.required]),\n      description: new FormControl('', [Validators.maxLength(250)])\n    });\n    this.topicService = topicService;\n    this.modalService = modalService;\n    this.router = router;\n  }\n  ngOnDestroy() {\n    if (this.subscription) this.subscription.unsubscribe();\n  }\n  isGlobalErrorSet() {\n    return this.globalError != '';\n  }\n  submit() {\n    if (this.anyErrorExists()) return;\n    this.addTopic();\n  }\n  anyErrorExists() {\n    this.resetGlobalError();\n    if (this.isAnyErrorInFields()) {\n      this.showAllErrors = true;\n      return true;\n    }\n    return false;\n  }\n  addTopic() {\n    let topic = this.createTopicFromFields();\n    this.subscription = this.topicService.saveTopic(topic).subscribe(result => {\n      console.log(result);\n      if (result.success) {\n        this.modalService.close();\n        location.reload();\n      } else {\n        this.globalError = result.message;\n      }\n    });\n  }\n  resetGlobalError() {\n    this.globalError = '';\n  }\n  createTopicFromFields() {\n    let name = this.getNameFromField();\n    let description = this.getDescriptionFromField();\n    return new Topic(null, name, description);\n  }\n  getNameFromField() {\n    return this.form.controls.name.getRawValue();\n  }\n  getDescriptionFromField() {\n    return this.form.controls.description.getRawValue();\n  }\n  isAnyErrorInFields() {\n    return this.doesControlHaveError(this.form.controls.name) || this.doesControlHaveError(this.form.controls.description);\n  }\n  doesControlHaveError(formControl) {\n    return formControl.errors != null;\n  }\n}\nCreateTopicComponent.ɵfac = function CreateTopicComponent_Factory(t) {\n  return new (t || CreateTopicComponent)(i0.ɵɵdirectiveInject(i1.TopicService), i0.ɵɵdirectiveInject(i2.ModalCreateWindowService), i0.ɵɵdirectiveInject(i3.Router));\n};\nCreateTopicComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CreateTopicComponent,\n  selectors: [[\"app-create-topic\"]],\n  decls: 8,\n  vars: 6,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [3, \"errorMessage\", 4, \"ngIf\"], [\"fieldName\", \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435\", 3, \"formElement\", \"showError\"], [\"fieldName\", \"\\u041E\\u043F\\u0438\\u0441\\u0430\\u043D\\u0438\\u0435\", 3, \"formElement\", \"showError\"], [\"type\", \"submit\", 1, \"button-red-rounded\"], [3, \"errorMessage\"]],\n  template: function CreateTopicComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function CreateTopicComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.submit();\n      });\n      i0.ɵɵtemplate(1, CreateTopicComponent_app_error_paragraph_1_Template, 1, 1, \"app-error-paragraph\", 1);\n      i0.ɵɵelement(2, \"app-text-field\", 2)(3, \"app-multi-line-text\", 3)(4, \"br\");\n      i0.ɵɵelementStart(5, \"app-middle-control\")(6, \"button\", 4);\n      i0.ɵɵtext(7, \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u0442\\u0435\\u043C\\u0443\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isGlobalErrorSet());\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formElement\", ctx.form.controls.name)(\"showError\", ctx.showAllErrors);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formElement\", ctx.form.controls.description)(\"showError\", ctx.showAllErrors);\n    }\n  },\n  dependencies: [i4.NgIf, i5.ɵNgNoValidate, i5.NgControlStatusGroup, i5.FormGroupDirective, i6.TextFieldComponent, i7.ErrorParagraphComponent, i8.MiddleControlComponent, i9.MultiLineTextComponent],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["FormControl","FormGroup","Validators","Topic","i0","ɵɵelement","ɵɵproperty","ctx_r0","globalError","CreateTopicComponent","constructor","topicService","modalService","router","showAllErrors","form","name","minLength","maxLength","required","description","ngOnDestroy","subscription","unsubscribe","isGlobalErrorSet","submit","anyErrorExists","addTopic","resetGlobalError","isAnyErrorInFields","topic","createTopicFromFields","saveTopic","subscribe","result","console","log","success","close","location","reload","message","getNameFromField","getDescriptionFromField","controls","getRawValue","doesControlHaveError","formControl","errors","ɵɵdirectiveInject","i1","TopicService","i2","ModalCreateWindowService","i3","Router","selectors","decls","vars","consts","template","CreateTopicComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","CreateTopicComponent_Template_form_ngSubmit_0_listener","ɵɵtemplate","CreateTopicComponent_app_error_paragraph_1_Template","ɵɵtext","ɵɵelementEnd","ɵɵadvance"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\components\\create-topic\\create-topic.component.ts","C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\components\\create-topic\\create-topic.component.html"],"sourcesContent":["import {Component, OnDestroy} from '@angular/core';\r\nimport {Router} from \"@angular/router\";\r\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\r\nimport {TopicService} from \"../../service/topic.service\";\r\nimport {Topic} from \"../../entity/Topic\";\r\nimport {ModalCreateWindowService} from \"../../service/modal-create-window.service\";\r\nimport {Subscription} from \"rxjs\";\r\n\r\n@Component({\r\n  selector: 'app-create-topic',\r\n  templateUrl: './create-topic.component.html',\r\n  styleUrls: ['./create-topic.component.css']\r\n})\r\nexport class CreateTopicComponent implements OnDestroy {\r\n  private topicService: TopicService;\r\n  private modalService: ModalCreateWindowService;\r\n  private router: Router;\r\n\r\n  showAllErrors = false;\r\n  globalError: string = '';\r\n\r\n  private subscription: Subscription;\r\n\r\n  form = new FormGroup({\r\n    name: new FormControl<string>('', [\r\n      Validators.minLength(3),\r\n      Validators.maxLength(100),\r\n      Validators.required\r\n    ]),\r\n    description: new FormControl<string>('', [\r\n      Validators.maxLength(250)\r\n    ])\r\n  });\r\n\r\n  constructor(topicService: TopicService,\r\n              modalService: ModalCreateWindowService,\r\n              router: Router) {\r\n    this.topicService = topicService;\r\n    this.modalService = modalService;\r\n    this.router = router;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.subscription)\r\n      this.subscription.unsubscribe();\r\n  }\r\n\r\n  isGlobalErrorSet(): boolean {\r\n    return this.globalError != '';\r\n  }\r\n\r\n  submit() {\r\n    if (this.anyErrorExists())\r\n      return;\r\n\r\n    this.addTopic();\r\n  }\r\n\r\n  private anyErrorExists(): boolean {\r\n    this.resetGlobalError();\r\n\r\n    if (this.isAnyErrorInFields()) {\r\n      this.showAllErrors = true;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private addTopic() {\r\n    let topic = this.createTopicFromFields();\r\n\r\n    this.subscription = this.topicService.saveTopic(topic)\r\n      .subscribe(result => {\r\n        console.log(result);\r\n        if (result.success) {\r\n          this.modalService.close();\r\n          location.reload();\r\n        }\r\n        else {\r\n          this.globalError = result.message;\r\n        }\r\n      });\r\n  }\r\n\r\n  private resetGlobalError() {\r\n    this.globalError = '';\r\n  }\r\n\r\n  private createTopicFromFields(): Topic {\r\n    let name = this.getNameFromField();\r\n    let description = this.getDescriptionFromField();\r\n\r\n    return new Topic(null, name, description);\r\n  }\r\n\r\n  private getNameFromField(): string {\r\n    return this.form.controls.name.getRawValue();\r\n  }\r\n\r\n  private getDescriptionFromField(): string {\r\n    return this.form.controls.description.getRawValue();\r\n  }\r\n\r\n  private isAnyErrorInFields(): boolean {\r\n    return this.doesControlHaveError(this.form.controls.name) ||\r\n      this.doesControlHaveError(this.form.controls.description);\r\n  }\r\n\r\n  private doesControlHaveError(formControl: FormControl): boolean {\r\n    return formControl.errors != null;\r\n  }\r\n}\r\n","<form [formGroup]=\"form\" (ngSubmit)=\"submit()\">\r\n  <app-error-paragraph\r\n    *ngIf=\"isGlobalErrorSet()\"\r\n    [errorMessage]=\"globalError\"\r\n  ></app-error-paragraph>\r\n\r\n  <app-text-field\r\n    fieldName=\"Название\"\r\n    [formElement]=\"form.controls.name\"\r\n    [showError]=\"showAllErrors\"\r\n  ></app-text-field>\r\n\r\n  <app-multi-line-text\r\n    fieldName=\"Описание\"\r\n    [formElement]=\"form.controls.description\"\r\n    [showError]=\"showAllErrors\"\r\n  ></app-multi-line-text>\r\n\r\n  <br/>\r\n\r\n  <app-middle-control>\r\n    <button\r\n      type=\"submit\"\r\n      class=\"button-red-rounded\"\r\n    >Создать тему</button>\r\n  </app-middle-control>\r\n</form>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}