{"ast":null,"code":"import { catchError, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./error.service\";\nimport * as i3 from \"./session.service\";\nexport class AnsweredFormService {\n  constructor(http, errorService, sessionService) {\n    this.http = http;\n    this.errorService = errorService;\n    this.sessionService = sessionService;\n  }\n  isAnsweredFormPresent(answeredForm) {\n    return !!answeredForm && !!answeredForm.id && !!answeredForm.answers;\n  }\n  getAnsweredFormById(id) {\n    let token = this.sessionService.getToken();\n    let path = 'http://localhost:8080/answered_forms/' + id;\n    return this.http.post(path, token).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  getAnsweredFormsByFormId(formId) {\n    let token = this.sessionService.getToken();\n    let path = 'http://localhost:8080/answered_forms/form_' + formId;\n    return this.http.post(path, token).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  saveAnsweredForm(answeredForm) {\n    return this.http.post('http://localhost:8080/save_answered_form', answeredForm).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  errorHandler(error) {\n    this.errorService.handle(error.message);\n    return throwError(() => error.message);\n  }\n}\nAnsweredFormService.ɵfac = function AnsweredFormService_Factory(t) {\n  return new (t || AnsweredFormService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ErrorService), i0.ɵɵinject(i3.SessionService));\n};\nAnsweredFormService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AnsweredFormService,\n  factory: AnsweredFormService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","throwError","AnsweredFormService","constructor","http","errorService","sessionService","isAnsweredFormPresent","answeredForm","id","answers","getAnsweredFormById","token","getToken","path","post","pipe","errorHandler","bind","getAnsweredFormsByFormId","formId","saveAnsweredForm","error","handle","message","i0","ɵɵinject","i1","HttpClient","i2","ErrorService","i3","SessionService","factory","ɵfac","providedIn"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\service\\answered-form.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient, HttpErrorResponse} from \"@angular/common/http\";\nimport {ErrorService} from \"./error.service\";\nimport {SessionService} from \"./session.service\";\nimport {catchError, Observable, throwError} from \"rxjs\";\nimport {RequestResult} from \"../additional/RequestResult\";\nimport {AnsweredForm} from \"../entity/AnsweredForm\";\nimport {Answer} from \"../entity/Answer\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AnsweredFormService {\n  private http: HttpClient;\n  private errorService: ErrorService;\n  private sessionService: SessionService;\n\n  constructor(http: HttpClient,\n              errorService: ErrorService,\n              sessionService: SessionService) {\n    this.http = http;\n    this.errorService = errorService;\n    this.sessionService = sessionService;\n  }\n\n  isAnsweredFormPresent(answeredForm: AnsweredForm): boolean {\n    return !!answeredForm && !!answeredForm.id && !!answeredForm.answers;\n  }\n\n  getAnsweredFormById(id: bigint): Observable<AnsweredForm> {\n    let token = this.sessionService.getToken();\n    let path = 'http://localhost:8080/answered_forms/' + id;\n    return this.http.post<AnsweredForm>(path, token)\n      .pipe(\n        catchError(this.errorHandler.bind(this)),\n      );\n  }\n\n  getAnsweredFormsByFormId(formId: bigint) : Observable<AnsweredForm[]> {\n    let token = this.sessionService.getToken();\n    let path = 'http://localhost:8080/answered_forms/form_' + formId;\n    return this.http.post<AnsweredForm[]>(path, token)\n      .pipe(\n        catchError(this.errorHandler.bind(this)),\n      );\n  }\n\n  saveAnsweredForm(answeredForm: AnsweredForm): Observable<RequestResult> {\n    return this.http.post<RequestResult>('http://localhost:8080/save_answered_form', answeredForm)\n      .pipe(\n        catchError(this.errorHandler.bind(this)),\n      );\n  }\n\n  private errorHandler(error: HttpErrorResponse) {\n    this.errorService.handle(error.message);\n    return throwError(() => error.message);\n  }\n}\n"],"mappings":"AAIA,SAAQA,UAAU,EAAcC,UAAU,QAAO,MAAM;;;;;AAQvD,OAAM,MAAOC,mBAAmB;EAK9BC,YAAYC,IAAgB,EAChBC,YAA0B,EAC1BC,cAA8B;IACxC,IAAI,CAACF,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,cAAc,GAAGA,cAAc;EACtC;EAEAC,qBAAqBA,CAACC,YAA0B;IAC9C,OAAO,CAAC,CAACA,YAAY,IAAI,CAAC,CAACA,YAAY,CAACC,EAAE,IAAI,CAAC,CAACD,YAAY,CAACE,OAAO;EACtE;EAEAC,mBAAmBA,CAACF,EAAU;IAC5B,IAAIG,KAAK,GAAG,IAAI,CAACN,cAAc,CAACO,QAAQ,EAAE;IAC1C,IAAIC,IAAI,GAAG,uCAAuC,GAAGL,EAAE;IACvD,OAAO,IAAI,CAACL,IAAI,CAACW,IAAI,CAAeD,IAAI,EAAEF,KAAK,CAAC,CAC7CI,IAAI,CACHhB,UAAU,CAAC,IAAI,CAACiB,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CACzC;EACL;EAEAC,wBAAwBA,CAACC,MAAc;IACrC,IAAIR,KAAK,GAAG,IAAI,CAACN,cAAc,CAACO,QAAQ,EAAE;IAC1C,IAAIC,IAAI,GAAG,4CAA4C,GAAGM,MAAM;IAChE,OAAO,IAAI,CAAChB,IAAI,CAACW,IAAI,CAAiBD,IAAI,EAAEF,KAAK,CAAC,CAC/CI,IAAI,CACHhB,UAAU,CAAC,IAAI,CAACiB,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CACzC;EACL;EAEAG,gBAAgBA,CAACb,YAA0B;IACzC,OAAO,IAAI,CAACJ,IAAI,CAACW,IAAI,CAAgB,0CAA0C,EAAEP,YAAY,CAAC,CAC3FQ,IAAI,CACHhB,UAAU,CAAC,IAAI,CAACiB,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CACzC;EACL;EAEQD,YAAYA,CAACK,KAAwB;IAC3C,IAAI,CAACjB,YAAY,CAACkB,MAAM,CAACD,KAAK,CAACE,OAAO,CAAC;IACvC,OAAOvB,UAAU,CAAC,MAAMqB,KAAK,CAACE,OAAO,CAAC;EACxC;;AA7CWtB,mBAAmB,C;mBAAnBA,mBAAmB,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,YAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,cAAA;AAAA;AAAnB9B,mBAAmB,C;SAAnBA,mBAAmB;EAAA+B,OAAA,EAAnB/B,mBAAmB,CAAAgC,IAAA;EAAAC,UAAA,EAFlB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}