{"ast":null,"code":"import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { Form } from \"../../entity/Form\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/form.service\";\nimport * as i2 from \"../../service/modal-create-window.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"../../little-components/text-field/text-field.component\";\nimport * as i7 from \"../../little-components/error-paragraph/error-paragraph.component\";\nimport * as i8 from \"../../little-components/middle-control/middle-control.component\";\nimport * as i9 from \"../../little-components/checkbox-single/checkbox-single.component\";\nfunction CreateFormComponent_app_error_paragraph_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-error-paragraph\", 6);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"errorMessage\", ctx_r0.globalError);\n  }\n}\nexport class CreateFormComponent {\n  constructor(formService, modalService, router) {\n    this.showAllErrors = false;\n    this.globalError = '';\n    this.form = new FormGroup({\n      name: new FormControl('', [Validators.minLength(3), Validators.maxLength(100), Validators.required]),\n      shown: new FormControl(true)\n    });\n    this.formService = formService;\n    this.modalService = modalService;\n    this.router = router;\n  }\n  ngOnDestroy() {\n    if (this.subscription) this.subscription.unsubscribe();\n  }\n  getTopicName() {\n    if (!this.topic) return '';\n    return this.topic.name;\n  }\n  isGlobalErrorSet() {\n    return this.globalError != '';\n  }\n  submit() {\n    if (this.anyErrorExists()) return;\n    this.addForm();\n  }\n  anyErrorExists() {\n    this.resetGlobalError();\n    if (this.isAnyErrorInFields()) {\n      this.showAllErrors = true;\n      return true;\n    }\n    return false;\n  }\n  addForm() {\n    let form = this.createFormFromFields();\n    this.subscription = this.formService.saveForm(form, this.topic).subscribe(result => {\n      console.log(result);\n      if (result.success) {\n        this.modalService.close();\n      } else {\n        this.globalError = result.message;\n      }\n    });\n  }\n  resetGlobalError() {\n    this.globalError = '';\n  }\n  createFormFromFields() {\n    let name = this.getNameFromField();\n    let shown = this.getShownFromField();\n    return new Form(null, name, null, null, shown);\n  }\n  getNameFromField() {\n    return this.form.controls.name.getRawValue();\n  }\n  getShownFromField() {\n    return this.form.controls.shown.getRawValue();\n  }\n  isAnyErrorInFields() {\n    return this.doesControlHaveError(this.form.controls.name);\n  }\n  doesControlHaveError(formControl) {\n    return formControl.errors != null;\n  }\n}\nCreateFormComponent.ɵfac = function CreateFormComponent_Factory(t) {\n  return new (t || CreateFormComponent)(i0.ɵɵdirectiveInject(i1.FormService), i0.ɵɵdirectiveInject(i2.ModalCreateWindowService), i0.ɵɵdirectiveInject(i3.Router));\n};\nCreateFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CreateFormComponent,\n  selectors: [[\"app-create-form\"]],\n  inputs: {\n    topic: \"topic\"\n  },\n  decls: 10,\n  vars: 6,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [3, \"errorMessage\", 4, \"ngIf\"], [1, \"fw-semibold\", \"text-gray-600\", \"text-xl\"], [\"fieldName\", \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435\", 3, \"formElement\", \"showError\"], [\"fieldName\", \"\\u041E\\u0442\\u043E\\u0431\\u0440\\u0430\\u0436\\u0430\\u0442\\u044C \\u0444\\u043E\\u0440\\u043C\\u0443 \\u0432 \\u043A\\u0430\\u0442\\u0430\\u043B\\u043E\\u0433\\u0435\", 3, \"formElement\"], [\"type\", \"submit\", 1, \"button-red-rounded\"], [3, \"errorMessage\"]],\n  template: function CreateFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function CreateFormComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.submit();\n      });\n      i0.ɵɵtemplate(1, CreateFormComponent_app_error_paragraph_1_Template, 1, 1, \"app-error-paragraph\", 1);\n      i0.ɵɵelementStart(2, \"span\", 2);\n      i0.ɵɵtext(3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"app-text-field\", 3)(5, \"app-checkbox-single\", 4)(6, \"br\");\n      i0.ɵɵelementStart(7, \"app-middle-control\")(8, \"button\", 5);\n      i0.ɵɵtext(9, \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u0444\\u043E\\u0440\\u043C\\u0443\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isGlobalErrorSet());\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \\u0422\\u0435\\u043C\\u0430: \", ctx.getTopicName(), \" \");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formElement\", ctx.form.controls.name)(\"showError\", ctx.showAllErrors);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formElement\", ctx.form.controls.shown);\n    }\n  },\n  dependencies: [i4.NgIf, i5.ɵNgNoValidate, i5.NgControlStatusGroup, i5.FormGroupDirective, i6.TextFieldComponent, i7.ErrorParagraphComponent, i8.MiddleControlComponent, i9.CheckboxSingleComponent],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["FormControl","FormGroup","Validators","Form","i0","ɵɵelement","ɵɵproperty","ctx_r0","globalError","CreateFormComponent","constructor","formService","modalService","router","showAllErrors","form","name","minLength","maxLength","required","shown","ngOnDestroy","subscription","unsubscribe","getTopicName","topic","isGlobalErrorSet","submit","anyErrorExists","addForm","resetGlobalError","isAnyErrorInFields","createFormFromFields","saveForm","subscribe","result","console","log","success","close","message","getNameFromField","getShownFromField","controls","getRawValue","doesControlHaveError","formControl","errors","ɵɵdirectiveInject","i1","FormService","i2","ModalCreateWindowService","i3","Router","selectors","inputs","decls","vars","consts","template","CreateFormComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","CreateFormComponent_Template_form_ngSubmit_0_listener","ɵɵtemplate","CreateFormComponent_app_error_paragraph_1_Template","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\components\\create-form\\create-form.component.ts","C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\components\\create-form\\create-form.component.html"],"sourcesContent":["import {Component, Input} from '@angular/core';\nimport {ModalCreateWindowService} from \"../../service/modal-create-window.service\";\nimport {Router} from \"@angular/router\";\nimport {Subscription} from \"rxjs\";\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {Topic} from \"../../entity/Topic\";\nimport {FormService} from \"../../service/form.service\";\nimport {Form} from \"../../entity/Form\";\n\n@Component({\n  selector: 'app-create-form',\n  templateUrl: './create-form.component.html',\n  styleUrls: ['./create-form.component.css']\n})\nexport class CreateFormComponent {\n  @Input() topic: Topic;\n\n  private formService: FormService;\n  private modalService: ModalCreateWindowService;\n  private router: Router;\n\n  showAllErrors = false;\n  globalError: string = '';\n\n  private subscription: Subscription;\n\n  form = new FormGroup({\n    name: new FormControl<string>('', [\n      Validators.minLength(3),\n      Validators.maxLength(100),\n      Validators.required\n    ]),\n    shown: new FormControl<boolean>(true)\n  });\n\n  constructor(formService: FormService,\n              modalService: ModalCreateWindowService,\n              router: Router) {\n    this.formService = formService;\n    this.modalService = modalService;\n    this.router = router;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription)\n      this.subscription.unsubscribe();\n  }\n\n  getTopicName(): string {\n    if (!this.topic)\n      return '';\n    return this.topic.name;\n  }\n\n  isGlobalErrorSet(): boolean {\n    return this.globalError != '';\n  }\n\n  submit() {\n    if (this.anyErrorExists())\n      return;\n\n    this.addForm();\n  }\n\n  private anyErrorExists(): boolean {\n    this.resetGlobalError();\n\n    if (this.isAnyErrorInFields()) {\n      this.showAllErrors = true;\n      return true;\n    }\n    return false;\n  }\n\n  private addForm() {\n    let form = this.createFormFromFields();\n\n    this.subscription = this.formService.saveForm(form, this.topic)\n      .subscribe(result => {\n        console.log(result);\n        if (result.success) {\n          this.modalService.close();\n        }\n        else {\n          this.globalError = result.message;\n        }\n      });\n  }\n\n  private resetGlobalError() {\n    this.globalError = '';\n  }\n\n  private createFormFromFields(): Form {\n    let name = this.getNameFromField();\n    let shown = this.getShownFromField();\n\n    return new Form(null, name, null, null, shown);\n  }\n\n  private getNameFromField(): string {\n    return this.form.controls.name.getRawValue();\n  }\n\n  private getShownFromField(): boolean {\n    return this.form.controls.shown.getRawValue();\n  }\n\n  private isAnyErrorInFields(): boolean {\n    return this.doesControlHaveError(this.form.controls.name);\n  }\n\n  private doesControlHaveError(formControl: FormControl): boolean {\n    return formControl.errors != null;\n  }\n}\n","<form [formGroup]=\"form\" (ngSubmit)=\"submit()\">\n  <app-error-paragraph\n    *ngIf=\"isGlobalErrorSet()\"\n    [errorMessage]=\"globalError\"\n  ></app-error-paragraph>\n\n  <span class=\"fw-semibold text-gray-600 text-xl\">\n    Тема: {{getTopicName()}}\n  </span>\n\n  <app-text-field\n    fieldName=\"Название\"\n    [formElement]=\"form.controls.name\"\n    [showError]=\"showAllErrors\"\n  ></app-text-field>\n\n  <app-checkbox-single\n    fieldName=\"Отображать форму в каталоге\"\n    [formElement]=\"form.controls.shown\"\n  ></app-checkbox-single>\n\n  <br/>\n\n  <app-middle-control>\n    <button\n      type=\"submit\"\n      class=\"button-red-rounded\"\n    >Создать форму</button>\n  </app-middle-control>\n</form>\n"],"mappings":"AAIA,SAAQA,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAO,gBAAgB;AAGjE,SAAQC,IAAI,QAAO,mBAAmB;;;;;;;;;;;;;ICNpCC,EAAA,CAAAC,SAAA,6BAGuB;;;;IADrBD,EAAA,CAAAE,UAAA,iBAAAC,MAAA,CAAAC,WAAA,CAA4B;;;ADWhC,OAAM,MAAOC,mBAAmB;EAqB9BC,YAAYC,WAAwB,EACxBC,YAAsC,EACtCC,MAAc;IAhB1B,KAAAC,aAAa,GAAG,KAAK;IACrB,KAAAN,WAAW,GAAW,EAAE;IAIxB,KAAAO,IAAI,GAAG,IAAId,SAAS,CAAC;MACnBe,IAAI,EAAE,IAAIhB,WAAW,CAAS,EAAE,EAAE,CAChCE,UAAU,CAACe,SAAS,CAAC,CAAC,CAAC,EACvBf,UAAU,CAACgB,SAAS,CAAC,GAAG,CAAC,EACzBhB,UAAU,CAACiB,QAAQ,CACpB,CAAC;MACFC,KAAK,EAAE,IAAIpB,WAAW,CAAU,IAAI;KACrC,CAAC;IAKA,IAAI,CAACW,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,MAAM,GAAGA,MAAM;EACtB;EAEAQ,WAAWA,CAAA;IACT,IAAI,IAAI,CAACC,YAAY,EACnB,IAAI,CAACA,YAAY,CAACC,WAAW,EAAE;EACnC;EAEAC,YAAYA,CAAA;IACV,IAAI,CAAC,IAAI,CAACC,KAAK,EACb,OAAO,EAAE;IACX,OAAO,IAAI,CAACA,KAAK,CAACT,IAAI;EACxB;EAEAU,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAAClB,WAAW,IAAI,EAAE;EAC/B;EAEAmB,MAAMA,CAAA;IACJ,IAAI,IAAI,CAACC,cAAc,EAAE,EACvB;IAEF,IAAI,CAACC,OAAO,EAAE;EAChB;EAEQD,cAAcA,CAAA;IACpB,IAAI,CAACE,gBAAgB,EAAE;IAEvB,IAAI,IAAI,CAACC,kBAAkB,EAAE,EAAE;MAC7B,IAAI,CAACjB,aAAa,GAAG,IAAI;MACzB,OAAO,IAAI;;IAEb,OAAO,KAAK;EACd;EAEQe,OAAOA,CAAA;IACb,IAAId,IAAI,GAAG,IAAI,CAACiB,oBAAoB,EAAE;IAEtC,IAAI,CAACV,YAAY,GAAG,IAAI,CAACX,WAAW,CAACsB,QAAQ,CAAClB,IAAI,EAAE,IAAI,CAACU,KAAK,CAAC,CAC5DS,SAAS,CAACC,MAAM,IAAG;MAClBC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;MACnB,IAAIA,MAAM,CAACG,OAAO,EAAE;QAClB,IAAI,CAAC1B,YAAY,CAAC2B,KAAK,EAAE;OAC1B,MACI;QACH,IAAI,CAAC/B,WAAW,GAAG2B,MAAM,CAACK,OAAO;;IAErC,CAAC,CAAC;EACN;EAEQV,gBAAgBA,CAAA;IACtB,IAAI,CAACtB,WAAW,GAAG,EAAE;EACvB;EAEQwB,oBAAoBA,CAAA;IAC1B,IAAIhB,IAAI,GAAG,IAAI,CAACyB,gBAAgB,EAAE;IAClC,IAAIrB,KAAK,GAAG,IAAI,CAACsB,iBAAiB,EAAE;IAEpC,OAAO,IAAIvC,IAAI,CAAC,IAAI,EAAEa,IAAI,EAAE,IAAI,EAAE,IAAI,EAAEI,KAAK,CAAC;EAChD;EAEQqB,gBAAgBA,CAAA;IACtB,OAAO,IAAI,CAAC1B,IAAI,CAAC4B,QAAQ,CAAC3B,IAAI,CAAC4B,WAAW,EAAE;EAC9C;EAEQF,iBAAiBA,CAAA;IACvB,OAAO,IAAI,CAAC3B,IAAI,CAAC4B,QAAQ,CAACvB,KAAK,CAACwB,WAAW,EAAE;EAC/C;EAEQb,kBAAkBA,CAAA;IACxB,OAAO,IAAI,CAACc,oBAAoB,CAAC,IAAI,CAAC9B,IAAI,CAAC4B,QAAQ,CAAC3B,IAAI,CAAC;EAC3D;EAEQ6B,oBAAoBA,CAACC,WAAwB;IACnD,OAAOA,WAAW,CAACC,MAAM,IAAI,IAAI;EACnC;;AArGWtC,mBAAmB,C;mBAAnBA,mBAAmB,EAAAL,EAAA,CAAA4C,iBAAA,CAAAC,EAAA,CAAAC,WAAA,GAAA9C,EAAA,CAAA4C,iBAAA,CAAAG,EAAA,CAAAC,wBAAA,GAAAhD,EAAA,CAAA4C,iBAAA,CAAAK,EAAA,CAAAC,MAAA;AAAA;AAAnB7C,mBAAmB,C;QAAnBA,mBAAmB;EAAA8C,SAAA;EAAAC,MAAA;IAAA/B,KAAA;EAAA;EAAAgC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,6BAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCdhC1D,EAAA,CAAA4D,cAAA,cAA+C;MAAtB5D,EAAA,CAAA6D,UAAA,sBAAAC,sDAAA;QAAA,OAAYH,GAAA,CAAApC,MAAA,EAAQ;MAAA,EAAC;MAC5CvB,EAAA,CAAA+D,UAAA,IAAAC,kDAAA,iCAGuB;MAEvBhE,EAAA,CAAA4D,cAAA,cAAgD;MAC9C5D,EAAA,CAAAiE,MAAA,GACF;MAAAjE,EAAA,CAAAkE,YAAA,EAAO;MAEPlE,EAAA,CAAAC,SAAA,wBAIkB;MASlBD,EAAA,CAAA4D,cAAA,yBAAoB;MAIjB5D,EAAA,CAAAiE,MAAA,gFAAa;MAAAjE,EAAA,CAAAkE,YAAA,EAAS;;;MA3BrBlE,EAAA,CAAAE,UAAA,cAAAyD,GAAA,CAAAhD,IAAA,CAAkB;MAEnBX,EAAA,CAAAmE,SAAA,GAAwB;MAAxBnE,EAAA,CAAAE,UAAA,SAAAyD,GAAA,CAAArC,gBAAA,GAAwB;MAKzBtB,EAAA,CAAAmE,SAAA,GACF;MADEnE,EAAA,CAAAoE,kBAAA,gCAAAT,GAAA,CAAAvC,YAAA,QACF;MAIEpB,EAAA,CAAAmE,SAAA,GAAkC;MAAlCnE,EAAA,CAAAE,UAAA,gBAAAyD,GAAA,CAAAhD,IAAA,CAAA4B,QAAA,CAAA3B,IAAA,CAAkC,cAAA+C,GAAA,CAAAjD,aAAA;MAMlCV,EAAA,CAAAmE,SAAA,GAAmC;MAAnCnE,EAAA,CAAAE,UAAA,gBAAAyD,GAAA,CAAAhD,IAAA,CAAA4B,QAAA,CAAAvB,KAAA,CAAmC"},"metadata":{},"sourceType":"module","externalDependencies":[]}