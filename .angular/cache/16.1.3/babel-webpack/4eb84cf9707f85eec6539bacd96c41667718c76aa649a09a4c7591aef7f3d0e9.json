{"ast":null,"code":"import { catchError, map, throwError } from \"rxjs\";\nimport { environment } from \"../environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./error.service\";\nimport * as i3 from \"./session.service\";\nexport let FieldService = /*#__PURE__*/(() => {\n  class FieldService {\n    constructor(http, errorService, sessionService) {\n      this.http = http;\n      this.errorService = errorService;\n      this.sessionService = sessionService;\n    }\n    isFieldPresent(field) {\n      return !!field && !!field.id && !!field.type && !!field.active && !!field.required && !!field.label && !!field.form;\n    }\n    getFieldById(id) {\n      let token = this.sessionService.getToken();\n      let path = environment.apiUrl + '/fields/' + id;\n      return this.http.post(path, token).pipe(catchError(this.errorHandler.bind(this)), map(field => {\n        field.type.shownName = field.type.name;\n        field.options = field.options.map(option => {\n          option.shownName = option.text;\n          return option;\n        });\n        return field;\n      }));\n    }\n    getFieldsByFormId(formId) {\n      let token = this.sessionService.getToken();\n      let path = environment.apiUrl + '/fields/form_' + formId;\n      return this.http.post(path, token).pipe(catchError(this.errorHandler.bind(this)), map(fields => {\n        return fields.map(field => {\n          field.type.shownName = field.type.name;\n          field.options = field.options.map(option => {\n            option.shownName = option.text;\n            return option;\n          });\n          return field;\n        });\n      }));\n    }\n    getActiveFieldsByFormId(formId) {\n      let token = this.sessionService.getToken();\n      let path = environment.apiUrl + '/fields_active/form_' + formId;\n      return this.http.post(path, token).pipe(catchError(this.errorHandler.bind(this)), map(fields => {\n        return fields.map(field => {\n          field.type.shownName = field.type.name;\n          field.options = field.options.map(option => {\n            option.shownName = option.text;\n            return option;\n          });\n          return field;\n        });\n      }));\n    }\n    getFieldCountsOfUserForms(userId) {\n      let path = environment.apiUrl + '/field_counts/user_' + userId;\n      return this.http.get(path).pipe(catchError(this.errorHandler.bind(this)));\n    }\n    getFieldCountsOfTopicForms(topicId) {\n      let path = environment.apiUrl + '/field_counts/topic_' + topicId;\n      return this.http.get(path).pipe(catchError(this.errorHandler.bind(this)));\n    }\n    saveField(field) {\n      let token = this.sessionService.getToken();\n      let tokenWithField = {\n        token: token,\n        field: field\n      };\n      return this.http.post(environment.apiUrl + '/save_field', tokenWithField).pipe(catchError(this.errorHandler.bind(this)));\n    }\n    deleteField(field) {\n      let token = this.sessionService.getToken();\n      let tokenWithField = {\n        token: token,\n        field: field\n      };\n      return this.http.post(environment.apiUrl + '/delete_field', tokenWithField).pipe(catchError(this.errorHandler.bind(this)));\n    }\n    errorHandler(error) {\n      this.errorService.handle(error.message);\n      return throwError(() => error.message);\n    }\n  }\n  FieldService.ɵfac = function FieldService_Factory(t) {\n    return new (t || FieldService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ErrorService), i0.ɵɵinject(i3.SessionService));\n  };\n  FieldService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FieldService,\n    factory: FieldService.ɵfac,\n    providedIn: 'root'\n  });\n  return FieldService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}