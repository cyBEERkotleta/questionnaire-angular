{"ast":null,"code":"import { Client } from \"@stomp/stompjs\";\nimport * as i0 from \"@angular/core\";\nexport class WebSocketService {\n  constructor() {\n    this.path = 'http://localhost:8080/websocket';\n    this.stompClient = new Client({\n      brokerURL: this.path,\n      debug: str => {\n        console.log(str);\n      }\n    });\n  }\n  subscribe(formId, callback) {\n    const connected = this.stompClient.active;\n    if (!connected) {\n      this.stompClient.activate();\n    }\n    return this.subscribeToForm(formId, callback);\n  }\n  subscribeToForm(formId, callback) {\n    return this.stompClient.subscribe(this.getDestination(formId), message => {\n      console.log('Received message:', JSON.stringify(message.body));\n    });\n  }\n  getDestination(formId) {\n    return '/response/answered_forms/queue/' + formId;\n  }\n}\nWebSocketService.ɵfac = function WebSocketService_Factory(t) {\n  return new (t || WebSocketService)();\n};\nWebSocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WebSocketService,\n  factory: WebSocketService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["Client","WebSocketService","constructor","path","stompClient","brokerURL","debug","str","console","log","subscribe","formId","callback","connected","active","activate","subscribeToForm","getDestination","message","JSON","stringify","body","factory","ɵfac","providedIn"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\service\\web-socket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {Client, StompSubscription} from \"@stomp/stompjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WebSocketService {\n  private path = 'http://localhost:8080/websocket';\n\n  stompClient = new Client({\n    brokerURL: this.path,\n    debug: (str) => {\n      console.log(str);\n    },\n  });\n\n  subscribe(formId: bigint, callback: any): StompSubscription {\n    const connected: boolean = this.stompClient.active;\n    if (!connected) {\n      this.stompClient.activate();\n    }\n    return this.subscribeToForm(formId, callback);\n  }\n\n  private subscribeToForm(formId: bigint, callback: any): StompSubscription {\n    return this.stompClient.subscribe(this.getDestination(formId), (message) => {\n      console.log('Received message:', JSON.stringify(message.body));\n    });\n  }\n\n  private getDestination(formId: bigint): string {\n    return '/response/answered_forms/queue/' + formId;\n  }\n}\n"],"mappings":"AACA,SAAQA,MAAM,QAA0B,gBAAgB;;AAKxD,OAAM,MAAOC,gBAAgB;EAH7BC,YAAA;IAIU,KAAAC,IAAI,GAAG,iCAAiC;IAEhD,KAAAC,WAAW,GAAG,IAAIJ,MAAM,CAAC;MACvBK,SAAS,EAAE,IAAI,CAACF,IAAI;MACpBG,KAAK,EAAGC,GAAG,IAAI;QACbC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAClB;KACD,CAAC;;EAEFG,SAASA,CAACC,MAAc,EAAEC,QAAa;IACrC,MAAMC,SAAS,GAAY,IAAI,CAACT,WAAW,CAACU,MAAM;IAClD,IAAI,CAACD,SAAS,EAAE;MACd,IAAI,CAACT,WAAW,CAACW,QAAQ,EAAE;;IAE7B,OAAO,IAAI,CAACC,eAAe,CAACL,MAAM,EAAEC,QAAQ,CAAC;EAC/C;EAEQI,eAAeA,CAACL,MAAc,EAAEC,QAAa;IACnD,OAAO,IAAI,CAACR,WAAW,CAACM,SAAS,CAAC,IAAI,CAACO,cAAc,CAACN,MAAM,CAAC,EAAGO,OAAO,IAAI;MACzEV,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEU,IAAI,CAACC,SAAS,CAACF,OAAO,CAACG,IAAI,CAAC,CAAC;IAChE,CAAC,CAAC;EACJ;EAEQJ,cAAcA,CAACN,MAAc;IACnC,OAAO,iCAAiC,GAAGA,MAAM;EACnD;;AA1BWV,gBAAgB,C;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB,C;SAAhBA,gBAAgB;EAAAqB,OAAA,EAAhBrB,gBAAgB,CAAAsB,IAAA;EAAAC,UAAA,EAFf;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}