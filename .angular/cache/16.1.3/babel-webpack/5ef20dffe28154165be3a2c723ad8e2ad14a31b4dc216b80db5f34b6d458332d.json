{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class SessionService {\n  constructor() {\n    this.TOKEN_KEY = 'token';\n    this.TOKEN_BY_DEFAULT = 'no_token';\n  }\n  saveTokenToLocalStorage(token) {\n    localStorage.setItem(this.TOKEN_KEY, token);\n  }\n  saveTokenToSessionStorage(token) {\n    sessionStorage.setItem(this.TOKEN_KEY, token);\n  }\n  updateTokenWhereItWasSet(token) {\n    if (this.getTokenFromSessionStorage() != this.TOKEN_BY_DEFAULT) this.saveTokenToSessionStorage(token);\n    if (this.getTokenFromLocalStorage() != this.TOKEN_BY_DEFAULT) this.saveTokenToLocalStorage(token);\n  }\n  getTokenFromLocalStorage() {\n    let token = localStorage.getItem(this.TOKEN_KEY);\n    return token ? token : this.TOKEN_BY_DEFAULT;\n  }\n  getTokenFromSessionStorage() {\n    let token = sessionStorage.getItem(this.TOKEN_KEY);\n    return token ? token : this.TOKEN_BY_DEFAULT;\n  }\n  getToken() {\n    let token = this.getTokenFromSessionStorage();\n    if (token && token != this.TOKEN_BY_DEFAULT) {\n      console.log('token: ' + token);\n      return token;\n    }\n    token = this.getTokenFromLocalStorage();\n    if (token && token != this.TOKEN_BY_DEFAULT) {\n      this.saveTokenToSessionStorage(token);\n      console.log('token: ' + token);\n      return token;\n    }\n    console.log('token: ' + token);\n    return this.TOKEN_BY_DEFAULT;\n  }\n  removeTokenFromLocalStorage() {\n    localStorage.removeItem(this.TOKEN_KEY);\n  }\n  removeTokenFromSessionStorage() {\n    sessionStorage.removeItem(this.TOKEN_KEY);\n  }\n  removeTokenFromEverywhere() {\n    this.removeTokenFromSessionStorage();\n    this.removeTokenFromLocalStorage();\n  }\n}\nSessionService.ɵfac = function SessionService_Factory(t) {\n  return new (t || SessionService)();\n};\nSessionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SessionService,\n  factory: SessionService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["SessionService","constructor","TOKEN_KEY","TOKEN_BY_DEFAULT","saveTokenToLocalStorage","token","localStorage","setItem","saveTokenToSessionStorage","sessionStorage","updateTokenWhereItWasSet","getTokenFromSessionStorage","getTokenFromLocalStorage","getItem","getToken","console","log","removeTokenFromLocalStorage","removeItem","removeTokenFromSessionStorage","removeTokenFromEverywhere","factory","ɵfac","providedIn"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\service\\session.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SessionService {\n  private TOKEN_KEY = 'token';\n  private TOKEN_BY_DEFAULT = 'no_token';\n\n  saveTokenToLocalStorage(token: string){\n    localStorage.setItem(this.TOKEN_KEY, token);\n  }\n\n  saveTokenToSessionStorage(token: string) {\n    sessionStorage.setItem(this.TOKEN_KEY, token);\n  }\n\n  updateTokenWhereItWasSet(token: string) {\n    if (this.getTokenFromSessionStorage() != this.TOKEN_BY_DEFAULT)\n      this.saveTokenToSessionStorage(token);\n    if (this.getTokenFromLocalStorage() != this.TOKEN_BY_DEFAULT)\n      this.saveTokenToLocalStorage(token);\n  }\n\n  getTokenFromLocalStorage() {\n    let token = localStorage.getItem(this.TOKEN_KEY);\n    return token ? token : this.TOKEN_BY_DEFAULT;\n  }\n\n  getTokenFromSessionStorage() {\n    let token = sessionStorage.getItem(this.TOKEN_KEY);\n    return token ? token : this.TOKEN_BY_DEFAULT;\n  }\n\n  getToken() {\n    let token = this.getTokenFromSessionStorage();\n    if (token && token != this.TOKEN_BY_DEFAULT) {\n      console.log('token: ' + token);\n      return token;\n    }\n    token = this.getTokenFromLocalStorage();\n    if (token && token != this.TOKEN_BY_DEFAULT) {\n      this.saveTokenToSessionStorage(token);\n      console.log('token: ' + token);\n      return token;\n    }\n    console.log('token: ' + token);\n    return this.TOKEN_BY_DEFAULT;\n  }\n\n  removeTokenFromLocalStorage(){\n    localStorage.removeItem(this.TOKEN_KEY);\n  }\n\n  removeTokenFromSessionStorage(){\n    sessionStorage.removeItem(this.TOKEN_KEY);\n  }\n\n  removeTokenFromEverywhere(){\n    this.removeTokenFromSessionStorage();\n    this.removeTokenFromLocalStorage();\n  }\n}\n"],"mappings":";AAKA,OAAM,MAAOA,cAAc;EAH3BC,YAAA;IAIU,KAAAC,SAAS,GAAG,OAAO;IACnB,KAAAC,gBAAgB,GAAG,UAAU;;EAErCC,uBAAuBA,CAACC,KAAa;IACnCC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACL,SAAS,EAAEG,KAAK,CAAC;EAC7C;EAEAG,yBAAyBA,CAACH,KAAa;IACrCI,cAAc,CAACF,OAAO,CAAC,IAAI,CAACL,SAAS,EAAEG,KAAK,CAAC;EAC/C;EAEAK,wBAAwBA,CAACL,KAAa;IACpC,IAAI,IAAI,CAACM,0BAA0B,EAAE,IAAI,IAAI,CAACR,gBAAgB,EAC5D,IAAI,CAACK,yBAAyB,CAACH,KAAK,CAAC;IACvC,IAAI,IAAI,CAACO,wBAAwB,EAAE,IAAI,IAAI,CAACT,gBAAgB,EAC1D,IAAI,CAACC,uBAAuB,CAACC,KAAK,CAAC;EACvC;EAEAO,wBAAwBA,CAAA;IACtB,IAAIP,KAAK,GAAGC,YAAY,CAACO,OAAO,CAAC,IAAI,CAACX,SAAS,CAAC;IAChD,OAAOG,KAAK,GAAGA,KAAK,GAAG,IAAI,CAACF,gBAAgB;EAC9C;EAEAQ,0BAA0BA,CAAA;IACxB,IAAIN,KAAK,GAAGI,cAAc,CAACI,OAAO,CAAC,IAAI,CAACX,SAAS,CAAC;IAClD,OAAOG,KAAK,GAAGA,KAAK,GAAG,IAAI,CAACF,gBAAgB;EAC9C;EAEAW,QAAQA,CAAA;IACN,IAAIT,KAAK,GAAG,IAAI,CAACM,0BAA0B,EAAE;IAC7C,IAAIN,KAAK,IAAIA,KAAK,IAAI,IAAI,CAACF,gBAAgB,EAAE;MAC3CY,OAAO,CAACC,GAAG,CAAC,SAAS,GAAGX,KAAK,CAAC;MAC9B,OAAOA,KAAK;;IAEdA,KAAK,GAAG,IAAI,CAACO,wBAAwB,EAAE;IACvC,IAAIP,KAAK,IAAIA,KAAK,IAAI,IAAI,CAACF,gBAAgB,EAAE;MAC3C,IAAI,CAACK,yBAAyB,CAACH,KAAK,CAAC;MACrCU,OAAO,CAACC,GAAG,CAAC,SAAS,GAAGX,KAAK,CAAC;MAC9B,OAAOA,KAAK;;IAEdU,OAAO,CAACC,GAAG,CAAC,SAAS,GAAGX,KAAK,CAAC;IAC9B,OAAO,IAAI,CAACF,gBAAgB;EAC9B;EAEAc,2BAA2BA,CAAA;IACzBX,YAAY,CAACY,UAAU,CAAC,IAAI,CAAChB,SAAS,CAAC;EACzC;EAEAiB,6BAA6BA,CAAA;IAC3BV,cAAc,CAACS,UAAU,CAAC,IAAI,CAAChB,SAAS,CAAC;EAC3C;EAEAkB,yBAAyBA,CAAA;IACvB,IAAI,CAACD,6BAA6B,EAAE;IACpC,IAAI,CAACF,2BAA2B,EAAE;EACpC;;AAxDWjB,cAAc,C;mBAAdA,cAAc;AAAA;AAAdA,cAAc,C;SAAdA,cAAc;EAAAqB,OAAA,EAAdrB,cAAc,CAAAsB,IAAA;EAAAC,UAAA,EAFb;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}