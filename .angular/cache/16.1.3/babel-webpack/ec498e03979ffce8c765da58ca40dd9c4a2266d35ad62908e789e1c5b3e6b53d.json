{"ast":null,"code":"import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { Form } from \"../../entity/Form\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/form.service\";\nimport * as i2 from \"../../service/user.service\";\nimport * as i3 from \"../../service/modal-create-window.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"../../little-components/text-field/text-field.component\";\nimport * as i8 from \"../../little-components/error-paragraph/error-paragraph.component\";\nimport * as i9 from \"../../little-components/middle-control/middle-control.component\";\nimport * as i10 from \"../../little-components/checkbox-single/checkbox-single.component\";\nfunction CreateFormComponent_app_error_paragraph_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-error-paragraph\", 6);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"errorMessage\", ctx_r0.globalError);\n  }\n}\nexport class CreateFormComponent {\n  constructor(formService, userService, modalService, router) {\n    this.showAllErrors = false;\n    this.globalError = '';\n    this.form = new FormGroup({\n      name: new FormControl('', [Validators.minLength(2), Validators.maxLength(150), Validators.required]),\n      shown: new FormControl(true)\n    });\n    this.formService = formService;\n    this.userService = userService;\n    this.modalService = modalService;\n    this.router = router;\n  }\n  ngOnInit() {\n    this.subscriptionUser = this.userService.updateCurrentUser().subscribe(result => {\n      this.user = result;\n    });\n  }\n  ngOnDestroy() {\n    if (this.subscriptionUser) this.subscriptionUser.unsubscribe();\n    if (this.subscriptionSave) this.subscriptionSave.unsubscribe();\n  }\n  getTopicName() {\n    if (!this.topic) return '';\n    return this.topic.name;\n  }\n  isGlobalErrorSet() {\n    return this.globalError != '';\n  }\n  submit() {\n    if (this.anyErrorExists()) return;\n    this.addForm();\n  }\n  anyErrorExists() {\n    this.resetGlobalError();\n    if (this.isAnyErrorInFields()) {\n      this.showAllErrors = true;\n      return true;\n    }\n    return false;\n  }\n  addForm() {\n    let form = this.createFormFromFields();\n    this.subscriptionSave = this.formService.saveForm(form).subscribe(result => {\n      console.log(result);\n      if (result.success) {\n        this.modalService.close();\n        location.reload();\n      } else {\n        this.globalError = result.message;\n      }\n    });\n  }\n  resetGlobalError() {\n    this.globalError = '';\n  }\n  createFormFromFields() {\n    let name = this.getNameFromField();\n    let shown = this.getShownFromField();\n    return new Form(null, name, shown, this.user, this.topic);\n  }\n  getNameFromField() {\n    return this.form.controls.name.getRawValue();\n  }\n  getShownFromField() {\n    return this.form.controls.shown.getRawValue();\n  }\n  isAnyErrorInFields() {\n    return this.doesControlHaveError(this.form.controls.name);\n  }\n  doesControlHaveError(formControl) {\n    return formControl.errors != null;\n  }\n}\nCreateFormComponent.ɵfac = function CreateFormComponent_Factory(t) {\n  return new (t || CreateFormComponent)(i0.ɵɵdirectiveInject(i1.FormService), i0.ɵɵdirectiveInject(i2.UserService), i0.ɵɵdirectiveInject(i3.ModalCreateWindowService), i0.ɵɵdirectiveInject(i4.Router));\n};\nCreateFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CreateFormComponent,\n  selectors: [[\"app-create-form\"]],\n  inputs: {\n    topic: \"topic\"\n  },\n  decls: 10,\n  vars: 6,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [3, \"errorMessage\", 4, \"ngIf\"], [1, \"fw-semibold\", \"text-gray-600\", \"text-xl\"], [\"fieldName\", \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435\", 3, \"formElement\", \"showError\"], [\"fieldName\", \"\\u041E\\u0442\\u043E\\u0431\\u0440\\u0430\\u0436\\u0430\\u0442\\u044C \\u0444\\u043E\\u0440\\u043C\\u0443 \\u0432 \\u043A\\u0430\\u0442\\u0430\\u043B\\u043E\\u0433\\u0435\", 3, \"formElement\"], [\"type\", \"submit\", 1, \"button-red-rounded\"], [3, \"errorMessage\"]],\n  template: function CreateFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function CreateFormComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.submit();\n      });\n      i0.ɵɵtemplate(1, CreateFormComponent_app_error_paragraph_1_Template, 1, 1, \"app-error-paragraph\", 1);\n      i0.ɵɵelementStart(2, \"span\", 2);\n      i0.ɵɵtext(3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"app-text-field\", 3)(5, \"app-checkbox-single\", 4)(6, \"br\");\n      i0.ɵɵelementStart(7, \"app-middle-control\")(8, \"button\", 5);\n      i0.ɵɵtext(9, \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u0444\\u043E\\u0440\\u043C\\u0443\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isGlobalErrorSet());\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \\u0422\\u0435\\u043C\\u0430: \", ctx.getTopicName(), \" \");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formElement\", ctx.form.controls.name)(\"showError\", ctx.showAllErrors);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formElement\", ctx.form.controls.shown);\n    }\n  },\n  dependencies: [i5.NgIf, i6.ɵNgNoValidate, i6.NgControlStatusGroup, i6.FormGroupDirective, i7.TextFieldComponent, i8.ErrorParagraphComponent, i9.MiddleControlComponent, i10.CheckboxSingleComponent],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["FormControl","FormGroup","Validators","Form","i0","ɵɵelement","ɵɵproperty","ctx_r0","globalError","CreateFormComponent","constructor","formService","userService","modalService","router","showAllErrors","form","name","minLength","maxLength","required","shown","ngOnInit","subscriptionUser","updateCurrentUser","subscribe","result","user","ngOnDestroy","unsubscribe","subscriptionSave","getTopicName","topic","isGlobalErrorSet","submit","anyErrorExists","addForm","resetGlobalError","isAnyErrorInFields","createFormFromFields","saveForm","console","log","success","close","location","reload","message","getNameFromField","getShownFromField","controls","getRawValue","doesControlHaveError","formControl","errors","ɵɵdirectiveInject","i1","FormService","i2","UserService","i3","ModalCreateWindowService","i4","Router","selectors","inputs","decls","vars","consts","template","CreateFormComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","CreateFormComponent_Template_form_ngSubmit_0_listener","ɵɵtemplate","CreateFormComponent_app_error_paragraph_1_Template","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\components\\create-form\\create-form.component.ts","C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\components\\create-form\\create-form.component.html"],"sourcesContent":["import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {ModalCreateWindowService} from \"../../service/modal-create-window.service\";\r\nimport {Router} from \"@angular/router\";\r\nimport {Subscription} from \"rxjs\";\r\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\r\nimport {Topic} from \"../../entity/Topic\";\r\nimport {FormService} from \"../../service/form.service\";\r\nimport {Form} from \"../../entity/Form\";\r\nimport {User} from \"../../entity/User\";\r\nimport {UserService} from \"../../service/user.service\";\r\n\r\n@Component({\r\n  selector: 'app-create-form',\r\n  templateUrl: './create-form.component.html',\r\n  styleUrls: ['./create-form.component.css']\r\n})\r\nexport class CreateFormComponent implements OnInit, OnDestroy {\r\n  @Input() topic: Topic;\r\n  private user: User;\r\n\r\n  private formService: FormService;\r\n  private userService: UserService;\r\n  private modalService: ModalCreateWindowService;\r\n  private router: Router;\r\n\r\n  showAllErrors = false;\r\n  globalError: string = '';\r\n\r\n  private subscriptionUser: Subscription;\r\n  private subscriptionSave: Subscription;\r\n\r\n  form = new FormGroup({\r\n    name: new FormControl<string>('', [\r\n      Validators.minLength(2),\r\n      Validators.maxLength(150),\r\n      Validators.required\r\n    ]),\r\n    shown: new FormControl<boolean>(true)\r\n  });\r\n\r\n  constructor(formService: FormService,\r\n              userService: UserService,\r\n              modalService: ModalCreateWindowService,\r\n              router: Router) {\r\n    this.formService = formService;\r\n    this.userService = userService;\r\n    this.modalService = modalService;\r\n    this.router = router;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.subscriptionUser = this.userService.updateCurrentUser()\r\n      .subscribe(result => {\r\n        this.user = result;\r\n      });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.subscriptionUser)\r\n      this.subscriptionUser.unsubscribe();\r\n    if (this.subscriptionSave)\r\n      this.subscriptionSave.unsubscribe();\r\n  }\r\n\r\n  getTopicName(): string {\r\n    if (!this.topic)\r\n      return '';\r\n    return this.topic.name;\r\n  }\r\n\r\n  isGlobalErrorSet(): boolean {\r\n    return this.globalError != '';\r\n  }\r\n\r\n  submit() {\r\n    if (this.anyErrorExists())\r\n      return;\r\n\r\n    this.addForm();\r\n  }\r\n\r\n  private anyErrorExists(): boolean {\r\n    this.resetGlobalError();\r\n\r\n    if (this.isAnyErrorInFields()) {\r\n      this.showAllErrors = true;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private addForm() {\r\n    let form = this.createFormFromFields();\r\n\r\n    this.subscriptionSave = this.formService.saveForm(form)\r\n      .subscribe(result => {\r\n        console.log(result);\r\n        if (result.success) {\r\n          this.modalService.close();\r\n          location.reload();\r\n        }\r\n        else {\r\n          this.globalError = result.message;\r\n        }\r\n      });\r\n  }\r\n\r\n  private resetGlobalError() {\r\n    this.globalError = '';\r\n  }\r\n\r\n  private createFormFromFields(): Form {\r\n    let name = this.getNameFromField();\r\n    let shown = this.getShownFromField();\r\n\r\n    return new Form(null, name, shown, this.user, this.topic);\r\n  }\r\n\r\n  private getNameFromField(): string {\r\n    return this.form.controls.name.getRawValue();\r\n  }\r\n\r\n  private getShownFromField(): boolean {\r\n    return this.form.controls.shown.getRawValue();\r\n  }\r\n\r\n  private isAnyErrorInFields(): boolean {\r\n    return this.doesControlHaveError(this.form.controls.name);\r\n  }\r\n\r\n  private doesControlHaveError(formControl: FormControl): boolean {\r\n    return formControl.errors != null;\r\n  }\r\n}\r\n","<form [formGroup]=\"form\" (ngSubmit)=\"submit()\">\r\n  <app-error-paragraph\r\n    *ngIf=\"isGlobalErrorSet()\"\r\n    [errorMessage]=\"globalError\"\r\n  ></app-error-paragraph>\r\n\r\n  <span class=\"fw-semibold text-gray-600 text-xl\">\r\n    Тема: {{getTopicName()}}\r\n  </span>\r\n\r\n  <app-text-field\r\n    fieldName=\"Название\"\r\n    [formElement]=\"form.controls.name\"\r\n    [showError]=\"showAllErrors\"\r\n  ></app-text-field>\r\n\r\n  <app-checkbox-single\r\n    fieldName=\"Отображать форму в каталоге\"\r\n    [formElement]=\"form.controls.shown\"\r\n  ></app-checkbox-single>\r\n\r\n  <br/>\r\n\r\n  <app-middle-control>\r\n    <button\r\n      type=\"submit\"\r\n      class=\"button-red-rounded\"\r\n    >Создать форму</button>\r\n  </app-middle-control>\r\n</form>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}