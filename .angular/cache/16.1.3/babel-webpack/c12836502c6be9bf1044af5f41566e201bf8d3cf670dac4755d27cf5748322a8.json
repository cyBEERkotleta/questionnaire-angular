{"ast":null,"code":"import { catchError, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./error.service\";\nimport * as i3 from \"./session.service\";\nexport class FieldService {\n  constructor(http, errorService, sessionService) {\n    this.http = http;\n    this.errorService = errorService;\n    this.sessionService = sessionService;\n  }\n  isFieldPresent(field) {\n    return !!field && !!field.id && !!field.fieldType && !!field.active && !!field.required && !!field.label;\n  }\n  getFieldById(id) {\n    let token = this.sessionService.getToken();\n    let path = 'http://localhost:8080/fields/' + id;\n    return this.http.post(path, token).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  getFieldsByFormId(formId) {\n    let token = this.sessionService.getToken();\n    let path = 'http://localhost:8080/fields/form_' + formId;\n    return this.http.post(path, token).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  getActiveFieldsByFormId(formId) {\n    let token = this.sessionService.getToken();\n    let path = 'http://localhost:8080/fields_active/form_' + formId;\n    return this.http.post(path, token).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  getFieldCountsOfUserForms(userId) {\n    let path = 'http://localhost:8080/field_counts/user_' + userId;\n    return this.http.get(path).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  saveForm(field) {\n    let token = this.sessionService.getToken();\n    let tokenWithField = {\n      token: token,\n      field: field\n    };\n    return this.http.post('http://localhost:8080/save_field', tokenWithField).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  deleteForm(field) {\n    let token = this.sessionService.getToken();\n    let tokenWithField = {\n      token: token,\n      field: field\n    };\n    return this.http.post('http://localhost:8080/delete_field', tokenWithField).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  errorHandler(error) {\n    this.errorService.handle(error.message);\n    return throwError(() => error.message);\n  }\n}\nFieldService.ɵfac = function FieldService_Factory(t) {\n  return new (t || FieldService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ErrorService), i0.ɵɵinject(i3.SessionService));\n};\nFieldService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FieldService,\n  factory: FieldService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","throwError","FieldService","constructor","http","errorService","sessionService","isFieldPresent","field","id","fieldType","active","required","label","getFieldById","token","getToken","path","post","pipe","errorHandler","bind","getFieldsByFormId","formId","getActiveFieldsByFormId","getFieldCountsOfUserForms","userId","get","saveForm","tokenWithField","deleteForm","error","handle","message","i0","ɵɵinject","i1","HttpClient","i2","ErrorService","i3","SessionService","factory","ɵfac","providedIn"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\service\\field.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient, HttpErrorResponse} from \"@angular/common/http\";\nimport {ErrorService} from \"./error.service\";\nimport {SessionService} from \"./session.service\";\nimport {catchError, Observable, throwError} from \"rxjs\";\nimport {RequestResult} from \"../additional/RequestResult\";\nimport {Field} from \"../entity/Field\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FieldService {\n  private http: HttpClient;\n  private errorService: ErrorService;\n  private sessionService: SessionService;\n\n  constructor(http: HttpClient,\n              errorService: ErrorService,\n              sessionService: SessionService) {\n    this.http = http;\n    this.errorService = errorService;\n    this.sessionService = sessionService;\n  }\n\n  isFieldPresent(field: Field): boolean {\n    return !!field && !!field.id && !!field.fieldType && !!field.active && !!field.required && !!field.label;\n  }\n\n  getFieldById(id: bigint): Observable<Field> {\n    let token = this.sessionService.getToken();\n    let path = 'http://localhost:8080/fields/' + id;\n    return this.http.post<Field>(path, token)\n      .pipe(\n        catchError(this.errorHandler.bind(this))\n      );\n  }\n\n  getFieldsByFormId(formId: bigint) : Observable<Field[]> {\n    let token = this.sessionService.getToken();\n    let path = 'http://localhost:8080/fields/form_' + formId;\n    return this.http.post<Field[]>(path, token)\n      .pipe(\n        catchError(this.errorHandler.bind(this))\n      );\n  }\n\n  getActiveFieldsByFormId(formId: bigint) : Observable<Field[]> {\n    let token = this.sessionService.getToken();\n    let path = 'http://localhost:8080/fields_active/form_' + formId;\n    return this.http.post<Field[]>(path, token)\n      .pipe(\n        catchError(this.errorHandler.bind(this))\n      );\n  }\n\n  getFieldCountsOfUserForms(userId: bigint): Observable<number[]> {\n    let path = 'http://localhost:8080/field_counts/user_' + userId;\n    return this.http.get<number[]>(path)\n      .pipe(\n        catchError(this.errorHandler.bind(this))\n      );\n  }\n\n  saveForm(field: Field): Observable<RequestResult> {\n    let token = this.sessionService.getToken();\n    let tokenWithField = {token: token, field: field};\n    return this.http.post<RequestResult>('http://localhost:8080/save_field', tokenWithField)\n      .pipe(\n        catchError(this.errorHandler.bind(this))\n      );\n  }\n\n  deleteForm(field: Field): Observable<RequestResult> {\n    let token = this.sessionService.getToken();\n    let tokenWithField = {token: token, field: field};\n    return this.http.post<RequestResult>('http://localhost:8080/delete_field', tokenWithField)\n      .pipe(\n        catchError(this.errorHandler.bind(this))\n      );\n  }\n\n  private errorHandler(error: HttpErrorResponse) {\n    this.errorService.handle(error.message);\n    return throwError(() => error.message);\n  }\n}\n"],"mappings":"AAIA,SAAQA,UAAU,EAAcC,UAAU,QAAO,MAAM;;;;;AAOvD,OAAM,MAAOC,YAAY;EAKvBC,YAAYC,IAAgB,EAChBC,YAA0B,EAC1BC,cAA8B;IACxC,IAAI,CAACF,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,cAAc,GAAGA,cAAc;EACtC;EAEAC,cAAcA,CAACC,KAAY;IACzB,OAAO,CAAC,CAACA,KAAK,IAAI,CAAC,CAACA,KAAK,CAACC,EAAE,IAAI,CAAC,CAACD,KAAK,CAACE,SAAS,IAAI,CAAC,CAACF,KAAK,CAACG,MAAM,IAAI,CAAC,CAACH,KAAK,CAACI,QAAQ,IAAI,CAAC,CAACJ,KAAK,CAACK,KAAK;EAC1G;EAEAC,YAAYA,CAACL,EAAU;IACrB,IAAIM,KAAK,GAAG,IAAI,CAACT,cAAc,CAACU,QAAQ,EAAE;IAC1C,IAAIC,IAAI,GAAG,+BAA+B,GAAGR,EAAE;IAC/C,OAAO,IAAI,CAACL,IAAI,CAACc,IAAI,CAAQD,IAAI,EAAEF,KAAK,CAAC,CACtCI,IAAI,CACHnB,UAAU,CAAC,IAAI,CAACoB,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CACzC;EACL;EAEAC,iBAAiBA,CAACC,MAAc;IAC9B,IAAIR,KAAK,GAAG,IAAI,CAACT,cAAc,CAACU,QAAQ,EAAE;IAC1C,IAAIC,IAAI,GAAG,oCAAoC,GAAGM,MAAM;IACxD,OAAO,IAAI,CAACnB,IAAI,CAACc,IAAI,CAAUD,IAAI,EAAEF,KAAK,CAAC,CACxCI,IAAI,CACHnB,UAAU,CAAC,IAAI,CAACoB,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CACzC;EACL;EAEAG,uBAAuBA,CAACD,MAAc;IACpC,IAAIR,KAAK,GAAG,IAAI,CAACT,cAAc,CAACU,QAAQ,EAAE;IAC1C,IAAIC,IAAI,GAAG,2CAA2C,GAAGM,MAAM;IAC/D,OAAO,IAAI,CAACnB,IAAI,CAACc,IAAI,CAAUD,IAAI,EAAEF,KAAK,CAAC,CACxCI,IAAI,CACHnB,UAAU,CAAC,IAAI,CAACoB,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CACzC;EACL;EAEAI,yBAAyBA,CAACC,MAAc;IACtC,IAAIT,IAAI,GAAG,0CAA0C,GAAGS,MAAM;IAC9D,OAAO,IAAI,CAACtB,IAAI,CAACuB,GAAG,CAAWV,IAAI,CAAC,CACjCE,IAAI,CACHnB,UAAU,CAAC,IAAI,CAACoB,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CACzC;EACL;EAEAO,QAAQA,CAACpB,KAAY;IACnB,IAAIO,KAAK,GAAG,IAAI,CAACT,cAAc,CAACU,QAAQ,EAAE;IAC1C,IAAIa,cAAc,GAAG;MAACd,KAAK,EAAEA,KAAK;MAAEP,KAAK,EAAEA;IAAK,CAAC;IACjD,OAAO,IAAI,CAACJ,IAAI,CAACc,IAAI,CAAgB,kCAAkC,EAAEW,cAAc,CAAC,CACrFV,IAAI,CACHnB,UAAU,CAAC,IAAI,CAACoB,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CACzC;EACL;EAEAS,UAAUA,CAACtB,KAAY;IACrB,IAAIO,KAAK,GAAG,IAAI,CAACT,cAAc,CAACU,QAAQ,EAAE;IAC1C,IAAIa,cAAc,GAAG;MAACd,KAAK,EAAEA,KAAK;MAAEP,KAAK,EAAEA;IAAK,CAAC;IACjD,OAAO,IAAI,CAACJ,IAAI,CAACc,IAAI,CAAgB,oCAAoC,EAAEW,cAAc,CAAC,CACvFV,IAAI,CACHnB,UAAU,CAAC,IAAI,CAACoB,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CACzC;EACL;EAEQD,YAAYA,CAACW,KAAwB;IAC3C,IAAI,CAAC1B,YAAY,CAAC2B,MAAM,CAACD,KAAK,CAACE,OAAO,CAAC;IACvC,OAAOhC,UAAU,CAAC,MAAM8B,KAAK,CAACE,OAAO,CAAC;EACxC;;AAzEW/B,YAAY,C;mBAAZA,YAAY,EAAAgC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,YAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,cAAA;AAAA;AAAZvC,YAAY,C;SAAZA,YAAY;EAAAwC,OAAA,EAAZxC,YAAY,CAAAyC,IAAA;EAAAC,UAAA,EAFX;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}