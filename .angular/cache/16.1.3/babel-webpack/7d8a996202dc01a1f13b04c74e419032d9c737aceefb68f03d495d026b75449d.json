{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/field-type.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"../text-field/text-field.component\";\nimport * as i4 from \"../multi-line-text/multi-line-text.component\";\nimport * as i5 from \"../choice-date/choice-date.component\";\nfunction FlexibleFieldControlComponent_app_text_field_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-text-field\", 1);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"fieldName\", ctx_r0.field.label)(\"formElement\", ctx_r0.formElement)(\"showError\", ctx_r0.showError)(\"additionalNote\", ctx_r0.additionalNote);\n  }\n}\nfunction FlexibleFieldControlComponent_app_multi_line_text_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-multi-line-text\", 1);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"fieldName\", ctx_r1.field.label)(\"formElement\", ctx_r1.formElement)(\"showError\", ctx_r1.showError)(\"additionalNote\", ctx_r1.additionalNote);\n  }\n}\nfunction FlexibleFieldControlComponent_app_choice_date_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-choice-date\", 1);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"fieldName\", ctx_r2.field.label)(\"formElement\", ctx_r2.formElement)(\"showError\", ctx_r2.showError)(\"additionalNote\", ctx_r2.additionalNote);\n  }\n}\nfunction FlexibleFieldControlComponent_app_comb_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-comb\", 1);\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"fieldName\", ctx_r3.field.label)(\"formElement\", ctx_r3.formElement)(\"showError\", ctx_r3.showError)(\"additionalNote\", ctx_r3.additionalNote);\n  }\n}\nexport class FlexibleFieldControlComponent {\n  constructor(fieldTypeService) {\n    this.showError = false;\n    this.additionalNote = '';\n    this.fieldTypeService = fieldTypeService;\n  }\n  isSingleLineText() {\n    let type1 = this.field.type;\n    let type2 = this.fieldTypeService.singleLineText;\n    return this.fieldTypeService.areTypesEqual(type1, type2);\n  }\n  isMultiLineText() {\n    let type1 = this.field.type;\n    let type2 = this.fieldTypeService.multiLineText;\n    return this.fieldTypeService.areTypesEqual(type1, type2);\n  }\n  isDate() {\n    let type1 = this.field.type;\n    let type2 = this.fieldTypeService.date;\n    return this.fieldTypeService.areTypesEqual(type1, type2);\n  }\n  isComboBox() {\n    let type1 = this.field.type;\n    let type2 = this.fieldTypeService.comboBox;\n    return this.fieldTypeService.areTypesEqual(type1, type2);\n  }\n  isCheckBox() {\n    let type1 = this.field.type;\n    let type2 = this.fieldTypeService.checkBox;\n    return this.fieldTypeService.areTypesEqual(type1, type2);\n  }\n  isRadioButton() {\n    let type1 = this.field.type;\n    let type2 = this.fieldTypeService.radioButton;\n    return this.fieldTypeService.areTypesEqual(type1, type2);\n  }\n}\nFlexibleFieldControlComponent.ɵfac = function FlexibleFieldControlComponent_Factory(t) {\n  return new (t || FlexibleFieldControlComponent)(i0.ɵɵdirectiveInject(i1.FieldTypeService));\n};\nFlexibleFieldControlComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FlexibleFieldControlComponent,\n  selectors: [[\"app-flexible-field-control\"]],\n  inputs: {\n    field: \"field\",\n    formElement: \"formElement\",\n    showError: \"showError\",\n    additionalNote: \"additionalNote\"\n  },\n  decls: 4,\n  vars: 4,\n  consts: [[3, \"fieldName\", \"formElement\", \"showError\", \"additionalNote\", 4, \"ngIf\"], [3, \"fieldName\", \"formElement\", \"showError\", \"additionalNote\"]],\n  template: function FlexibleFieldControlComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, FlexibleFieldControlComponent_app_text_field_0_Template, 1, 4, \"app-text-field\", 0);\n      i0.ɵɵtemplate(1, FlexibleFieldControlComponent_app_multi_line_text_1_Template, 1, 4, \"app-multi-line-text\", 0);\n      i0.ɵɵtemplate(2, FlexibleFieldControlComponent_app_choice_date_2_Template, 1, 4, \"app-choice-date\", 0);\n      i0.ɵɵtemplate(3, FlexibleFieldControlComponent_app_comb_3_Template, 1, 4, \"app-comb\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.isSingleLineText());\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isMultiLineText());\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isDate());\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isComboBox());\n    }\n  },\n  dependencies: [i2.NgIf, i3.TextFieldComponent, i4.MultiLineTextComponent, i5.ChoiceDateComponent],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["i0","ɵɵelement","ɵɵproperty","ctx_r0","field","label","formElement","showError","additionalNote","ctx_r1","ctx_r2","ctx_r3","FlexibleFieldControlComponent","constructor","fieldTypeService","isSingleLineText","type1","type","type2","singleLineText","areTypesEqual","isMultiLineText","multiLineText","isDate","date","isComboBox","comboBox","isCheckBox","checkBox","isRadioButton","radioButton","ɵɵdirectiveInject","i1","FieldTypeService","selectors","inputs","decls","vars","consts","template","FlexibleFieldControlComponent_Template","rf","ctx","ɵɵtemplate","FlexibleFieldControlComponent_app_text_field_0_Template","FlexibleFieldControlComponent_app_multi_line_text_1_Template","FlexibleFieldControlComponent_app_choice_date_2_Template","FlexibleFieldControlComponent_app_comb_3_Template","ɵɵadvance"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\little-components\\flexible-field-control\\flexible-field-control.component.ts","C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\little-components\\flexible-field-control\\flexible-field-control.component.html"],"sourcesContent":["import {Component, Input} from '@angular/core';\nimport {FormControl} from \"@angular/forms\";\nimport {Field} from \"../../entity/Field\";\nimport {FieldTypeService} from \"../../service/field-type.service\";\n\n@Component({\n  selector: 'app-flexible-field-control',\n  templateUrl: './flexible-field-control.component.html',\n  styleUrls: ['./flexible-field-control.component.css']\n})\nexport class FlexibleFieldControlComponent {\n  @Input() field: Field;\n  @Input() formElement: FormControl;\n  @Input() showError: boolean = false;\n  @Input() additionalNote: string = '';\n\n  private fieldTypeService: FieldTypeService;\n\n  constructor(fieldTypeService: FieldTypeService) {\n    this.fieldTypeService = fieldTypeService;\n  }\n\n  isSingleLineText() {\n    let type1 = this.field.type;\n    let type2 = this.fieldTypeService.singleLineText;\n    return this.fieldTypeService.areTypesEqual(type1, type2);\n  }\n\n  isMultiLineText() {\n    let type1 = this.field.type;\n    let type2 = this.fieldTypeService.multiLineText;\n    return this.fieldTypeService.areTypesEqual(type1, type2);\n  }\n\n  isDate() {\n    let type1 = this.field.type;\n    let type2 = this.fieldTypeService.date;\n    return this.fieldTypeService.areTypesEqual(type1, type2);\n  }\n\n  isComboBox() {\n    let type1 = this.field.type;\n    let type2 = this.fieldTypeService.comboBox;\n    return this.fieldTypeService.areTypesEqual(type1, type2);\n  }\n\n  isCheckBox() {\n    let type1 = this.field.type;\n    let type2 = this.fieldTypeService.checkBox;\n    return this.fieldTypeService.areTypesEqual(type1, type2);\n  }\n\n  isRadioButton() {\n    let type1 = this.field.type;\n    let type2 = this.fieldTypeService.radioButton;\n    return this.fieldTypeService.areTypesEqual(type1, type2);\n  }\n}\n","<app-text-field\n  *ngIf=\"isSingleLineText()\"\n\n  [fieldName]=\"field.label\"\n  [formElement]=\"formElement\"\n  [showError]=\"showError\"\n  [additionalNote]=\"additionalNote\"\n></app-text-field>\n\n<app-multi-line-text\n  *ngIf=\"isMultiLineText()\"\n\n  [fieldName]=\"field.label\"\n  [formElement]=\"formElement\"\n  [showError]=\"showError\"\n  [additionalNote]=\"additionalNote\"\n></app-multi-line-text>\n\n<app-choice-date\n  *ngIf=\"isDate()\"\n\n  [fieldName]=\"field.label\"\n  [formElement]=\"formElement\"\n  [showError]=\"showError\"\n  [additionalNote]=\"additionalNote\"\n></app-choice-date>\n\n<app-comb\n  *ngIf=\"isComboBox()\"\n\n  [fieldName]=\"field.label\"\n  [formElement]=\"formElement\"\n  [showError]=\"showError\"\n  [additionalNote]=\"additionalNote\"\n></app-comb>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}