{"ast":null,"code":"import { catchError, tap, throwError } from \"rxjs\";\nimport { environment } from \"../environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./error.service\";\nimport * as i3 from \"./session.service\";\nimport * as i4 from \"./mail.service\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(http, errorService, sessionService, mailService) {\n      this.http = http;\n      this.errorService = errorService;\n      this.sessionService = sessionService;\n      this.mailService = mailService;\n    }\n    isUserPresent(user) {\n      return !!user && !!user.id && !!user.userRole && !!user.firstName && !!user.lastName && !!user.email && !!user.phoneNumber && !!user.gender;\n    }\n    getAll() {\n      let token = this.sessionService.getToken();\n      return this.http.post(environment.apiUrl + '/users', token).pipe(catchError(this.errorHandler.bind(this)));\n    }\n    getUserById(id) {\n      let token = this.sessionService.getToken();\n      let path = environment.apiUrl + '/users/' + id;\n      return this.http.post(path, token).pipe(catchError(this.errorHandler.bind(this)));\n    }\n    register(user, password) {\n      const userWithPassword = {\n        user: user,\n        password: password\n      };\n      return this.http.post(environment.apiUrl + '/register', userWithPassword).pipe(catchError(this.errorHandler.bind(this)), tap(result => {\n        if (result.success) {\n          this.updateTokenInSession(result.token);\n          this.updateCurrentUser().subscribe(result => result);\n        }\n      }));\n    }\n    tryRegister(user, password) {\n      const userWithPassword = {\n        user: user,\n        password: password\n      };\n      return this.http.post(environment.apiUrl + '/try_register', userWithPassword).pipe(catchError(this.errorHandler.bind(this)));\n    }\n    login(email, password, rememberMe) {\n      const loginData = {\n        email: email,\n        password: password\n      };\n      return this.http.post(environment.apiUrl + '/login', loginData).pipe(catchError(this.errorHandler.bind(this)), tap(result => {\n        if (result.success) {\n          this.updateTokenWithRememberMeFlag(result.token, rememberMe);\n          this.updateCurrentUser().subscribe(result => result);\n        }\n      }));\n    }\n    logOut() {\n      this.sessionService.removeTokenFromEverywhere();\n      this.sessionService.resetUser();\n    }\n    changePassword(oldPassword, newPassword) {\n      let token = this.sessionService.getToken();\n      const tokenWithChangePasswordData = {\n        token: token,\n        oldPassword: oldPassword,\n        newPassword: newPassword\n      };\n      return this.http.post(environment.apiUrl + '/change_password', tokenWithChangePasswordData).pipe(catchError(this.errorHandler.bind(this)), tap(result => {\n        if (result.success) {\n          this.updateTokenWhereItWasSet(result.token);\n          this.updateCurrentUser().subscribe(result => {\n            this.mailService.sendPasswordChangeNotification(this.sessionService.getUser().email).subscribe(mail => mail);\n          });\n        }\n      }));\n    }\n    saveUser(user) {\n      let token = this.sessionService.getToken();\n      const tokenWithUser = {\n        token: token,\n        user: user\n      };\n      return this.http.post(environment.apiUrl + '/save_user', tokenWithUser).pipe(catchError(this.errorHandler.bind(this)), tap(result => {\n        if (result.success) {\n          this.updateTokenWhereItWasSet(result.token);\n          this.updateCurrentUser().subscribe(result => result);\n        }\n      }));\n    }\n    updateCurrentUser() {\n      let token = this.sessionService.getToken();\n      return this.http.post(environment.apiUrl + '/user_by_token', token).pipe(catchError(this.errorHandler.bind(this)), tap(result => {\n        if (this.isUserPresent(result)) this.sessionService.setUser(result);\n      }));\n    }\n    getUserByToken(token) {\n      return this.http.post(environment.apiUrl + '/user_by_token', token).pipe(catchError(this.errorHandler.bind(this)));\n    }\n    finishRegistration(user, hashedPassword) {\n      let userWithHashedPassword = {\n        user: user,\n        hashedPassword: hashedPassword\n      };\n      return this.http.post(environment.apiUrl + '/finish_registration', userWithHashedPassword).pipe(catchError(this.errorHandler.bind(this)));\n    }\n    restorePassword(token, newPassword) {\n      let tokenWithNewPassword = {\n        token: token,\n        newPassword: newPassword\n      };\n      return this.http.post(environment.apiUrl + '/restore_password', tokenWithNewPassword).pipe(catchError(this.errorHandler.bind(this)), tap(result => {\n        if (result.success) {\n          this.getUserByToken(result.token).subscribe(user => {\n            this.mailService.sendPasswordChangeNotification(user.email).subscribe(mail => mail);\n          });\n        }\n      }));\n    }\n    updateTokenWithRememberMeFlag(token, rememberMe) {\n      if (rememberMe) this.updateTokenGlobally(token);else this.updateTokenInSession(token);\n    }\n    updateTokenInSession(token) {\n      this.sessionService.saveTokenToSessionStorage(token);\n    }\n    updateTokenGlobally(token) {\n      this.sessionService.saveTokenToSessionStorage(token);\n      this.sessionService.saveTokenToLocalStorage(token);\n    }\n    updateTokenWhereItWasSet(token) {\n      this.sessionService.updateTokenWhereItWasSet(token);\n    }\n    errorHandler(error) {\n      this.errorService.handle(error.message);\n      return throwError(() => error.message);\n    }\n  }\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ErrorService), i0.ɵɵinject(i3.SessionService), i0.ɵɵinject(i4.MailService));\n  };\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}