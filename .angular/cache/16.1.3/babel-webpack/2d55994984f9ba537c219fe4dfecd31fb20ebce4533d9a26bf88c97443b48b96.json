{"ast":null,"code":"import { catchError, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./error.service\";\nimport * as i3 from \"./session.service\";\nexport class FormService {\n  constructor(http, errorService, sessionService) {\n    this.http = http;\n    this.errorService = errorService;\n    this.sessionService = sessionService;\n  }\n  getAll() {\n    return this.http.get('http://localhost:8080/forms').pipe(catchError(this.errorHandler.bind(this)));\n  }\n  getFormsByTopicId(topicId) {\n    let path = 'http://localhost:8080/forms/topic_' + topicId;\n    return this.http.get(path).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  getFormsByUserId(userId) {\n    let token = this.sessionService.getToken();\n    let path = 'http://localhost:8080/forms/user_' + userId;\n    return this.http.post(path, token).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  getFormById(id) {\n    let token = this.sessionService.getToken();\n    let path = 'http://localhost:8080/forms/' + id;\n    return this.http.post(path, token).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  saveForm(form) {\n    let token = this.sessionService.getToken();\n    let tokenWithForm = {\n      token: token,\n      form: form\n    };\n    return this.http.post('http://localhost:8080/save_form', tokenWithForm).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  deleteForm(form) {\n    let token = this.sessionService.getToken();\n    let tokenWithForm = {\n      token: token,\n      form: form\n    };\n    return this.http.post('http://localhost:8080/delete_form', tokenWithForm).pipe(catchError(this.errorHandler.bind(this)));\n  }\n  errorHandler(error) {\n    this.errorService.handle(error.message);\n    return throwError(() => error.message);\n  }\n}\nFormService.ɵfac = function FormService_Factory(t) {\n  return new (t || FormService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ErrorService), i0.ɵɵinject(i3.SessionService));\n};\nFormService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FormService,\n  factory: FormService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","throwError","FormService","constructor","http","errorService","sessionService","getAll","get","pipe","errorHandler","bind","getFormsByTopicId","topicId","path","getFormsByUserId","userId","token","getToken","post","getFormById","id","saveForm","form","tokenWithForm","deleteForm","error","handle","message","i0","ɵɵinject","i1","HttpClient","i2","ErrorService","i3","SessionService","factory","ɵfac","providedIn"],"sources":["C:\\Важное\\6 семестр =)\\Практыка\\Проект\\questionnaire\\angular-questionnaire\\src\\app\\service\\form.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient, HttpErrorResponse} from \"@angular/common/http\";\nimport {ErrorService} from \"./error.service\";\nimport {catchError, Observable, throwError} from \"rxjs\";\nimport {RequestResult} from \"../additional/RequestResult\";\nimport {Form} from \"../entity/Form\";\nimport {SessionService} from \"./session.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormService {\n  private http: HttpClient;\n  private errorService: ErrorService;\n  private sessionService: SessionService;\n\n  constructor(http: HttpClient,\n              errorService: ErrorService,\n              sessionService: SessionService) {\n    this.http = http;\n    this.errorService = errorService;\n    this.sessionService = sessionService;\n  }\n\n  getAll(): Observable<Form[]> {\n    return this.http.get<Form[]>('http://localhost:8080/forms')\n      .pipe(\n        catchError(this.errorHandler.bind(this))\n      );\n  }\n\n  getFormsByTopicId(topicId: bigint) : Observable<Form[]> {\n    let path = 'http://localhost:8080/forms/topic_' + topicId;\n    return this.http.get<Form[]>(path)\n      .pipe(\n        catchError(this.errorHandler.bind(this)),\n      );\n  }\n\n  getFormsByUserId(userId: bigint) : Observable<Form[]> {\n    let token = this.sessionService.getToken();\n    let path = 'http://localhost:8080/forms/user_' + userId;\n    return this.http.post<Form[]>(path, token)\n      .pipe(\n        catchError(this.errorHandler.bind(this)),\n      );\n  }\n\n  getFormById(id: bigint): Observable<Form> {\n    let token = this.sessionService.getToken();\n    let path = 'http://localhost:8080/forms/' + id;\n    return this.http.post<Form>(path, token)\n      .pipe(\n        catchError(this.errorHandler.bind(this)),\n      );\n  }\n\n  saveForm(form: Form): Observable<RequestResult> {\n    let token = this.sessionService.getToken();\n    let tokenWithForm = {token: token, form: form};\n    return this.http.post<RequestResult>('http://localhost:8080/save_form', tokenWithForm)\n      .pipe(\n        catchError(this.errorHandler.bind(this)),\n      );\n  }\n\n  deleteForm(form: Form): Observable<RequestResult> {\n    let token = this.sessionService.getToken();\n    let tokenWithForm = {token: token, form: form};\n    return this.http.post<RequestResult>('http://localhost:8080/delete_form', tokenWithForm)\n      .pipe(\n        catchError(this.errorHandler.bind(this)),\n      );\n  }\n\n  private errorHandler(error: HttpErrorResponse) {\n    this.errorService.handle(error.message);\n    return throwError(() => error.message);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}